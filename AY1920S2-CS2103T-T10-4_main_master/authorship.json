[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "mainClassName \u003d \u0027nasa.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    compile \u0027com.google.code.gson:gson:2.8.6\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    archiveName \u003d \u0027nasa.jar\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 153,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/AppParameters.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 1,
      "-": 61
    }
  },
  {
    "path": "src/main/java/nasa/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " *     Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/nasa/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.JsonNasaBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.NasaBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.ui.Ui;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.ui.UiManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing NASA ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        NasaBookStorage nasaBookStorage \u003d new JsonNasaBookStorage(userPrefs.getNasaBookFilePath(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                userPrefs.getHistoryBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        storage \u003d new StorageManager(nasaBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s NASA and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * The data from the sample NASA will be used instead if {@code storage}\u0027s NASA is not found,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * or an empty NASA will be used instead if errors occur when reading {@code storage}\u0027s NASA."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Optional\u003cReadOnlyNasaBook\u003e nasaBookOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Optional\u003cReadOnlyHistory\u003e historyBookOptional;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ReadOnlyNasaBook initialNasaBook;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ReadOnlyHistory initialHistoryBook;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            nasaBookOptional \u003d storage.readNasaBook();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            historyBookOptional \u003d storage.readHistoryBook();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (!nasaBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample NasaBook\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (!historyBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample HistoryBook\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialNasaBook \u003d nasaBookOptional.orElseGet(SampleDataUtil::getSampleNasaBook);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialHistoryBook \u003d historyBookOptional.orElseGet(SampleDataUtil::getSampleHistoryBook);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty NasaBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialNasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialHistoryBook \u003d new HistoryBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty NasaBook\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialNasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            initialHistoryBook \u003d new HistoryBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new ModelManager(initialNasaBook, initialHistoryBook, userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty NASA\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.info(\"Starting NASA \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping NASA ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 33,
      "EdmondOng": 24,
      "-": 139,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/Config.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/GuiSettings.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.awt.Toolkit;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //Fills up entire screen when programme starts."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d Toolkit.getDefaultToolkit()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .getScreenSize()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .getHeight();;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d Toolkit.getDefaultToolkit()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .getScreenSize()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .getWidth();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "-": 70,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/LogsCenter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String LOG_FILE \u003d \"nasa.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 110
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_INVALID_MODULE_DISPLAYED_INDEX \u003d \"The module index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX \u003d \"The activity index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_ACTIVITY_LISTED_OVERVIEW \u003d \"%1$d activities listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_MODULE_LISTED_OVERVIEW \u003d \"%1$d modules listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "kester-ng": 11,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/Version.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 112
    }
  },
  {
    "path": "src/main/java/nasa/commons/core/index/Index.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/nasa/commons/exceptions/DataConversionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/nasa/commons/exceptions/IllegalValueException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/AppUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.MainApp;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 37
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/CollectionUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /** @see #requireAllNonNull(Collection) */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/ConfigUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/FileUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 82
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/JsonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 140
    }
  },
  {
    "path": "src/main/java/nasa/commons/util/StringUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 66
    }
  },
  {
    "path": "src/main/java/nasa/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the NasaBook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see nasa.model.Model#getNasaBook()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    ReadOnlyNasaBook getNasaBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of modules */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the user prefs\u0027 NASA file path."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Path getNasaBookFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 15,
      "-": 36
    }
  },
  {
    "path": "src/main/java/nasa/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.NasaBookParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final NasaBookParser nasaBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBookParser \u003d new NasaBookParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            storage.saveUltimate(model.getNasaBook(), model.getHistoryManager().getHistoryBook());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            logger.info(\"-------------------Error while setting up logic manager\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Command command \u003d nasaBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            storage.saveUltimate(model.getNasaBook(), model.getHistoryManager().getHistoryBook());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ReadOnlyNasaBook getNasaBook() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return model.getNasaBook();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return model.getFilteredModuleList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Path getNasaBookFilePath() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return model.getNasaBookFilePath();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 22,
      "EdmondOng": 6,
      "-": 56
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/AddModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Adds a module to NASA."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddModuleCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a module to NASA. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_MODULE_NAME + \"MODULE NAME\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"CS3233 \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE_NAME + \"Competitive Programming\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New module %s added!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_DUPLICATED_MODULE \u003d \"This module already exist!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Module toAdd;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates an AddModuleCommand to add the specified {@code Module}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param module Module to be added"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        toAdd \u003d module;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (model.hasModule(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATED_MODULE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.addModule(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof AddModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddModuleCommand) other).toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 15,
      "kester-ng": 43
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Clears the nasa book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Nasa has been cleared!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        model.setNasaBook(new NasaBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 70
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/DeleteActivityCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Deletes an activity identified using it\u0027s displayed index from the module list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteActivityCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \": Deletes the activities identified by the index numbers used in the displayed activity list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: \" + PREFIX_MODULE + \"MODULE CODE INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_MODULE + \"CS3233\" + \" 1 2 3\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_DELETE_ACTIVITY_SUCCESS \u003d \" are deleted successfully!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Activity indicated does not exist!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d \"Module does not exist!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates a DeleteActivityCommand to delete the activity at"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code index} from the specified {@code moduleCode} list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param index index of the activity to be deleted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode module of the activity that it is associated with"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeleteActivityCommand(Index index, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!model.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.removeActivityByIndex(moduleCode, index);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(index.toString() + MESSAGE_DELETE_ACTIVITY_SUCCESS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof DeleteActivityCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 index.equals(((DeleteActivityCommand) other).index));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 14,
      "kester-ng": 52
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/DeleteModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Deletes a module identified using it\u0027s code from NASA."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteModuleCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"mdelete\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \": Deletes the module specified by the code in NASA.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Parameters: \" + PREFIX_MODULE + \".....\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" CS2030\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_DELETE_MODULE_SUCCESS \u003d \"%1$s is deleted successfully!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"Module indicated does not exist!\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final ModuleCode moduleToDelete;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates a DeleteModuleCommand to delete the specified {@code module}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode Module to be deleted"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeleteModuleCommand(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleToDelete \u003d moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (model.hasModule(moduleToDelete)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            model.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof DeleteModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 moduleToDelete.equals(((DeleteModuleCommand) other).moduleToDelete));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 13,
      "kester-ng": 41
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/EditActivityCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_ACTIVITIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Lesson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Status;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.UniqueActivityList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Edits a specific activity in the moduleCode\u0027s list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class EditActivityCommand extends Command {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the activity identified \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"by the index number used in the displayed moduleCode\u0027s activity list. \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"[\" + PREFIX_ACTIVITY_NAME + \"ACTIVITY NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"[\" + PREFIX_NOTE + \"NOTE]\\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"CS2030 \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_DATE + \"2020-03-20 \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"Assignment 2.3\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_EDIT_ACTIVITY_SUCCESS \u003d \"Edited Activity\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"This activity already exists in the \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"moduleCode activity list.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final EditActivityCommand.EditActivityDescriptor editActivityDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates an EditActivityCommand to edit an activity"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * with the specified {@code index} from the specified {@code moduleCode} list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param index index of the activity item as specified in the corresponding module"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param moduleCode module code which the activity item is found in"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param editActivityDescriptor"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditActivityCommand(Index index, ModuleCode moduleCode, EditActivityDescriptor editActivityDescriptor) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.editActivityDescriptor \u003d new EditActivityDescriptor(editActivityDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module module \u003d model.getNasaBook().getUniqueModuleList().getModule(moduleCode);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        UniqueActivityList moduleUniqueActivityList \u003d module.getActivities();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d moduleUniqueActivityList.getActivityList().size()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Activity activityToEdit \u003d moduleUniqueActivityList.getActivityByIndex(index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Activity editedActivity \u003d createEditedActivity(activityToEdit, editActivityDescriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(editedActivity);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!activityToEdit.isSameActivity(editedActivity) \u0026\u0026 model.hasActivity(moduleCode, editedActivity)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.setActivityByIndex(moduleCode, index, editedActivity);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.updateFilteredActivityList(index, PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates and returns an {@code Activity} with the details of {@code activityToEdit}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private static Activity createEditedActivity(Activity activityToEdit,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                                  EditActivityDescriptor editActivityDescriptor) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(activityToEdit);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Name updatedName \u003d editActivityDescriptor.getName().orElse(activityToEdit.getName());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Date updatedDate \u003d editActivityDescriptor.getDate().orElse(activityToEdit.getDate());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Note updatedNote \u003d editActivityDescriptor.getNote().orElse(activityToEdit.getNote());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Priority updatedPriority \u003d editActivityDescriptor.getPriority().orElse(activityToEdit.getPriority());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Status status \u003d activityToEdit.getStatus(); // original moduleCode\u0027s activity list is preserved"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (activityToEdit instanceof Deadline) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            Date dueDate \u003d ((Deadline) activityToEdit).getDueDate();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return new Deadline(updatedName, updatedDate, updatedNote, status, updatedPriority, dueDate);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } else if (activityToEdit instanceof Event) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            Date startDate \u003d ((Event) activityToEdit).getDateFrom();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            Date endDate \u003d ((Event) activityToEdit).getDateTo();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return new Event(updatedName, updatedDate, updatedNote, status, updatedPriority,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    startDate, endDate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } else if (activityToEdit instanceof Lesson) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            Date startDate \u003d ((Lesson) activityToEdit).getDateFrom();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            Date endDate \u003d ((Lesson) activityToEdit).getDateTo();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return new Event(updatedName, updatedDate, updatedNote, status, updatedPriority,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    startDate, endDate);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof EditActivityCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 index.equals(((EditActivityCommand) other).index)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((EditActivityCommand) other).moduleCode)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 editActivityDescriptor.equals(((EditActivityCommand) other).editActivityDescriptor));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Stores the details to edit the activity with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * corresponding field value of the moduleCode."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static class EditActivityDescriptor {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Note note;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public EditActivityDescriptor() {}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public EditActivityDescriptor(EditActivityCommand.EditActivityDescriptor toCopy) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setNote(toCopy.note);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, date, note, priority);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setNote(Note note) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.note \u003d note;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cNote\u003e getNote() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(note);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (!(other instanceof EditActivityCommand.EditActivityDescriptor)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            EditActivityCommand.EditActivityDescriptor e \u003d (EditActivityCommand.EditActivityDescriptor) other;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return getName().equals(e.getName()) \u0026\u0026 getDate().equals(e.getDate()) \u0026\u0026 getNote().equals(e.getNote())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 10,
      "kester-ng": 46,
      "don-tay": 173
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/EditModuleCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.UniqueActivityList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Edits a module in the NASA book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class EditModuleCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"medit\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the module identified \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"by the module code in the displayed NASA application. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"[\" + PREFIX_MODULE + \"MODULE CODE] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"[\" + PREFIX_MODULE_NAME + \"MODULE NAME]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"CS2030 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"CS2020 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE_NAME + \"Data Structures and Algorithms II\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_EDIT_MODULE_SUCCESS \u003d \"Edited Module\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_MODULE \u003d \"This module already exists in the list.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String EXCESS_MODULE_CODE \u003d \"Failed to edit module code. EXACTLY 2 module codes must be \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"entered to edit module code.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final EditModuleCommand.EditModuleDescriptor editModuleDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates an EditModuleCommand to edit a module at specified {@code index}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param moduleCode Module code of the module to be edited"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param editModuleDescriptor EditModuleDescriptor helper to edit the module"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleCommand(ModuleCode moduleCode, EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(editModuleDescriptor);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.editModuleDescriptor \u003d new EditModuleDescriptor(editModuleDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode moduleCodeToEdit \u003d this.moduleCode;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module moduleToEdit \u003d model.getNasaBook().getUniqueModuleList().getModule(moduleCodeToEdit);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(moduleToEdit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module editedModule \u003d createEditedModule(moduleToEdit, editModuleDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (moduleToEdit.isSameModule(editedModule) || model.hasModule(editedModule)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new nasa.logic.commands.exceptions.CommandException(MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.setModule(moduleToEdit, editedModule);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_MODULE_SUCCESS, editedModule));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Creates and returns a {@code Module} with the details of {@code moduleToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * edited with {@code editModuleDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private static Module createEditedModule(Module moduleToEdit,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                                             EditModuleCommand.EditModuleDescriptor editModuleDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assert moduleToEdit !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode updatedModuleCode \u003d editModuleDescriptor.getModuleCode().orElse(moduleToEdit.getModuleCode());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleName updatedModuleName \u003d editModuleDescriptor.getModuleName().orElse(moduleToEdit.getModuleName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        UniqueActivityList activityList \u003d moduleToEdit.getActivities(); // original module\u0027s activity list is preserved"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ObservableList\u003cActivity\u003e filteredActivityList \u003d moduleToEdit.getFilteredActivityList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module newModule \u003d new Module(updatedModuleCode, updatedModuleName);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        newModule.setActivities(activityList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        newModule.setActivities(filteredActivityList);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return newModule;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof EditModuleCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((EditModuleCommand) other).moduleCode)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 editModuleDescriptor.equals(((EditModuleCommand) other).editModuleDescriptor));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Stores the details to edit the module with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * corresponding field value of the module."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static class EditModuleDescriptor {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        private ModuleName moduleName;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public EditModuleDescriptor() {}"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public EditModuleDescriptor(EditModuleCommand.EditModuleDescriptor toCopy) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setModuleCode(toCopy.moduleCode);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            setModuleName(toCopy.moduleName);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return CollectionUtil.isAnyNonNull(moduleCode, moduleName);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cModuleCode\u003e getModuleCode() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(moduleCode);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void setModuleName(ModuleName moduleName) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public Optional\u003cModuleName\u003e getModuleName() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return Optional.ofNullable(moduleName);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (!(other instanceof EditModuleCommand.EditModuleDescriptor)) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            EditModuleCommand.EditModuleDescriptor e \u003d (EditModuleCommand.EditModuleDescriptor) other;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return getModuleCode().equals(e.getModuleCode()) \u0026\u0026 getModuleName().equals(e.getModuleName());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "kester-ng": 37,
      "don-tay": 126
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting NASA as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_ACTIVITY_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.ActivityContainsKeyWordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Finds and lists all activities in NASA whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents the command for finding specific activities."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all activities whose names contain any of \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" assignment lab tutorial\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final ActivityContainsKeyWordsPredicate predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public FindCommand(ActivityContainsKeyWordsPredicate predicate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // TODO add the necessary implementation once model is done"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ACTIVITY_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            getNumberOfFilteredActivities(model.getFilteredModuleList())));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private int getNumberOfFilteredActivities(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int numberOfActivities \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            numberOfActivities +\u003d module.getFilteredActivityList().size();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return numberOfActivities;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 3,
      "kester-ng": 51
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_ACTIVITIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Lists all modules and their activity lists to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all modules\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "kester-ng": 21
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/RedoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Command to handle redo previous action."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": reset data by a single step.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"redo last action.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.redoHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 19,
      "kester-ng": 2
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/RepeatCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Repeat an activity for a week, twice a week or monthly."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class RepeatCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"repeat\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": repeat a module activity.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"Example for weekly repetition: \" + COMMAND_WORD + \" m/CS3233 a/SEA Group Programming Assignment r/1\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"Example for twice weekly repetition: \" + COMMAND_WORD + \" m/CS3233 a/Lab r/2\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"Example for monthly repetition: \" + COMMAND_WORD + \" m/CS3233 a/Lab r/3\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"set repeated.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleCode module;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Name activity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Index schedule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public RepeatCommand(ModuleCode module, Name activity, Index schedule) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.setSchedule(module, activity, schedule);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, false, false);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                || (other instanceof RepeatCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 module.equals(((RepeatCommand) other).module)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 activity.equals(((RepeatCommand) other).activity)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 schedule.equals(((RepeatCommand) other).schedule));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return String.format(\"%s %s %s\", module, activity, schedule.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 46,
      "kester-ng": 5
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/SortCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_SORT_METHOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.SortMethod;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Lists all modules and their activity lists to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts all activities according to the the method \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"specified.\\nParameters: \" + PREFIX_SORT_METHOD + \"SORT METHOD \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_SORT_METHOD + \"priority\";;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Sorted all activities\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final SortMethod sortMethod;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public SortCommand(SortMethod sortMethod) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.sortMethod \u003d sortMethod;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        model.sortActivityList(sortMethod);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                || (other instanceof SortCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 sortMethod.equals(((SortCommand) other).sortMethod)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "don-tay": 42
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/StatisticsCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Lists all modules and their activity lists to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class StatisticsCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"statistics\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"These are the statistics for %s.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 21
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/UndoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Command to undo the previous action."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": reset data by a single step.\\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Undo last action.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model.undoHistory();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, false, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 21
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/addcommands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Adds any activity to a module\u0027s activity list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New activity added!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_DUPLICATED_ACTIVITY \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"This activity already exist in the module\u0027s activity list!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_MODULE_NOT_FOUND \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"The module does not exist!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final Activity toAdd;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final ModuleCode moduleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates an AddCommand that adds {@code activity} to list of {@code moduleCode}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activity Activity to be added"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode Module where the activity is to be added"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddCommand(Activity activity, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        toAdd \u003d activity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // check if module exist and if a duplicated activity already exists"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!model.hasModule(moduleCode)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (model.hasActivity(moduleCode, toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATED_ACTIVITY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.addActivity(moduleCode, toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 moduleCode.equals(((AddCommand) other).moduleCode));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "kester-ng": 56
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/addcommands/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Adds a deadline task to a module\u0027s list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddDeadlineCommand extends AddCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a deadline to the module\u0027s activity list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_DATE + \"DATE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"ACTIVITY NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_NOTE + \"NOTE \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"CS3233 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_DATE + \"20-03-2020 02:30 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"SEA Group Programming Assignment \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_PRIORITY + \"1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_NOTE + \"Focus on computational geometry and DP.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates an AddCommand that adds {@code deadline} to list of {@code moduleCode}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param deadline Deadline task to be added"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode Module where deadline is to be added."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddDeadlineCommand(Deadline deadline, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "       super(deadline, moduleCode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 11,
      "kester-ng": 30
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/addcommands/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Adds an event activity to a module\u0027s list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddEventCommand extends AddCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"event\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an event to the module\u0027s activity list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_START_DATE + \"START DATE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_END_DATE + \"END DATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"ACTIVITY NAME \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_NOTE + \"NOTE\" + \"\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"CS3233 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_START_DATE + \"12-04-2020 02:00 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_END_DATE + \"12-04-2020 04:00 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"CP contest  \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_PRIORITY + \"1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_NOTE + \"Remember to study content before coming.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates an AddCommand that adds {@code event} to list of {@code moduleCode}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param event Event to be added"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode Module where the event is to be added"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddEventCommand(Event event, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(event, moduleCode);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 14,
      "kester-ng": 29
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/addcommands/AddLessonCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Adds a lesson to a module\u0027s list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddLessonCommand extends AddCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"lesson\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a lesson to the module\u0027s activity list. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"MODULE CODE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_START_DATE + \"START DATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_END_DATE + \"END DATE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"ACTIVITY NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_NOTE + \"NOTE\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_MODULE + \"CS3233 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_START_DATE + \"12-04-2020 02:00 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + PREFIX_END_DATE + \"12-04-2020 04:00 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_ACTIVITY_NAME + \"Tutorial \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_PRIORITY + \"1 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PREFIX_NOTE + \"Remember to study content before coming.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Creates an AddCommand that adds {@code lesson} to list of {@code moduleCode}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param lesson Lesson to be added"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode Module where the lesson is to be added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddLessonCommand(Lesson lesson, ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(lesson, moduleCode);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 14,
      "kester-ng": 30
    }
  },
  {
    "path": "src/main/java/nasa/logic/commands/exceptions/CommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/AddModuleCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates an AddModuleCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddModuleCommandParser implements Parser\u003cAddModuleCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddModuleCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * and returns an AddModuleCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_MODULE_NAME);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_MODULE_NAME)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleName moduleName \u003d ParserUtil.parseModuleName(argMultimap.getValue(PREFIX_MODULE_NAME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d new Module(moduleCode, moduleName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new AddModuleCommand(module);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 11,
      "kester-ng": 36
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ArgumentMultimap.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns the first value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Optional\u003cString\u003e getFirstValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(0));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 59,
      "don-tay": 7
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ArgumentTokenizer.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 147
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_MODULE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_ACTIVITY_NAME \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_MODULE_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_NOTE \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Prefix PREFIX_REPEAT \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Prefix PREFIX_SORT_METHOD \u003d new Prefix(\"sm/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 2,
      "kester-ng": 14,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/DeleteActivityCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.DeleteActivityCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates a DeleteActivityCommand object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteActivityCommandParser implements Parser\u003cDeleteActivityCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteActivityCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DeleteActivityCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                DeleteActivityCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         * If PREFIX_MODULE exist, then return DeleteActivityCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         * else throw exception"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new DeleteActivityCommand(index, moduleCode);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                DeleteActivityCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                DeleteActivityCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "kester-ng": 45
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/DeleteModuleCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates a DeleteModuleCommand object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class DeleteModuleCommandParser implements Parser\u003cDeleteModuleCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteModuleCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * and returns a DeleteModuleCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public DeleteModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new DeleteModuleCommand(moduleCode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                DeleteModuleCommand.MESSAGE_USAGE), e);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 21,
      "kester-ng": 15
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/EditActivityCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.EditActivityCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Parses input arguments and creates a new EditActivityCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditActivityCommandParser implements Parser\u003cEditActivityCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditActivityCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public EditActivityCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_DATE, PREFIX_NOTE, PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                        PREFIX_ACTIVITY_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getFirstValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditActivityCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (NoSuchElementException ne) { // case when no module code is provided"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditActivityCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    ne);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityCommand.EditActivityDescriptor editActivityDescriptor \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                new EditActivityCommand.EditActivityDescriptor();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editActivityDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACTIVITY_NAME).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editActivityDescriptor.setName(ParserUtil.parseActivityName("
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    argMultimap.getValue(PREFIX_ACTIVITY_NAME).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NOTE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editActivityDescriptor.setNote(ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editActivityDescriptor.setPriority(ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!editActivityDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(EditActivityCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new EditActivityCommand(index, moduleCode, editActivityDescriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 24,
      "don-tay": 46
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/EditModuleCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.EditModuleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Parses input arguments and creates a new EditModuleCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleCommandParser implements Parser\u003cEditModuleCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private static final int EDIT_MODULE_CODE \u003d 2; // Number of modules to trigger an edit of module code"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditModuleCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public EditModuleCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String argsWithWhitespace \u003d addStartWhitespace(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ArgumentTokenizer.tokenize(argsWithWhitespace, PREFIX_MODULE, PREFIX_MODULE_NAME);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode moduleCode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getFirstValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (NoSuchElementException ne) { // case when no module code is provided"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditModuleCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    ne);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor editModuleDescriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        List\u003cString\u003e allModuleCodeParsed \u003d argMultimap.getAllValues(PREFIX_MODULE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (isModuleCodeEditable(allModuleCodeParsed)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editModuleDescriptor.setModuleCode(ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODULE_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            editModuleDescriptor.setModuleName(ParserUtil.parseModuleName("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    argMultimap.getValue(PREFIX_MODULE_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!editModuleDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            if (isExcessModuleCodeParsed(allModuleCodeParsed)) { // case when more than 2 module code provided"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                throw new ParseException((EditModuleCommand.EXCESS_MODULE_CODE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(EditModuleCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new EditModuleCommand(moduleCode, editModuleDescriptor);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Helper method to add a whitespace to the start of args, as ArgumentTokenizer requires a preamble, which"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * the user input format for edit module does not have."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param args Original argument passed to EditModuleCommandParser class to be parsed"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return original argument with an additional whitespace at the start"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private String addStartWhitespace(String args) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return \" \" + args;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Checks if two module code prefixes are parsed, which indicates module code will be edited."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * If non-two \u0027/m\u0027, received, returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param moduleCodes list containing all {@code moduleCode} parsed"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if exactly two module codes provided, otherwise false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private boolean isModuleCodeEditable(List\u003cString\u003e moduleCodes) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (moduleCodes.size() \u003d\u003d EDIT_MODULE_CODE) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Checks if more than two module code prefixes are parsed, which indicates module code will not be edited."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * If more than two \u0027/m\u0027, received, returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param moduleCodes list containing all {@code moduleCode} parsed"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if more than two module codes provided, otherwise false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private boolean isExcessModuleCodeParsed(List\u003cString\u003e moduleCodes) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (moduleCodes.size() \u003e EDIT_MODULE_CODE) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 18,
      "don-tay": 80
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/FindCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.ActivityContainsKeyWordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates a new FindCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new FindCommand(new ActivityContainsKeyWordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "-": 25,
      "kester-ng": 3
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/NasaBookParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.DeleteActivityCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.RepeatCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.addcommands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.addcommands.AddEventCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.addcommands.AddLessonCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.addcommandparser.AddDeadlineCommandParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.addcommandparser.AddEventCommandParser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.addcommandparser.AddLessonCommandParser;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class NasaBookParser {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        switch (commandWord.toLowerCase()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case AddModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new AddModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case AddLessonCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new AddLessonCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        case AddDeadlineCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new AddDeadlineCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case DeleteActivityCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new DeleteActivityCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case DeleteModuleCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new DeleteModuleCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case RepeatCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return new RepeatActivityCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case StatisticsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new StatisticsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 81,
      "EdmondOng": 12,
      "kester-ng": 14,
      "don-tay": 5
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.SortMethod;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Parses {@code zeroBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static Index parseZeroIndex(String zeroBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String trimmedIndex \u003d zeroBasedIndex.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return Index.fromZeroBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the string date is of valid form."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param date of the user input"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Date object created based on user input"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String dateTrimmed \u003d date.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Date.isValidDate(dateTrimmed)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new Date(dateTrimmed);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the String name is not empty or does not only consists of whitespaces."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param name of the activity"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Name object of the activity"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Name parseActivityName(String name) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String nameTrimmed \u003d name.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Name.isValidName(nameTrimmed)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new Name(nameTrimmed);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String note} into a {@code Note}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the String note isn\u0027t empty or doesn\u0027t only contain whitespaces."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param note of the activity"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Note object of the activity"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Note parseNote(String note) throws ParseException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(note);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String noteTrimmed \u003d note.trim();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Note.isValidNote(noteTrimmed)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new Note(noteTrimmed);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String priority} into a {@code Priority}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the String priority is a correct integer."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param priority of the activity"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Priority object of the activity"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String priorityTrimmed \u003d priority.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!Priority.isValidPriorityValue(priorityTrimmed)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new Priority(priorityTrimmed);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String moduleCode} into a {@code moduleCode}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if String moduleCode is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode of the module"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return ModuleCode object"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static ModuleCode parseModuleCode(String moduleCode) throws ParseException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String moduleCodeTrimmed \u003d moduleCode.trim();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCodeTrimmed)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new ModuleCode(moduleCodeTrimmed);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code String moduleName} into a {@code moduleName}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if String moduleName is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleName of the module"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return ModuleName object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static ModuleName parseModuleName(String moduleName) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleName);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String moduleNameTrimmed \u003d moduleName.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!ModuleName.isValidModuleName(moduleNameTrimmed)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new ModuleName(moduleNameTrimmed);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Parses {@code String sortMethod} into a {@code SortMethod}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Checks if String sortMethod is correct."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param sortMethod to be used to sort activity list"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return SortMethod object"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static SortMethod parseSortMethod(String sortMethod) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(sortMethod);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String sortMethodTrimmed \u003d sortMethod.trim();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (!SortMethod.isValidSortMethod(sortMethodTrimmed)) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(SortMethod.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new SortMethod(sortMethodTrimmed);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 10,
      "EdmondOng": 10,
      "kester-ng": 122,
      "don-tay": 18
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/Prefix.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * E.g. \u0027m/\u0027 in \u0027add m/CS2103T\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/RepeatActivityCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_REPEAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.RepeatCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Parser for repeat command."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class RepeatActivityCommandParser implements Parser\u003cRepeatCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RepeatCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * and returns an RepeatCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public RepeatCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        PREFIX_ACTIVITY_NAME, PREFIX_REPEAT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Prefix[] prefixes \u003d {PREFIX_MODULE, PREFIX_ACTIVITY_NAME, PREFIX_REPEAT};"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean arePrefixesPresent \u003d Stream.of(prefixes).allMatch(prefix -\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!arePrefixesPresent"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RepeatCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // compulsory fields"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Name activityName \u003d ParserUtil.parseActivityName(argMultimap.getValue(PREFIX_ACTIVITY_NAME).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Index type \u003d ParserUtil.parseZeroIndex(argMultimap.getValue(PREFIX_REPEAT).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new RepeatCommand(moduleCode, activityName, type);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 46
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/SortCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_SORT_METHOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.SortMethod;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Parses input arguments and creates a new SortCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * and returns a SortCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SORT_METHOD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        SortMethod sortMethod;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            sortMethod \u003d ParserUtil.parseSortMethod(argMultimap.getValue(PREFIX_SORT_METHOD).get());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (NoSuchElementException ne) { // case when no sort method is provided"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                    ne);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new SortCommand(sortMethod);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "don-tay": 36
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/StatisticsCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.StatisticsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Parses input arguments and creates an Statistics object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class StatisticsCommandParser implements Parser\u003cStatisticsCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the StatisticsCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * and returns an StatisticsCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public StatisticsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (arePrefixesPresent(argMultimap, PREFIX_MODULE)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new StatisticsCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 38
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/addcommandparser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.addcommands.AddCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.parser.Prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates an AddCommandParser object."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public abstract class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 5,
      "kester-ng": 16
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/addcommandparser/AddDeadlineCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.addcommands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates an AddDeadlineCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddDeadlineCommandParser extends AddCommandParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddDeadlineCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddDeadlineCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_DATE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    PREFIX_ACTIVITY_NAME, PREFIX_PRIORITY, PREFIX_NOTE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            PREFIX_DATE, PREFIX_ACTIVITY_NAME)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDeadlineCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // compulsory fields"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date dueDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name activityName \u003d ParserUtil.parseActivityName(argMultimap.getValue(PREFIX_ACTIVITY_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            Deadline deadline \u003d new Deadline(activityName, dueDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // optional fields - must see if it exist, else create null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Note note;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_NOTE)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                note \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                deadline.setNote(note);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                note \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            Priority priority \u003d new Priority();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_PRIORITY)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            deadline.setPriority(priority);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new AddDeadlineCommand(deadline, moduleCode);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // if user provides a due date that is already past"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(Deadline.DUE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 17,
      "EdmondOng": 4,
      "kester-ng": 51
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/addcommandparser/AddEventCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.addcommands.AddEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates an AddEventCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddEventCommandParser extends AddCommandParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddEventCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_ACTIVITY_NAME, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        PREFIX_END_DATE, PREFIX_PRIORITY, PREFIX_NOTE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_ACTIVITY_NAME,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name activityName \u003d ParserUtil.parseActivityName(argMultimap.getValue(PREFIX_ACTIVITY_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Date startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Date endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            Event event \u003d new Event(activityName, startDate, endDate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // optional fields - must see if it exist, else create null"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Note note;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_NOTE)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                note \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                event.setNote(note);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                note \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            Priority priority \u003d new Priority();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_PRIORITY)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            event.setPriority(priority);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new AddEventCommand(event, moduleCode);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // if the start date is \u003e end date or end date is already in the past"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(Event.INVALID_EVENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 17,
      "EdmondOng": 11,
      "kester-ng": 43
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/addcommandparser/AddLessonCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.addcommands.AddLessonCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Parses input arguments and creates an AddLessonCommand object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddLessonCommandParser extends AddCommandParser {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddLessonCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public AddLessonCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODULE, PREFIX_ACTIVITY_NAME, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        PREFIX_END_DATE, PREFIX_PRIORITY, PREFIX_NOTE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODULE, PREFIX_ACTIVITY_NAME,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name activityName \u003d ParserUtil.parseActivityName(argMultimap.getValue(PREFIX_ACTIVITY_NAME).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d ParserUtil.parseModuleCode(argMultimap.getValue(PREFIX_MODULE).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Date startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Date endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            Lesson lesson \u003d new Lesson(activityName, startDate, endDate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // optional fields - must see if it exist, else create null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Note note;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_NOTE)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                note \u003d ParserUtil.parseNote(argMultimap.getValue(PREFIX_NOTE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                lesson.setNote(note);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                note \u003d null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            Priority priority \u003d new Priority();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_PRIORITY)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            lesson.setPriority(priority);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return new AddLessonCommand(lesson, moduleCode);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // if the start date is \u003e end date or end date is already in the past"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ParseException(Lesson.INVALID_LESSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 18,
      "EdmondOng": 10,
      "kester-ng": 45
    }
  },
  {
    "path": "src/main/java/nasa/logic/parser/exceptions/ParseException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/nasa/model/HistoryBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.history.ModuleListHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Construct a class to store undo and redo history."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * @param \u003cT\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class HistoryBook\u003cT\u003e implements ReadOnlyHistory\u003cT\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleListHistory\u003cT\u003e moduleListHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleListHistory\u003cT\u003e moduleListHistoryCollector;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleListHistory \u003d new ModuleListHistory\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleListHistoryCollector \u003d new ModuleListHistory\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryBook() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryBook(ReadOnlyHistory\u003cT\u003e history) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        resetData(history);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Reset history with new data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param newData"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void resetData(ReadOnlyHistory\u003cT\u003e newData) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleListHistory.setStack(newData.getModuleListHistory());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cT\u003e getModuleListHistory() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleListHistory.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModuleListHistory(ModuleListHistory\u003cT\u003e moduleListHistory) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.moduleListHistory \u003d moduleListHistory;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void add(T item) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleListHistory.push(item);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Undo previous action."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return true if there is history"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean undo() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean checkStack \u003d !moduleListHistory.isEmpty();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (checkStack) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            moduleListHistoryCollector.pushDirectly(moduleListHistory.getPop());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            moduleListHistory.pop();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return checkStack;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Redo previous action."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return true if there is undo history"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean redo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean checkItem \u003d !moduleListHistoryCollector.isEmpty();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (checkItem) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            moduleListHistory.push(moduleListHistoryCollector.popDirectly());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return checkItem;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public T getItem() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleListHistory.getPop();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public T getUndoItem() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleListHistoryCollector.getPop();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 83,
      "kester-ng": 2
    }
  },
  {
    "path": "src/main/java/nasa/model/HistoryManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * A wrapper class to handle various history data."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * @param \u003cT\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class HistoryManager\u003cT\u003e implements HistoryModel\u003cT\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final HistoryBook\u003cT\u003e historyBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryManager(ReadOnlyHistory\u003cT\u003e historyBook) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(historyBook);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.historyBook \u003d new HistoryBook\u003c\u003e(historyBook);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryManager() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.historyBook \u003d new HistoryBook\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cT\u003e getHistoryList() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook.getModuleListHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryBook\u003cT\u003e getHistoryBook() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public T getItem() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook.getItem();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void add(T moduleList) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        historyBook.add(moduleList);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean undo() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook.undo();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean redo() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook.redo();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 50,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/model/HistoryModel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * API of History interface."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * @param \u003cT\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public interface HistoryModel\u003cT\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean undo();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean redo();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void add(T list);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 13,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.SortMethod;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /** {@code Predicate} for modules that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Predicate\u003cModule\u003e PREDICATE_SHOW_ALL_MODULES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /** {@code Predicate} for activities that always evaluate to true */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    Predicate\u003cActivity\u003e PREDICATE_SHOW_ALL_ACTIVITIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getNasaBookFilePath();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setNasaBookFilePath(Path nasaBookFilePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces address book data with the data in {@code nasaBook}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setNasaBook(ReadOnlyNasaBook nasaBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /** Returns the NasaBook */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ReadOnlyNasaBook getNasaBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /** Returns the HistoryBook */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ReadOnlyHistory getHistoryBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the address book."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean hasModule(Module module);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns true if a module with the same identity as {@code module} exists in the address book."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    boolean hasModule(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The module must exist in the nasa book."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void deleteModule(Module target);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Deletes the given module."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The module must exist in the nasa book."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void deleteModule(ModuleCode target);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code module} must not already exist in the nasa book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void addModule(Module module);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Adds the given module."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code module} must not already exist in the nasa book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void addModule(ModuleCode moduleCode, ModuleName moduleName);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code target} must exist in the nasa book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the address book."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setModule(Module target, Module editedModule);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces the given module {@code target} with {@code editedModule}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code target} must exist in the nasa book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The module identity of {@code editedModule} must not be the same as another existing module in the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setModule(ModuleCode target, Module editedModule);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Adds the given activity."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code activity} must not already exist in the nasa book."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void addActivity(Module target, Activity activity);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Adds the given activity."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code activity} must not already exist in the nasa book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void addActivity(ModuleCode target, Activity activity);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Remove the given activity."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code activity} must not already exist in the nasa book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void removeActivity(Module target, Activity activity);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Remove the given activity."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code activity} must not already exist in the nasa book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void removeActivity(ModuleCode target, Activity activity);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if a module code {@code target} has {@code activity} exists in the nasa book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    boolean hasActivity(ModuleCode target, Activity activity);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Replaces the given activity in {@code target} with {@code editedActivity}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * {@code target} must exist in the nasa book."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * in the address book."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    // void setActivity(Activity target, Activity editedActivity);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /** Returns an unmodifiable view of the filtered activity list from the module at {@code index} of"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * the NasaBook\u0027s {@code UniqueModuleList}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredActivityList(Index index);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredActivityList(ModuleCode moduleCode);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Updates the filter of the filtered activity list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    void updateFilteredActivityList(Index index, Predicate\u003cActivity\u003e predicate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /** Returns an unmodifiable view of the filtered module list */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ObservableList\u003cModule\u003e getFilteredModuleList();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Updates the filter of the filtered module list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void updateFilteredModuleList(Predicate\u003cModule\u003e predicate);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Sorts filtered activity list of all modules by method specified by sortMethod"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param sortMethod The method of sorting."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    void sortActivityList(SortMethod sortMethod);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setActivityByIndex(Module module, Index index, Activity activity);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setActivityByIndex(ModuleCode moduleCode, Index index, Activity activity);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void editActivityByIndex(Module module, Index index, Object... args);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void editActivityByIndex(ModuleCode moduleCode, Index index, Object... args);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void removeModuleByIndex(Index index);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void removeActivityByIndex(Module module, Index index);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void removeActivityByIndex(ModuleCode moduleCode, Index index);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    HistoryManager\u003cUniqueModuleList\u003e getHistoryManager();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void undoHistory();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void redoHistory();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void setSchedule(ModuleCode module, Name activity, Index type);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "EdmondOng": 152,
      "kester-ng": 8,
      "don-tay": 28
    }
  },
  {
    "path": "src/main/java/nasa/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.SortMethod;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Represents the in-memory model of the NASA data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final NasaBook nasaBook;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final FilteredList\u003cModule\u003e filteredModules;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final HistoryManager\u003cUniqueModuleList\u003e historyManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initializes a ModelManager with the given NasaBook and userPrefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModelManager(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(nasaBook, userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.fine(\"Initializing with NASA: \" + nasaBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.nasaBook \u003d new NasaBook(nasaBook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        filteredModules \u003d new FilteredList\u003c\u003e(this.nasaBook.getModuleList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.historyManager \u003d new HistoryManager(historyBook);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        initialisation();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this(new NasaBook(), new HistoryBook\u003cUniqueModuleList\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryManager\u003cUniqueModuleList\u003e getHistoryManager() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyManager;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Startup setup for Nasa book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void initialisation() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateSchedule();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Update the history manager list every time there is a change."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void updateHistory() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final UniqueModuleList temp \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        temp.setModules(nasaBook.getDeepCopyList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        historyManager.add(temp);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Update the schedule for each activity."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void updateSchedule() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.scheduleAll();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void undoHistory() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (historyManager.undo()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            nasaBook.setModuleList(historyManager.getItem());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void redoHistory() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (historyManager.redo()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            nasaBook.setModuleList(historyManager.getItem());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getNasaBookFilePath() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return userPrefs.getNasaBookFilePath();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setNasaBookFilePath(Path nasaBookFilePath) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(nasaBookFilePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        userPrefs.setNasaBookFilePath(nasaBookFilePath);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NasaBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setNasaBook(ReadOnlyNasaBook nasaBook) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.nasaBook.resetData(nasaBook);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ReadOnlyNasaBook getNasaBook() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBook;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ReadOnlyHistory getHistoryBook() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyManager.getHistoryBook();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBook.hasModule(module);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean hasModule(ModuleCode module) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBook.hasModule(module);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.removeModule(target);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void deleteModule(ModuleCode target) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.removeModule(target);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeModuleByIndex(Index index) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.removeModuleByIndex(index);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(module);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //historyManager.add(new UniqueModuleList().setModules(nasaBook.getList()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void addModule(ModuleCode moduleCode, ModuleName moduleName) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(moduleCode, moduleName);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //historyManager.add(new UniqueModuleList().setModules(nasaBook.getList()));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.setModule(target, editedModule);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModule(ModuleCode target, Module editedModule) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(target, editedModule);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.setModule(target, editedModule);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void addActivity(Module target, Activity activity) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addActivity(target, activity);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void addActivity(ModuleCode target, Activity activity) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addActivity(target, activity);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivityByIndex(Module module, Index index, Activity activity) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.setActivityByIndex(module, index, activity);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivityByIndex(ModuleCode module, Index index, Activity activity) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.setActivityByIndex(module, index, activity);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void editActivityByIndex(Module module, Index index, Object... args) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.editActivityByIndex(module, index, args);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void editActivityByIndex(ModuleCode module, Index index, Object... args) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.editActivityByIndex(module, index, args);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeActivity(Module target, Activity activity) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.removeActivity(target, activity);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeActivity(ModuleCode target, Activity activity) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.removeActivity(target, activity);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeActivityByIndex(Module target, Index index) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.removeActivityByIndex(target, index);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeActivityByIndex(ModuleCode target, Index index) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.removeActivityByIndex(target, index);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean hasActivity(ModuleCode target, Activity activity) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireAllNonNull(target, activity);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBook.hasActivity(target, activity);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setSchedule(ModuleCode module, Name activity, Index type) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(module, activity, type);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        nasaBook.setSchedule(module, activity, type);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateHistory();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Module List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Module} backed by the internal list of"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code versionedNasaBook}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return filteredModules;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        filteredModules.setPredicate(predicate);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList(Index index) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module module \u003d filteredModules.get(index.getZeroBased());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return module.getDeepCopyList();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        updateFilteredModuleList(x -\u003e x.getModuleCode().equals(moduleCode));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module module \u003d filteredModules.get(0);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return module.getDeepCopyList();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void updateFilteredActivityList(Index index, Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module module \u003d filteredModules.get(index.getZeroBased());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        module.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Module module : filteredModules) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            module.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void sortActivityList(SortMethod sortMethod) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(sortMethod);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        for (Module module : filteredModules) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            module.sortActivityList(sortMethod);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBook.equals(other.nasaBook)"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 filteredModules.equals(other.filteredModules);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 9,
      "EdmondOng": 343,
      "kester-ng": 16,
      "don-tay": 9
    }
  },
  {
    "path": "src/main/java/nasa/model/NasaBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.UniqueActivityList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Wraps all data at the Nasa Book Level"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Duplicates are not allowed (by .isSameActivity comparison)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class NasaBook implements ReadOnlyNasaBook {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UniqueModuleList moduleList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public NasaBook() {}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates a NasaBook using the Modules in the {@code toBeCopied}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public NasaBook(ReadOnlyNasaBook toBeCopied) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Replaces the contents of the activities of module {@moduleCode} with {@code activities}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public UniqueActivityList getActivities(Module module) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.getActivities(module);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Replaces the contents of the activities of module {@moduleCode} with {@code activities}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public UniqueActivityList getActivities(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.getActivities(moduleCode);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Replaces the contents of the activities of module {@moduleCode} with {@code activities}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivities(Module module, List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(module);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        toEditModule.setActivities(activities);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.setModule(module, toEditModule);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Replaces the contents of the activities of module {@moduleCode} with {@code activities}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivities(ModuleCode module, List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(module);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        toEditModule.setActivities(activities);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.setModule(module, toEditModule);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces current module list with another module list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param moduleList must not be empty"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModuleList(UniqueModuleList moduleList) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(moduleList);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.moduleList.setModules(moduleList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModuleList(List\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(moduleList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.moduleList.setModules(moduleList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Add a single activity to module {@moduleCode} with {@code activity}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code activity} must not contain duplicate activities."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void addActivity(Module module, Activity activity) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(module);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        toEditModule.add(activity);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.setModule(module, toEditModule);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Add a single activity to module {@moduleCode} with {@code activity}"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code activity} must not contain duplicate activities."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void addActivity(ModuleCode moduleCode, Activity activity) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(moduleCode);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        toEditModule.add(activity);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Remove a single activity from module {@code module} with {@code activity}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code activity} must exist in the list."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeActivity(Module module, Activity activity) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(module);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        toEditModule.remove(activity);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.setModule(module, toEditModule);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Remove a single activity from module {@code module} with {@code activity}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code activity} must exist in the list."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeActivity(ModuleCode moduleCode, Activity activity) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(moduleCode);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        toEditModule.remove(activity);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.setModule(moduleCode, toEditModule);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Remove module by index."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param index must not be negative."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeModuleByIndex(Index index) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.removeByIndex(index);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Remove activity by index."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param index must not be negative."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeActivityByIndex(Module module, Index index) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(module);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        toEditModule.removeActivityByIndex(index);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Remove activity by index."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param index must not be negative."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeActivityByIndex(ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(moduleCode);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        toEditModule.removeActivityByIndex(index);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Check if it has activity {@code activity} in {@code module}"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean hasActivity(Module module, Activity activity) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(module);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return toEditModule.contains(activity);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Check if it has activity {@code activity} in {@code module}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean hasActivity(ModuleCode moduleCode, Activity activity) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module toEditModule \u003d moduleList.getModule(moduleCode);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return toEditModule.contains(activity);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Resets the existing data of this {@code NasaBook} with {@code newData}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void resetData(ReadOnlyNasaBook newData) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.setModules(newData.getModuleList());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    //// module-Level operations"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns true if an module has the same identity as {@code module} exits in NasaBook."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(module);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.contains(module);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns true if an module has the same identity as {@code module} exits in NasaBook."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean hasModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.contains(moduleCode);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Adds an module to the NasaBook."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The module must not already exist in the NasaBook"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void addModule(Module module) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.add(module);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Adds an module to the NasaBook."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The module must not already exist in the NasaBook"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void addModule(ModuleCode moduleCode, ModuleName moduleName) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.add(moduleCode, moduleName);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedActivity}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code target} must exit in the NasaBook."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The module identity of {@code editedActivity} must not be the same as another existing module in Nasa Book."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModule(Module target, Module editedActivity) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(editedActivity);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.setModule(target, editedActivity);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces the given module {@code target} in the list with {@code editedActivity}."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code target} must exit in the NasaBook."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The module identity of {@code editedActivity} must not be the same as another existing module in Nasa Book."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModule(ModuleCode target, Module editedActivity) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(editedActivity);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.setModule(target, editedActivity);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Activity getActivityByIndex(Module module, Index index) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.getModule(module).getActivityByIndex(index);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Activity getActivityByIndex(ModuleCode module, Index index) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.getModule(module).getActivityByIndex(index);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivityByIndex(Module module, Index index, Activity activity) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.setActivityByIndex(module, index, activity);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivityByIndex(ModuleCode moduleCode, Index index, Activity activity) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.setActivityByIndex(moduleCode, index, activity);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Edits activity via index."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param module module where the activity belongs"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param index index of the activity in the module activity list"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param args parameters to be edited"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void editActivityByIndex(Module module, Index index, Object... args) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.editActivityByIndex(module, index, args);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Edits activity via index."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode moduleCode of the activity"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param index index of the activity in the module activity list"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param args parameters to be edited"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void editActivityByIndex(ModuleCode moduleCode, Index index, Object... args) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.editActivityByIndex(moduleCode, index, args);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Removes {@code key} from this {@code NasaBook}."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code key} must exist in the Nasa Book."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeModule(Module key) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.remove(key);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Removes {@code key} from this {@code NasaBook}."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code key} must exist in the Nasa Book."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeModule(ModuleCode key) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.remove(key);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public UniqueModuleList getList() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Reschedule all activity based on user presets."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void scheduleAll() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.asModifiableObservableList().stream()"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .forEach(x -\u003e x.getActivities().getActivityList().stream()"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        .forEach(y -\u003e y.regenerate()));"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setSchedule(ModuleCode module, Name activity, Index type) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.getModule(module).getActivityByName(activity).setSchedule(type.getZeroBased());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Return a new NasaBook, to avoid pointing to the same data when testing."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBook deepCopyNasaBook() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        NasaBook newNasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        newNasaBook.setModuleList(getDeepCopyList());"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return newNasaBook;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.asUnmodifiableObservableList().size() + \" moduleList\";"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //TODO: refine Later"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public UniqueModuleList getUniqueModuleList() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return moduleList;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Ensure that the class being extracted does not points to the same object."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e getDeepCopyList() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ObservableList\u003cModule\u003e deepCopyList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (Module mods : moduleList.asUnmodifiableObservableList()) {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            Module moduleTemp \u003d new Module(mods.getModuleCode(), mods.getModuleName());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            moduleTemp.setActivities(mods.getActivities());"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            deepCopyList.add(moduleTemp);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return deepCopyList;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof NasaBook"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 moduleList.equals(((NasaBook) other).moduleList));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleList.hashCode();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "EdmondOng": 272,
      "kester-ng": 106,
      "don-tay": 5
    }
  },
  {
    "path": "src/main/java/nasa/model/ReadOnlyHistory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * API for History book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * @param \u003cT\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public interface ReadOnlyHistory\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ObservableList\u003cT\u003e getModuleListHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 15,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/model/ReadOnlyNasaBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Unmodifiable view of an Nasa book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public interface ReadOnlyNasaBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Gets the underlying {@code UniqueModuleList} from the NasaBook."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    UniqueModuleList getUniqueModuleList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns an unmodifiable view of the modules list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * This list will not contain any duplicate modules."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ObservableList\u003cModule\u003e getModuleList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ObservableList\u003cModule\u003e getDeepCopyList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 6,
      "kester-ng": 11,
      "don-tay": 5
    }
  },
  {
    "path": "src/main/java/nasa/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Path getNasaBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getHistoryBookFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "EdmondOng": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/nasa/model/Regenerable.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Allows activities to auto-repeat."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * @param \u003cT\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public interface Regenerable\u003cT\u003e {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    T regenerate();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 5,
      "don-tay": 4
    }
  },
  {
    "path": "src/main/java/nasa/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Path nasaBookFilePath \u003d Paths.get(\"data\" , \"nasabook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Path historyBookFilePath \u003d Paths.get(\"data\" , \"history.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        setNasaBookFilePath(newUserPrefs.getNasaBookFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        setHistoryBookFilePath(newUserPrefs.getHistoryBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Path getNasaBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return nasaBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getHistoryBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setNasaBookFilePath(Path nasaBookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(nasaBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.nasaBookFilePath \u003d nasaBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setHistoryBookFilePath(Path historyBookFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(historyBookFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.historyBookFilePath \u003d historyBookFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 nasaBookFilePath.equals(o.nasaBookFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 historyBookFilePath.equals(o.historyBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return Objects.hash(guiSettings, nasaBookFilePath, historyBookFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + nasaBookFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        sb.append(\"\\nLocal history data file location : \" + historyBookFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 10,
      "EdmondOng": 13,
      "-": 74,
      "kester-ng": 2
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Activity.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Regenerable;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Abstract class to specify fields with getter and setters for activities."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public abstract class Activity implements Regenerable\u003cActivity\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    protected Status status;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Schedule schedule;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Constructs a {@code activity} with default note, status and priority."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param name name of activity"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Activity(Name name) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.note \u003d new Note(\"-\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.date \u003d Date.now();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.status \u003d Status.ONGOING;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.priority \u003d new Priority(\"1\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.schedule \u003d new Schedule(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Constructs a {@code activity} with default status and priority."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param name name of activity"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param note note of activity"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Activity(Name name, Note note) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.date \u003d Date.now();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.status \u003d Status.ONGOING;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.priority \u003d new Priority(\"1\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.schedule \u003d new Schedule(date);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Constructs a {@code activity} with priority."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param name name of activity"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param note note of activity"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param priority priority of activity"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Activity(Name name, Note note, Priority priority) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.date \u003d Date.now();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.status \u003d Status.ONGOING;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.schedule \u003d new Schedule(date);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code activity}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param name name of activity"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param date date of the activity"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param note note of the activity"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param status status of the activity"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param priority priority of the activity"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Activity(Name name, Date date, Note note, Status status, Priority priority) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(name, date, note, status, priority);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.schedule \u003d new Schedule(date);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Retrieve the name of the activity."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return String name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Sets the activity name to a new name."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Used for editing activities."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param name of the activity"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Retrieve the date of the activity."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Date object representing when it is going to occur"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Sets the date of the activity to a new date."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Used for editing activities."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param date of the activity"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDate(Date date) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Retrieve the note object of the activity."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Note of the activity"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Note getNote() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return note;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Sets the note of the activity to a new one."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Used for editing activities."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param note of the activity"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setNote(Note note) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setStatus(Status status) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if both activities of the same name, note and date."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param otherActivity"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean isSameActivity(Activity otherActivity) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (otherActivity \u003d\u003d this) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return otherActivity !\u003d null"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 otherActivity.getName().equals(getName());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if both activities have the same identity and data fields."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * This defines a stronger notion of equality between two activities."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!(other instanceof Activity)) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Activity otherActivity \u003d (Activity) other;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return otherActivity.getName().equals(getName());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Retrieve the status object of the activity."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return Status of the activity"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Status getStatus() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return status;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Retrieve the late status of the activity."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return boolean, true means late, false means not"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean isLate() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return status \u003d\u003d Status.LATE;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Sets the task to done."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        status \u003d Status.DONE;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Retrieve the done status of the activity."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return boolean, true means done, false means not"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return status \u003d\u003d Status.DONE;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Schedule getSchedule() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return schedule;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setSchedule(int type) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        schedule.setType(type);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setSchedule(Schedule schedule) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Regenerate activity based on set rules and logic."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return new instance of the activity, with its attributes possibly modified"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public abstract Activity regenerate();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void updateStatus() {}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Objects.hash(name, note, date, status, priority);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .append(\" Note: \")"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .append(getNote())"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .append(\" Status: \")"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .append(getStatus())"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .append(\" Priority: \")"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .append(getPriority());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public abstract boolean occurInMonth(int month);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 29,
      "EdmondOng": 79,
      "kester-ng": 128,
      "don-tay": 16
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/ActivityContainsKeyWordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Predicate to allow activities to be filtered."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class ActivityContainsKeyWordsPredicate implements Predicate\u003cActivity\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ActivityContainsKeyWordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean test(Activity activity) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(activity.getName().name, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                || (other instanceof ActivityContainsKeyWordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 keywords.equals(((ActivityContainsKeyWordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 25,
      "kester-ng": 5
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Date.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.time.Duration;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.time.Period;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents Date of an Activity."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \"Dates should only be in the format DD-MM-YYYY HH:MM, and it should not be blank\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final LocalDateTime date;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.date \u003d constructDateTime(date);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static LocalDateTime constructDateTime(String date) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return LocalDateTime.parse(date, formatter);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Construct current date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Date object of current date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static Date now() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String now \u003d LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new Date(now);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if a given string is a valid date."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return true if the string matches date format."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            SimpleDateFormat formatter \u003d new SimpleDateFormat(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            formatter.setLenient(false);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            formatter.parse(test);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean isAfter(Date other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return date.isAfter(other.getDate());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean isBefore(Date other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return date.isBefore(other.getDate());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean isEqual(Date other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return date.isEqual(other.getDate());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public long[] getDifference(Date other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Duration duration \u003d Duration.between(date, other.getDate());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        duration \u003d duration.minusDays(duration.toDaysPart());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Period period \u003d Period.between(date.toLocalDate(), other.getDate().toLocalDate());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        long[] diffInTime \u003d {period.getDays(), period.getMonths(), period.getYears(), duration.toHoursPart(),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                duration.toMinutesPart()};"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return diffInTime;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Constructs a new date from the current date and number of days to add to this current date."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param numOfDaysToAdd number of days from the current day"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return a new instance of date"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Date addDaysToCurrDate(int numOfDaysToAdd) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        LocalDateTime oldDateTime \u003d this.getDate();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        LocalDateTime newDateTime \u003d oldDateTime.plusDays(numOfDaysToAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String newDateTimeStr \u003d newDateTime.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return new Date(newDateTimeStr);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Constructs a new date from the current date and number of days to add to this current date."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param numOfMonthsToAdd number of months from the current day"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return a new instance of date"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Date addMonthsToCurrDate(int numOfMonthsToAdd) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        LocalDateTime oldDateTime \u003d this.getDate();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        LocalDateTime newDateTime \u003d oldDateTime.plusMonths(numOfMonthsToAdd);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String newDateTimeStr \u003d newDateTime.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new Date(newDateTimeStr);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public LocalDateTime getDate() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns date as a string with format MMM d yyyy."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return date as a string with format MMM d yyyy."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return date.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 date.equals(((Date) other).date)); // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "EdmondOng": 44,
      "kester-ng": 77,
      "don-tay": 11
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Represents Deadlines method in NASA."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Deadline extends Activity {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DUE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            \"Deadline should be after date of creation.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date dueDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Deadline(Name name, Date dueDate) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(dueDate);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        checkArgument(isExpiredDueDate(dueDate), DUE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Deadline(Name name, Date dueDate, Note note) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(name, note);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(dueDate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        checkArgument(isExpiredDueDate(dueDate), DUE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Deadline(Name name, Note note, Priority priority, Date dueDate) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(name, note, priority);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(name, dueDate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialise Deadlines with a particular unique {@code name}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Deadline(Name name, Date date, Note note, Status status, Priority priority, Date dueDate) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(name, date, note, status, priority);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Date getDueDate() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return dueDate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void setDueDate(Date date) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.dueDate \u003d date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.updateStatus();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public int getDifferenceInDay() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return (int) getDate().getDifference(dueDate)[0];"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Get days remaining for the task."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public int getDaysRemaining() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return (int) this.dueDate.getDifference(Date.now())[0];"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void updateStatus() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (status \u003d\u003d Status.ONGOING \u0026\u0026 Date.now().isAfter(getDueDate())) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            status \u003d Status.LATE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static boolean isExpiredDueDate(Date date) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return date.isAfter(Date.now());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Deadline regenerate() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (super.getSchedule().update()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            setDueDate(getSchedule().getDate().addDaysToCurrDate(getDifferenceInDay()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            setStatus(Status.ONGOING);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean occurInMonth(int month) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int dueDateMonth \u003d dueDate.getDate().getMonth().getValue();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return month \u003d\u003d dueDateMonth;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 63,
      "kester-ng": 19,
      "don-tay": 7
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents Event method in Nasa Book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Event extends Activity {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_EVENT \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"Event provided is invalid!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise Event with default status and priority."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Event(Name name, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(startDate, endDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidEvent(this), INVALID_EVENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Event(Name name, Note note, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(name, note);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(startDate, endDate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Event(Name name, Note note, Priority priority, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(name, note, priority);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(startDate, endDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise Event with a particular unique {@code name}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Event(Name name, Note note, Status status, Priority priority, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(name, Date.now(), note, status, priority);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Initialise Event with a particular unique {@code name}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Event(Name name, Date date, Note note, Status status, Priority priority, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(name, date, note, status, priority);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Date getDateFrom() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Date getDateTo() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Checks if the event is valid."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activity Activity to be checked"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return true if it is valid else false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static boolean isValidEvent(Activity activity) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (activity instanceof Event) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            Event event \u003d (Event) activity;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            boolean hasNotExpired \u003d Date.now().isBefore(event.getDateTo());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            boolean isLogical \u003d event.getDateFrom().isBefore(event.getDateTo());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return hasNotExpired \u0026\u0026 isLogical;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    //TODO: detailed implementation of event regeneration"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Event regenerate() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean occurInMonth(int month) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int startDateMonth \u003d startDate.getDate().getMonth().getValue();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return month \u003d\u003d startDateMonth;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 12,
      "EdmondOng": 52,
      "kester-ng": 31,
      "don-tay": 4
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Lesson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Represents Lesson method in Nasa book. New lesson re-instantiates itself after the current lesson\u0027s status is DONE."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Lesson extends Activity {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_LESSON \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \"Lesson provided is invalid!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private int numOfDaysTillNextLesson \u003d 7; // Frequency of lesson in number of days (eg. every 7 days) Default is 7."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise Lessons with default status and priority."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Lesson(Name name, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(startDate, endDate);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidLesson(this), INVALID_LESSON);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Lesson(Name name, Note note, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(name, note);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(startDate, endDate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Lesson(Name name, Note note, Priority priority, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(name, note, priority);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(startDate, endDate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialise Deadlines with a particular unique {@code name}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Lesson(Name name, Date date, Note note, Status status, Priority priority, Date startDate, Date endDate) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(name, date, note, status, priority);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Date getDateFrom() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Date getDateTo() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public int getNumOfDaysTillNextLesson() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return numOfDaysTillNextLesson;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void setNumOfDaysTillNextLesson(int newNumOfDays) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.numOfDaysTillNextLesson \u003d newNumOfDays;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Initialise new lesson with the new date."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return new instance of lesson at the new date"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Lesson regenerate() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean occurInMonth(int month) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int startDateMonth \u003d startDate.getDate().getMonth().getValue();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return month \u003d\u003d startDateMonth;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to check if the lesson is valid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activity activity to be validated"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return true if the lesson is valid else false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidLesson(Activity activity) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(activity);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (activity instanceof Lesson) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Lesson lesson \u003d (Lesson) activity;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            boolean hasNotExpired \u003d Date.now().isBefore(lesson.getDateTo());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            boolean isLogical \u003d lesson.getDateFrom().isBefore(lesson.getDateTo());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return isLogical \u0026\u0026 hasNotExpired;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 40,
      "kester-ng": 41,
      "don-tay": 16
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Name.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents Name of an Activity."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 name.toLowerCase().equals(((Name) other).name.toLowerCase())); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 50,
      "kester-ng": 6
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Note.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents an activity\u0027s notes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: immutable, is valid as declared in {@link #isValidNote(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Note {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \"Notes should not be empty and must contain\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    + \"at least one non-whitespace character.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The notes String must contain at least one non-whitespace"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * character, otherwise a bunch of tabs and spaces will"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * qualify as a note which should not be the case."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$).+\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String VALIDATION_REGEX_EMPTY \u003d \"^$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final String content;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code Note}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param content Valid notes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Note(String content) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidNote(content), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.content \u003d content;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if a given string is considered valid notes."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidNote(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return test.trim().matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return content;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof Note // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 content.equals(((Note) other).content)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return content.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 2,
      "kester-ng": 57
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Priority.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents an activity\u0027s priority."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: an integer of range 1 to 5, default value set to 1 if no value received upon instantiation."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Priority should range from 1 to 5 inclusive only.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Valid integers that cannot start with the digit \u00270\u0027, and within range of 1 to 5."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String VALID_INTEGER_REGEX \u003d \"([1-5]\\\\d{0})\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Priority level set to 1 as default value if not specified."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Variable is not set as final to allow user to set default priority level (TBD)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static int defaultPriorityLevel \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final int priorityLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code Priority} with default priority level, when no argument is passed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Priority() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.priorityLevel \u003d defaultPriorityLevel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code Priority} with the value {@code priorityLevel}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param priorityLevel priority level of the given activity, a String in the integer range of 1 to 5 inclusive."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Priority(String priorityLevel) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        checkArgument(isValidPriorityValue(priorityLevel), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.priorityLevel \u003d Integer.parseInt(priorityLevel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static int getDefaultPriorityLevel() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return defaultPriorityLevel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if a given priority level string is in the valid integer range of 1 to 5."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidPriorityValue(String test) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return test.matches(VALID_INTEGER_REGEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return Integer.toString(priorityLevel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 priorityLevel \u003d\u003d ((Priority) other).priorityLevel); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 1,
      "kester-ng": 61,
      "don-tay": 2
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Schedule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Represents schedule class in Nasa book."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Allows user to regenerate activity automatically."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class Schedule {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private int type;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date defaultDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Construct a schedule from string."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Schedule(String input) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String[] in \u003d input.split(\",\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        type \u003d Integer.parseInt(in[0]);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        date \u003d new Date(in[1]);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        defaultDate \u003d new Date(in[2]);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise schedule with the default type of 0."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Schedule(Date date) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.defaultDate \u003d date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        type \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise schedule with specific type."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param date"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param type"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Schedule(Date date, int type) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.defaultDate \u003d date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        init(type);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Method to extend the date of a module activity."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean update() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        boolean hasUpdate \u003d false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        while (Date.now().isAfter(date) \u0026\u0026 type !\u003d 0) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            init(type);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            hasUpdate \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return hasUpdate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Set scheduling."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setType(int type) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        date \u003d defaultDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        update();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Stop scheduling."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void cancel() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.type \u003d 0;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        date \u003d defaultDate;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise schedules."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void init(int type) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case 1 :"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            runOnceAWeek();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case 2 :"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            runTwiceAWeek();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        case 3 :"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            runMonthly();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Get next running date."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Set new date by refreshing it weekly."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private void runOnceAWeek() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        date \u003d date.addDaysToCurrDate(7);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Set new date by refreshing it twice weekly."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private void runTwiceAWeek() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        date \u003d date.addDaysToCurrDate(14);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Set new date by refreshing it monthly."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private void runMonthly() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        date \u003d date.addMonthsToCurrDate(1);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return String.format(\"%d,%s,%s\", type, date, defaultDate);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 123,
      "kester-ng": 3
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/Status.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Represent the current work status for a particular task"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public enum Status {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    ONGOING,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    LATE,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    DONE,"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    DELETED"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 10
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/TaskName.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents a Activity\u0027s TaskName in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTask(String)}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class TaskName {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Task can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The first character of the task must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final String code;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs an {@code TaskName}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param code A valid code name."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public TaskName(String code) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(code);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.code \u003d code;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if a given string is a valid task name."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidTask(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return code;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof TaskName // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 code.equals(((TaskName) other).code)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return code.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 54
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/UniqueActivityList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.exceptions.ActivityNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.exceptions.DuplicateActivityException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * A list of activities that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * A activity is considered unique by comparing using {@code Activity#isSameActivity(Activity)}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * As such, adding and updating of activity uses Activity#isSameActivity(Activity)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * for equality so as to ensure that the activity being added or updated is"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * unique in terms of identity in the UniqueActivityList. However, the removal of a activity uses"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Activity#equals(Object) so as to ensure that the activity with exactly the same fields will be removed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * @see Activity#isSameActivity(Activity)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class UniqueActivityList implements Iterable\u003cActivity\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final ObservableList\u003cActivity\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final ObservableList\u003cActivity\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if the list contains an equivalent activity as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean contains(Activity toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Adds a activity to the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The activity must not already exist in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void add(Activity toAdd) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Replaces the activity {@code target} in the list with {@code editedActivity}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(target, editedActivity);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!target.isSameActivity(editedActivity) \u0026\u0026 contains(editedActivity)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        internalList.set(index, editedActivity);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cActivity\u003e getActivityList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this.internalList;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Activity getActivityByIndex(Index index) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Activity getActivityByName(Name name) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.stream()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .filter(x -\u003e x.getName().equals(name))"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivityByIndex(Index index, Activity activity) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.set(index.getZeroBased(), activity);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Edits activity based on index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param index index of activity in list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param args parameters for editing"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void editActivityByIndex(Index index, Object... args) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(args);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Activity activity \u003d internalList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (Object object : args) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (object instanceof Note) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                Note note \u003d (Note) object;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                activity.setNote(note);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (object instanceof Name) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                Name name \u003d (Name) object;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                activity.setName(name);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (activity instanceof Deadline"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    \u0026\u0026 object instanceof Date) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                Date extendDateLine \u003d (Date) object;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                activity.setDate(extendDateLine);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.set(index.getZeroBased(), activity);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Removes the equivalent activity from the list."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * The activity must exist in the list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void remove(Activity toRemove) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Removes the equivalent activity from the list by index."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The activity must exist in the list."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeByIndex(Index index) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Empty all the activity inside the list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeAll() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.clear();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setActivities(UniqueActivityList replacement) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Replaces the contents of this list with {@code activities}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setActivities(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireAllNonNull(activities);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!activitiesAreUnique(activities)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        internalList.setAll(activities);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cActivity\u003e getDeepCopyList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ObservableList\u003cActivity\u003e deepCopyList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (Activity activity : internalUnmodifiableList) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (activity instanceof Deadline) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                Activity activityTemp \u003d new Deadline(activity.getName(), activity.getDate(), activity.getNote(),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        activity.getStatus(), activity.getPriority(), ((Deadline) activity).getDueDate());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                activityTemp.setSchedule(activity.getSchedule());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                deepCopyList.add(activityTemp);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (activity instanceof Event) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                Activity activityTemp \u003d new Event(activity.getName(), activity.getDate(), activity.getNote(),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        activity.getStatus(), activity.getPriority(), ("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                                (Event) activity).getDateFrom(), ((Event) activity).getDateTo());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                activityTemp.setSchedule(activity.getSchedule());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                deepCopyList.add(activityTemp);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (activity instanceof Lesson) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                Activity activityTemp \u003d new Lesson(activity.getName(), activity.getDate(), activity.getNote(),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        activity.getStatus(), activity.getPriority(), ("
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                                (Lesson) activity).getDateFrom(), ((Lesson) activity).getDateTo());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                activityTemp.setSchedule(activity.getSchedule());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                deepCopyList.add(activityTemp);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return deepCopyList;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ObservableList\u003cActivity\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Iterator\u003cActivity\u003e iterator() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof UniqueActivityList // instanceof handles nulls"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueActivityList) other).internalList));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if {@code activities} contains only unique activities."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private boolean activitiesAreUnique(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (int i \u003d 0; i \u003c activities.size() - 1; i++) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (int j \u003d i + 1; j \u003c activities.size(); j++) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (activities.get(i).equals(activities.get(j))) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 97,
      "kester-ng": 139
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/exceptions/ActivityNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Signals that the operation is unable to find the specified activity."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ActivityNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 6
    }
  },
  {
    "path": "src/main/java/nasa/model/activity/exceptions/DuplicateActivityException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Signals that the operation will result in duplicate Activity (Activity are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * they have the same notes and date."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DuplicateActivityException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public DuplicateActivityException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(\"Operation would result in duplicate activity\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 10
    }
  },
  {
    "path": "src/main/java/nasa/model/history/History.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Abstract History class to store users actions."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public abstract class History\u003cT\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Stack\u003cT\u003e stack;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private T item;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    History() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        item \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        stack \u003d new Stack\u003cT\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    History(Stack\u003cT\u003e history) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        item \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        stack \u003d history;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Push an item into stack from item."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param item"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void push(T item) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (this.item !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            stack.push(this.item);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Push an item directly into the stack."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param item"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void pushDirectly(T item) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        stack.push(item);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Pop an item from the stack. To get previous item."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean pop() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            item \u003d stack.pop();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Pop an item from the stack directly."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public T popDirectly() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return stack.pop();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean hasItem() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return item !\u003d null;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public T getPop() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return item;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void resetItem() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.item \u003d null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setStack(List\u003cT\u003e stack) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.stack.addAll(stack);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Stack\u003cT\u003e getStack() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return stack;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return stack.isEmpty();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 85,
      "kester-ng": 2
    }
  },
  {
    "path": "src/main/java/nasa/model/history/ModuleListHistory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.history;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Stack;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Class that manage all histories."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * @param \u003cT\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class ModuleListHistory\u003cT\u003e extends History\u003cT\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleListHistory() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleListHistory(Stack\u003cT\u003e moduleListStack) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(moduleListStack);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Return unmodifiable list containing histories."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        List\u003cT\u003e list \u003d new ArrayList\u003c\u003e(super.getStack());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ObservableList\u003cT\u003e newList \u003d FXCollections.observableArrayList(list);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return newList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 32,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/model/module/Module.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.UniqueActivityList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Abstract class to specify fields with getter and setters for modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class Module {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleCode moduleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private UniqueActivityList activityList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private FilteredList\u003cActivity\u003e filteredActivity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ModuleName moduleName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Constructs a {@code module}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode module code"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Module(ModuleCode moduleCode, ModuleName moduleName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.activityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.filteredActivity \u003d new FilteredList\u003c\u003e(activityList.getActivityList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Retrieve the moduleCode of the module."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return String moduleCode"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ModuleCode getModuleCode() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Sets the module moduleCode to a new moduleCode."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Used for editing module code."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode of the module"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setModuleCode(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean contains(Activity activity) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return activityList.contains(activity);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void add(Activity toAdd) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        activityList.add(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        activityList.setActivity(target, editedActivity);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleName getModuleName() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void remove(Activity toRemove) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        activityList.remove(toRemove);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeActivityByIndex(Index index) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        activityList.removeByIndex(index);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public UniqueActivityList getActivities() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return activityList;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivities(UniqueActivityList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        activityList.setActivities(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces the contents of this list with {@code activities}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivities(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        activityList.setActivities(activities);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Activity getActivityByIndex(Index index) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return activityList.getActivityByIndex(index);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Activity getActivityByName(Name name) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return activityList.getActivityByName(name);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return filteredActivity;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cActivity\u003e getDeepCopyList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return activityList.getDeepCopyList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Module getDeepCopyModule() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module newModule \u003d new Module(getModuleCode(), getModuleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        newModule.setActivities(activityList.getDeepCopyList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return newModule;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivityByIndex(Index index, Activity activity) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        activityList.setActivityByIndex(index, activity);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void editActivityByIndex(Index index, Object... args) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        activityList.editActivityByIndex(index, args);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Iterator\u003cActivity\u003e iterator() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return activityList.iterator();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        filteredActivity.setPredicate(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Sorts module\u0027s activity list by the specified {@code sortMethod}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param sortMethod Method of sorting the activities in the module activity list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void sortActivityList(SortMethod sortMethod) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cActivity\u003e comparator \u003d sortMethod.getComparator();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.activityList.getActivityList().sort(comparator);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if both modules of the same module code."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param otherModule the module to be compared to"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return true if both modules are the same instance, or both have the same module code, otherwise, false"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public boolean isSameModule(Module otherModule) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        if (otherModule \u003d\u003d this) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return otherModule !\u003d null"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                \u0026\u0026 otherModule.getModuleCode().equals(getModuleCode());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if both are the same module."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * This defines a stronger notion of equality between two activities."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!(other instanceof Module)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module otherModule \u003d (Module) other;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return otherModule.getModuleCode().equals(getModuleCode());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return String.format(\"%s %s\", moduleCode, moduleName);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "EdmondOng": 89,
      "kester-ng": 55,
      "don-tay": 25
    }
  },
  {
    "path": "src/main/java/nasa/model/module/ModuleCode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents module code of a Module."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidModuleCode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ModuleCode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \"Module codes should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Module code should not contain any whitespace, and all values must be alphanumeric."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String ALPHA_NUMERIC_VALIDATION_REGEX \u003d \"[a-zA-Z0-9]*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String NON_EMPTY_STRING_VALIDATION_REGEX \u003d \"^(?\u003d\\\\s*\\\\S).*$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public final String moduleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructs a {@code ModuleCode}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode A valid module code."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        checkArgument(isValidModuleCode(moduleCode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.moduleCode \u003d moduleCode.toUpperCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Returns true if a given string is a valid module code."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidModuleCode(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return test.matches(ALPHA_NUMERIC_VALIDATION_REGEX) \u0026\u0026 test.matches(NON_EMPTY_STRING_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleCode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof ModuleCode // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 moduleCode.toLowerCase().equals(((ModuleCode) other)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .moduleCode.toLowerCase())); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleCode.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "kester-ng": 56
    }
  },
  {
    "path": "src/main/java/nasa/model/module/ModuleName.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Represents the official name of the module."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ModuleName {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \"Module name should only contain alphanumeric characters and spaces, and it should not blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final String moduleName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public ModuleName(String moduleName) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        requireNonNull(moduleName);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        checkArgument(isValidModuleName(moduleName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.moduleName \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                Arrays.stream(moduleName.split(\" \"))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        .map(word -\u003e Character.toTitleCase("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                                word.charAt(0)) + word.substring(1)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        .toLowerCase()).collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static boolean isValidModuleName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String getModuleName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleName;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                || (other instanceof ModuleName // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 moduleName.equals(((ModuleName) other).moduleName)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return moduleName.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 10,
      "EdmondOng": 1,
      "kester-ng": 44
    }
  },
  {
    "path": "src/main/java/nasa/model/module/NameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Predicate to filter based on activity name."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cModule\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean test(Module module) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    StringUtil.containsWordIgnoreCase(module.getModuleName().getModuleName(), keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 3,
      "-": 24,
      "kester-ng": 4
    }
  },
  {
    "path": "src/main/java/nasa/model/module/SortMethod.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Represents a SortMethod in NASA."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidSortMethod(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class SortMethod {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Sort method must be either name, date, or priority.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final String sortMethodString;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final Comparator\u003cActivity\u003e comparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Constructs a {@code SortMethod}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @param method A valid method of sorting."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public SortMethod(String method) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        requireNonNull(method);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        checkArgument(isValidSortMethod(method), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.sortMethodString \u003d method;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.comparator \u003d generateComparator(method);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns true if a given string is a valid method of sorting."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static boolean isValidSortMethod(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return (test.equals(\"name\") || test.equals(\"date\") || test.equals(\"priority\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns the string value of the sort method."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return The string representation of the method of sorting."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public String getSortMethodString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return sortMethodString;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns the Comparator of the sort method."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return The Comparator used to sort the activity list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Comparator\u003cActivity\u003e getComparator() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return comparator;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns the comparator used to sort the activity list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * @return The comparator of this instance of {@code SortMethod}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public Comparator\u003cActivity\u003e generateComparator(String method) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Default comparator, sorts in ascending order."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Lexicographically biggest, latest added, highest priority at the top of the module activity list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cActivity\u003e nameSorter \u003d Comparator.comparing(l -\u003e l.getName().toString(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                String.CASE_INSENSITIVE_ORDER);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cActivity\u003e dateSorter \u003d Comparator.comparing(l -\u003e l.getDate().getDate(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Comparator.reverseOrder());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Comparator\u003cActivity\u003e prioritySorter \u003d Comparator.comparing(l -\u003e l.getPriority().toString(),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Comparator.reverseOrder());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        switch (method) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case \"name\":"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return nameSorter;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case \"date\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return dateSorter;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        case \"priority\":"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return prioritySorter;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new IllegalStateException(\"Unexpected value: \" + getSortMethodString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return getSortMethodString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "don-tay": 87
    }
  },
  {
    "path": "src/main/java/nasa/model/module/UniqueModuleList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.UniqueActivityList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.exceptions.ModuleNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * A list of modules that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * A Module is considered unique by comparing using {@code Module#equals(Module)}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * As such, adding and updating of Module uses Module#equals(Module)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * for equality so as to ensure that the Module being added or updated is"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * unique in terms of identity in the UniqueModuleList. However, the removal of a Module uses"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Module#equals(Object) so as to ensure that the Module with exactly the same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class UniqueModuleList implements Iterable\u003cModule\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final ObservableList\u003cModule\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns true if the list contains an equivalent Module as the given argument."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean contains(Module toCheck) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns true if the list contains an equivalent ModuleCode as the given argument."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean contains(ModuleCode toCheck) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.stream().anyMatch(x -\u003e x.getModuleCode().equals(toCheck));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Adds a Module to the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The Module must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void add(Module toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Adds a ModuleCode to the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The ModuleCode must not already exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void add(ModuleCode toAddCode, ModuleName toAddName) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(toAddCode, toAddName);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (contains(toAddCode)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.add(new Module(toAddCode, toAddName));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces the Module {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The Module identity of {@code editedModule} must not be the same as another existing Module in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!target.equals(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces the ModuleCode {@code target} in the list with {@code editedModule}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The ModuleCode identity of {@code editedModule} must not be the same as another existing Module in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModule(ModuleCode target, Module editedModule) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        int index \u003d internalList.indexOf(getModule(target));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!target.equals(editedModule) \u0026\u0026 contains(editedModule)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.set(index, editedModule);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Removes the equivalent Module from the list."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The Module must exist in the list."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void remove(Module toRemove) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Removes the equivalent ModuleCode from the list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * The ModuleCode must exist in the list."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void remove(ModuleCode toRemove) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!internalList.remove(getModule(toRemove))) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new ModuleNotFoundException();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Removes the Module based on index."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void removeByIndex(Index index) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public UniqueModuleList setModules(UniqueModuleList replacement) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Replaces the contents of this list with {@code modules}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * {@code modules} must not contain duplicate modules."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setModules(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(modules);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!modulesAreUnique(modules)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new DuplicateModuleException();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        internalList.setAll(modules);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivityByIndex(Module module, Index index, Activity activity) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module moduleSelected \u003d getModule(module);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleSelected.setActivityByIndex(index, activity);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivityByIndex(ModuleCode moduleCode, Index index, Activity activity) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module moduleSelected \u003d getModule(moduleCode);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleSelected.setActivityByIndex(index, activity);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Edits activity based on index and module."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param module Module of the activity"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param index index of the activity in list"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param args parameters to be edited"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void editActivityByIndex(Module module, Index index, Object... args) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module moduleSelected \u003d getModule(module);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleSelected.editActivityByIndex(index, args);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Edits activity based on index and moduleCode."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode ModuleCode of activity"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param index index of the activity in list"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param args parameters to be edited"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void editActivityByIndex(ModuleCode moduleCode, Index index, Object... args) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module moduleSelected \u003d getModule(moduleCode);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleSelected.editActivityByIndex(index, args);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public UniqueActivityList getActivities(Module module) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(module);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return getModule(module).getActivities();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public UniqueActivityList getActivities(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(moduleCode);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return getModule(moduleCode).getActivities();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * get a particular module from the list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param module"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Module getModule(Module module) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(module);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.parallelStream()"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .filter(x -\u003e x.equals(module))"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * get a particular module from the list"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleCode"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Module getModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireAllNonNull(moduleCode);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.parallelStream()"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .filter(x -\u003e x.getModuleCode().equals(moduleCode))"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                .get();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e getDeepCopyList() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ObservableList\u003cModule\u003e deepCopyList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (Module mods : internalUnmodifiableList) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            Module moduleTemp \u003d new Module(mods.getModuleCode(), mods.getModuleName());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            moduleTemp.setActivities(mods.getActivities().getDeepCopyList());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            deepCopyList.add(moduleTemp);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return deepCopyList;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ObservableList\u003cModule\u003e asModifiableObservableList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Iterator\u003cModule\u003e iterator() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                || (other instanceof UniqueModuleList // instanceof handles nulls"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueModuleList) other).internalList));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Returns true if {@code modules} contains only unique modules."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private boolean modulesAreUnique(List\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (int i \u003d 0; i \u003c modules.size() - 1; i++) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            for (int j \u003d i + 1; j \u003c modules.size(); j++) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                if (modules.get(i).equals(modules.get(j))) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "EdmondOng": 261,
      "kester-ng": 20
    }
  },
  {
    "path": "src/main/java/nasa/model/module/exceptions/DuplicateModuleException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Signals that the operation will result in duplicate Module (Module are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * they have the same module code."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class DuplicateModuleException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DuplicateModuleException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        super(\"Operation would result in duplicate module\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 10
    }
  },
  {
    "path": "src/main/java/nasa/model/module/exceptions/ModuleNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Signals that the operation is unable to find the specified module."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class ModuleNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 6
    }
  },
  {
    "path": "src/main/java/nasa/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Contains utility methods for populating {@code NasaBook} with sample data."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static Module[] getSampleModules() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        //TODO add activities"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new Module[] {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            new Module(new ModuleCode(\"CS2101\"), new ModuleName(\"Effective Communication for Computing \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    + \"Professionals\")),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            new Module(new ModuleCode(\"CS2105\"), new ModuleName(\"Introduction to Computer Network\"))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        };"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static UniqueModuleList[] getSampleModuleList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UniqueModuleList list1 \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UniqueModuleList list2 \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        list1.add(new Module(new ModuleCode(\"CS2103T\"), new ModuleName(\"Software engineering\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        list2.add(new Module(new ModuleCode(\"CS2106\"), new ModuleName(\"Operating System\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new UniqueModuleList[] {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            list1,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            list2"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static ReadOnlyNasaBook getSampleNasaBook() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook sampleNb \u003d new NasaBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module sampleModule : getSampleModules()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            sampleNb.addModule(sampleModule);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return sampleNb;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static ReadOnlyHistory getSampleHistoryBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        HistoryBook sampleNb \u003d new HistoryBook();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (UniqueModuleList sampleModuleList : getSampleModuleList()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            sampleNb.add(sampleModuleList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return sampleNb;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 30,
      "EdmondOng": 22,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonAdaptedActivity.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Lesson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Schedule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Status;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Jackson-friendly version of {@link Activity}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "class JsonAdaptedActivity {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Activity\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String note;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String status;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String priority;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final String dueDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final String schedule;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructs a {@code JsonAdaptedActivity} with the given activity details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public JsonAdaptedActivity(@JsonProperty(\"type\") String type, @JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                               @JsonProperty(\"date\") String date, @JsonProperty(\"note\") String note,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                               @JsonProperty(\"status\") String status,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                               @JsonProperty(\"priority\") String priority,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                               @JsonProperty(\"dueDate\") String dueDate,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                               @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                               @JsonProperty(\"endDate\") String endDate,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                               @JsonProperty(\"schedule\") String schedule) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.note \u003d note;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.status \u003d status;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.dueDate \u003d dueDate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.schedule \u003d schedule;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Converts a given {@code Activity} into this class for Jackson use."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public JsonAdaptedActivity(Activity source) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        note \u003d source.getNote().toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        status \u003d source.getStatus().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        priority \u003d source.getPriority().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        schedule \u003d source.getSchedule().toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (source instanceof Deadline) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            type \u003d \"deadline\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            Deadline temp \u003d (Deadline) source;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            dueDate \u003d temp.getDueDate().toString();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            startDate \u003d \"\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            endDate \u003d \"\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } else if (source instanceof Event) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            type \u003d \"event\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            Event temp \u003d (Event) source;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            dueDate \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            startDate \u003d temp.getDateFrom().toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            endDate \u003d temp.getDateTo().toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            type \u003d \"lesson\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            Lesson temp \u003d (Lesson) source;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            dueDate \u003d \"\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            startDate \u003d temp.getDateFrom().toString();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            endDate \u003d temp.getDateTo().toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Converts this Jackson-friendly adapted activity object into the model\u0027s {@code Activity} object."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted activity."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Activity toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (note \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Note.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!Note.isValidNote(note)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final Note modelNote \u003d new Note(note);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!Priority.isValidPriorityValue(priority)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(\"\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (status \u003d\u003d null) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    Status.class.getSimpleName()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        //TODO check validity"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!Status.(priority)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(\"\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final Status modelStatus \u003d Status.valueOf(status);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (schedule \u003d\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    Schedule.class.getSimpleName()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Schedule modelSchedule \u003d new Schedule(schedule);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Activity activity \u003d null;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        switch (type) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (dueDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (!Date.isValidDate(dueDate)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            final Date modelDueDate \u003d new Date(dueDate);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            activity \u003d new Deadline(modelName, modelDate, modelNote, modelStatus, modelPriority, modelDueDate);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            activity.setSchedule(modelSchedule);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (!Date.isValidDate(startDate)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            final Date eventStartDate \u003d new Date(startDate);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            if (!Date.isValidDate(endDate)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            final Date modelEndDate \u003d new Date(endDate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            activity \u003d new Event(modelName, modelDate, modelNote, modelStatus, modelPriority, eventStartDate,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    modelEndDate);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            activity.setSchedule(modelSchedule);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        case \"lesson\":"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (!Date.isValidDate(startDate)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            final Date modelStartDate \u003d new Date(startDate);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (!Date.isValidDate(endDate)) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            final Date lessonEndDate \u003d new Date(endDate);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            activity \u003d new Lesson(modelName, modelDate, modelNote, modelStatus, modelPriority, modelStartDate,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    lessonEndDate);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            activity.setSchedule(modelSchedule);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(\"\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return activity;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 155,
      "EdmondOng": 57,
      "kester-ng": 10,
      "don-tay": 1
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonAdaptedHistory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.history.ModuleListHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * Jackson friendly use of History."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "@JsonRootName(value \u003d \"historybook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class JsonAdaptedHistory {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private List\u003cList\u003cJsonAdaptedModule\u003e\u003e moduleList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Construct History with details of module list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public JsonAdaptedHistory(@JsonProperty(\"moduleList\") List\u003cList\u003cJsonAdaptedModule\u003e\u003e moduleList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (moduleList !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            this.moduleList \u003d moduleList;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Converts a given module list for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public JsonAdaptedHistory(ReadOnlyHistory\u003cUniqueModuleList\u003e source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.addAll(source.getModuleListHistory().stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .map(x -\u003e x.asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                    .map(JsonAdaptedModule::new).collect(Collectors.toList()))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Converts Jackson to adapted history object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public HistoryBook\u003cUniqueModuleList\u003e toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final List\u003cUniqueModuleList\u003e historyList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (List\u003cJsonAdaptedModule\u003e list : moduleList) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            final UniqueModuleList uniqueList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            for (JsonAdaptedModule module : list) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                uniqueList.add(module.toModelType());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            historyList.add(uniqueList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final ModuleListHistory\u003cUniqueModuleList\u003e temp \u003d new ModuleListHistory\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        temp.setStack(historyList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        HistoryBook\u003cUniqueModuleList\u003e historyBook \u003d new HistoryBook\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        historyBook.setModuleListHistory(temp);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return historyBook;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 64
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonAdaptedModule.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.UniqueActivityList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Jackson-friendly version of {@link Module}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "class JsonAdaptedModule {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Module\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String moduleCode;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String moduleName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final List\u003cJsonAdaptedActivity\u003e activityList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructs a {@code JsonAdaptedModule} with the given module details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public JsonAdaptedModule(@JsonProperty(\"moduleCode\") String moduleCode,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                             @JsonProperty(\"moduleName\") String moduleName,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                             @JsonProperty(\"activities\") List\u003cJsonAdaptedActivity\u003e activities) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.moduleCode \u003d moduleCode;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.moduleName \u003d moduleName;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (activities !\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            this.activityList.addAll(activities);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Converts a given {@code Module} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public JsonAdaptedModule(Module source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleCode \u003d source.getModuleCode().moduleCode;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleName \u003d source.getModuleName().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        activityList.addAll(source.getActivities().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .map(JsonAdaptedActivity::new)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Module} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Module toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final List\u003cActivity\u003e moduleActivities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (JsonAdaptedActivity activity : activityList) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            moduleActivities.add(activity.toModelType());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (moduleCode \u003d\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    ModuleCode.class.getSimpleName()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!ModuleCode.isValidModuleCode(moduleCode)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final ModuleCode modelModuleCode \u003d new ModuleCode(moduleCode);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (moduleName \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    ModuleName.class.getSimpleName()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!ModuleName.isValidModuleName(moduleName)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalValueException(ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final ModuleName modelModuleName \u003d new ModuleName(moduleName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final UniqueActivityList uniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        uniqueActivityList.setActivities(moduleActivities);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        final Module module \u003d new Module(modelModuleCode, modelModuleName);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        module.setActivities(uniqueActivityList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 89,
      "EdmondOng": 3
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonNasaBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A class to access NasaBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class JsonNasaBookStorage implements NasaBookStorage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonNasaBookStorage.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Path filePathOne;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Path filePathTwo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public JsonNasaBookStorage(Path filePathOne, Path filePathTwo) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.filePathOne \u003d filePathOne;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.filePathTwo \u003d filePathTwo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Path getNasaBookFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return filePathOne;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getHistoryBookFilePath() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return filePathTwo;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Optional\u003cReadOnlyNasaBook\u003e readNasaBook() throws DataConversionException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return readNasaBook(filePathOne);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Similar to {@link #readNasaBook()}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Optional\u003cReadOnlyNasaBook\u003e readNasaBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Optional\u003cJsonSerializableNasaBook\u003e jsonNasaBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                filePath, JsonSerializableNasaBook.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!jsonNasaBook.isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return Optional.of(jsonNasaBook.get().toModelType());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistoryBook() throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return readHistoryBook(filePathTwo);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Similar to {@link #readHistoryBook()}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws DataConversionException"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistoryBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Optional\u003cJsonAdaptedHistory\u003e jsonHistoryBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                filePath, JsonAdaptedHistory.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        if (!jsonHistoryBook.isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return Optional.of(jsonHistoryBook.get().toModelType());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook(ReadOnlyNasaBook nasaBook) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        saveNasaBook(nasaBook, filePathOne);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Similar to {@link #saveNasaBook(ReadOnlyNasaBook)}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook(ReadOnlyNasaBook nasaBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(nasaBook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableNasaBook(nasaBook), filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        saveUltimate(nasaBook, historyBook, filePathOne, filePathTwo);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Similar to {@link #saveUltimate(ReadOnlyNasaBook, ReadOnlyHistory, Path, Path)}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param nasaBook"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param historyBook"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param filePathOne"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @param filePathTwo"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook, Path filePathOne,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                             Path filePathTwo) throws IOException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(nasaBook);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(filePathOne);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        requireNonNull(filePathTwo);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        FileUtil.createIfMissing(filePathOne);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        FileUtil.createIfMissing(filePathTwo);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableNasaBook(nasaBook), filePathOne);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonAdaptedHistory(historyBook), filePathTwo);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 73,
      "EdmondOng": 69
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonSerializableNasaBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * An Immutable NASA that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "@JsonRootName(value \u003d \"nasabook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "class JsonSerializableNasaBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"Module list contains duplicate module(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final List\u003cJsonAdaptedModule\u003e modules \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Constructs a {@code JsonSerializableNasaBook} with the given modules."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public JsonSerializableNasaBook(@JsonProperty(\"modules\") List\u003cJsonAdaptedModule\u003e modules) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.modules.addAll(modules);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Converts a given {@code ReadOnlyNasaBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableNASABook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public JsonSerializableNasaBook(ReadOnlyNasaBook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        modules.addAll(source.getModuleList().stream().map(JsonAdaptedModule::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Converts this nasa book into the model\u0027s {@code NasaBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public NasaBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook nasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (JsonAdaptedModule jsonAdaptedModule : modules) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            Module module \u003d jsonAdaptedModule.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (nasaBook.hasModule(module)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            nasaBook.addModule(module);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return nasaBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 62
    }
  },
  {
    "path": "src/main/java/nasa/storage/JsonUserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "-": 42
    }
  },
  {
    "path": "src/main/java/nasa/storage/NasaBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Represents a storage for {@link nasa.model.NasaBook}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public interface NasaBookStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Path getNasaBookFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getHistoryBookFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns NASABook data as a {@link ReadOnlyNasaBook}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Optional\u003cReadOnlyNasaBook\u003e readNasaBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see #getNasaBookFilePath()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Optional\u003cReadOnlyNasaBook\u003e readNasaBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Optional\u003cReadOnlyHistory\u003e readHistoryBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Optional\u003cReadOnlyHistory\u003e readHistoryBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Saves the given {@link ReadOnlyNasaBook} to the storage."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param nasaBook cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void saveNasaBook(ReadOnlyNasaBook nasaBook) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see #saveNasaBook(ReadOnlyNasaBook)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void saveNasaBook(ReadOnlyNasaBook nasaBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook) throws IOException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook, Path filePathOne,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                      Path filePathTwo) throws IOException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 44,
      "EdmondOng": 11
    }
  },
  {
    "path": "src/main/java/nasa/storage/RuntimeTypeAdapterFactory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.Gson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.JsonElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.JsonObject;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.JsonParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.JsonPrimitive;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.TypeAdapter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.TypeAdapterFactory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.internal.Streams;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.reflect.TypeToken;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.stream.JsonReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import com.google.gson.stream.JsonWriter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Adapts values whose runtime type may differ from their declaration type. This"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * is necessary when a field\u0027s type is not the same type that GSON should create"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * when deserializing that field. For example, consider these types:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   abstract class Shape {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     int x;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     int y;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   class Circle extends Shape {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     int radius;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   class Rectangle extends Shape {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     int width;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     int height;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   class Diamond extends Shape {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     int width;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     int height;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   class Drawing {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     Shape bottomShape;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     Shape topShape;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \u003cp\u003eWithout additional type information, the serialized JSON is ambiguous. Is"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * the bottom shape in this drawing a rectangle or a diamond? \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     \"bottomShape\": {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"width\": 10,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"height\": 5,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"x\": 0,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"y\": 0"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     },"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     \"topShape\": {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"radius\": 2,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"x\": 4,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"y\": 1"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   }}\u003c/pre\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * This class addresses this problem by adding type information to the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * serialized JSON and honoring that type information when the JSON is"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * deserialized: \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     \"bottomShape\": {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"type\": \"Diamond\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"width\": 10,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"height\": 5,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"x\": 0,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"y\": 0"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     },"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     \"topShape\": {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"type\": \"Circle\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"radius\": 2,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"x\": 4,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \"y\": 1"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *     }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   }}\u003c/pre\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Both the type field name ({@code \"type\"}) and the type labels ({@code"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \"Rectangle\"}) are configurable."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \u003ch3\u003eRegistering Types\u003c/h3\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Create a {@code RuntimeTypeAdapterFactory} by passing the base type and type field"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * name to the {@link #of} factory method. If you don\u0027t supply an explicit type"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * field name, {@code \"type\"} will be used. \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   RuntimeTypeAdapterFactory\u003cShape\u003e shapeAdapterFactory"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       \u003d RuntimeTypeAdapterFactory.of(Shape.class, \"type\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Next register all of your subtypes. Every subtype must be explicitly"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * registered. This protects your application from injection attacks. If you"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * don\u0027t supply an explicit type label, the type\u0027s simple name will be used."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Rectangle.class, \"Rectangle\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Circle.class, \"Circle\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   shapeAdapterFactory.registerSubtype(Diamond.class, \"Diamond\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Finally, register the type adapter factory in your application\u0027s GSON builder:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   Gson gson \u003d new GsonBuilder()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       .registerTypeAdapterFactory(shapeAdapterFactory)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       .create();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Like {@code GsonBuilder}, this API supports chaining: \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   RuntimeTypeAdapterFactory\u003cShape\u003e shapeAdapterFactory \u003d RuntimeTypeAdapterFactory.of(Shape.class)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       .registerSubtype(Rectangle.class)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       .registerSubtype(Circle.class)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *       .registerSubtype(Diamond.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \u003ch3\u003eSerialization and deserialization\u003c/h3\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * In order to serialize and deserialize a polymorphic object,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * you must specify the base type explicitly."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   Diamond diamond \u003d new Diamond();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   String json \u003d gson.toJson(diamond, Shape.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * And then:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * \u003cpre\u003e   {@code"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " *   Shape shape \u003d gson.fromJson(json, Shape.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * }\u003c/pre\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public final class RuntimeTypeAdapterFactory\u003cT\u003e implements TypeAdapterFactory {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Class\u003c?\u003e baseType;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final String typeFieldName;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Map\u003cString, Class\u003c?\u003e\u003e labelToSubtype \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Map\u003cClass\u003c?\u003e, String\u003e subtypeToLabel \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final boolean maintainType;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private RuntimeTypeAdapterFactory(Class\u003c?\u003e baseType, String typeFieldName, boolean maintainType) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (typeFieldName \u003d\u003d null || baseType \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.baseType \u003d baseType;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.typeFieldName \u003d typeFieldName;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.maintainType \u003d maintainType;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates a new runtime type adapter using for {@code baseType} using {@code"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * typeFieldName} as the type field name. Type field names are case sensitive."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * {@code maintainType} flag decide if the type will be stored in pojo or not."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType, String typeFieldName, boolean maintainType) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, typeFieldName, maintainType);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates a new runtime type adapter using for {@code baseType} using {@code"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * typeFieldName} as the type field name. Type field names are case sensitive."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType, String typeFieldName) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, typeFieldName, false);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates a new runtime type adapter for {@code baseType} using {@code \"type\"} as"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * the type field name."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static \u003cT\u003e RuntimeTypeAdapterFactory\u003cT\u003e of(Class\u003cT\u003e baseType) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new RuntimeTypeAdapterFactory\u003c\u003e(baseType, \"type\", false);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Registers {@code type} identified by {@code label}. Labels are case"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * sensitive."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IllegalArgumentException if either {@code type} or {@code label}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *                                  have already been registered on this type adapter."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public RuntimeTypeAdapterFactory\u003cT\u003e registerSubtype(Class\u003c? extends T\u003e type, String label) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (type \u003d\u003d null || label \u003d\u003d null) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (subtypeToLabel.containsKey(type) || labelToSubtype.containsKey(label)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new IllegalArgumentException(\"types and labels must be unique\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        labelToSubtype.put(label, type);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        subtypeToLabel.put(type, label);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Registers {@code type} identified by its {@link Class#getSimpleName simple"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * name}. Labels are case sensitive."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @throws IllegalArgumentException if either {@code type} or its simple name"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *                                  have already been registered on this type adapter."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public RuntimeTypeAdapterFactory\u003cT\u003e registerSubtype(Class\u003c? extends T\u003e type) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return registerSubtype(type, type.getSimpleName());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Creates TypeAdaptor."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param gson gson"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param type type"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param \u003cR\u003e  type"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @return TypeAdapter"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public \u003cR\u003e TypeAdapter\u003cR\u003e create(Gson gson, TypeToken\u003cR\u003e type) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (type.getRawType() !\u003d baseType) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Map\u003cString, TypeAdapter\u003c?\u003e\u003e labelToDelegate \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        final Map\u003cClass\u003c?\u003e, TypeAdapter\u003c?\u003e\u003e subtypeToDelegate \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Map.Entry\u003cString, Class\u003c?\u003e\u003e entry : labelToSubtype.entrySet()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            TypeAdapter\u003c?\u003e delegate \u003d gson.getDelegateAdapter(this, TypeToken.get(entry.getValue()));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            labelToDelegate.put(entry.getKey(), delegate);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            subtypeToDelegate.put(entry.getValue(), delegate);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new TypeAdapter\u003cR\u003e() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            public R read(JsonReader in) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonElement jsonElement \u003d Streams.parse(in);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonElement labelJsonElement;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (maintainType) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    labelJsonElement \u003d jsonElement.getAsJsonObject().get(typeFieldName);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    labelJsonElement \u003d jsonElement.getAsJsonObject().remove(typeFieldName);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (labelJsonElement \u003d\u003d null) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    throw new JsonParseException(\"cannot deserialize \" + baseType"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            + \" because it does not define a field named \" + typeFieldName);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                String label \u003d labelJsonElement.getAsString();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        TypeAdapter\u003cR\u003e delegate \u003d (TypeAdapter\u003cR\u003e) labelToDelegate.get(label);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (delegate \u003d\u003d null) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    throw new JsonParseException(\"cannot deserialize \" + baseType + \" subtype named \""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            + label + \"; did you forget to register a subtype?\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                return delegate.fromJsonTree(jsonElement);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            public void write(JsonWriter out, R value) throws IOException {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                Class\u003c?\u003e srcType \u003d value.getClass();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                final String label \u003d subtypeToLabel.get(srcType);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                @SuppressWarnings(\"unchecked\") // registration requires that subtype extends T"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        TypeAdapter\u003cR\u003e delegate \u003d (TypeAdapter\u003cR\u003e) subtypeToDelegate.get(srcType);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (delegate \u003d\u003d null) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    throw new JsonParseException(\"cannot serialize \" + srcType.getName()"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            + \"; did you forget to register a subtype?\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonObject jsonObject \u003d delegate.toJsonTree(value).getAsJsonObject();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (maintainType) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    Streams.write(jsonObject, out);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonObject clone \u003d new JsonObject();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (jsonObject.has(typeFieldName)) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    throw new JsonParseException(\"cannot serialize \" + srcType.getName()"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            + \" because it already defines a field named \" + typeFieldName);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                clone.add(typeFieldName, new JsonPrimitive(label));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                for (Map.Entry\u003cString, JsonElement\u003e e : jsonObject.entrySet()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    clone.add(e.getKey(), e.getValue());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                Streams.write(clone, out);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }.nullSafe();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 268,
      "kester-ng": 2
    }
  },
  {
    "path": "src/main/java/nasa/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public interface Storage extends NasaBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Path getNasaBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Path getHistoryBookFilePath();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    Optional\u003cReadOnlyNasaBook\u003e readNasaBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    Optional\u003cReadOnlyHistory\u003e readHistoryBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void saveNasaBook(ReadOnlyNasaBook nasaBook) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 32,
      "EdmondOng": 7
    }
  },
  {
    "path": "src/main/java/nasa/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Manages storage of NASA data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private NasaBookStorage nasaBookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public StorageManager(NasaBookStorage nasaBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.nasaBookStorage \u003d nasaBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d NASA methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Path getNasaBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return nasaBookStorage.getNasaBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Path getHistoryBookFilePath() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBookStorage.getHistoryBookFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Optional\u003cReadOnlyNasaBook\u003e readNasaBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return readNasaBook(nasaBookStorage.getNasaBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public Optional\u003cReadOnlyNasaBook\u003e readNasaBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return nasaBookStorage.readNasaBook(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistoryBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBookStorage.readHistoryBook(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Optional\u003cReadOnlyHistory\u003e readHistoryBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return readHistoryBook(nasaBookStorage.getHistoryBookFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook(ReadOnlyNasaBook nasaBook) throws IOException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        saveNasaBook(nasaBook, nasaBookStorage.getNasaBookFilePath());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook(ReadOnlyNasaBook nasaBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBookStorage.saveNasaBook(nasaBook, filePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        saveUltimate(nasaBook, historyBook, nasaBookStorage.getNasaBookFilePath(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                nasaBookStorage.getHistoryBookFilePath());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook, Path filePathOne,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                             Path filePathTwo) throws IOException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePathOne + filePathTwo);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBookStorage.saveUltimate(nasaBook, historyBook, filePathOne, filePathTwo);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 78,
      "EdmondOng": 32
    }
  },
  {
    "path": "src/main/java/nasa/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Represents a storage for {@link nasa.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Saves the given {@link nasa.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "-": 30
    }
  },
  {
    "path": "src/main/java/nasa/ui/CalendarView.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.DayOfWeek;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.Month;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.Year;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.time.format.TextStyle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Locale;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.geometry.Insets;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.geometry.Pos;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.Priority;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Lesson;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * UI component to represent the calendar view."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class CalendarView extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String FXML \u003d \"CalendarView.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private int currentYear;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private int currentMonth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Label monthAndYear;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private GridPane calendarGrid;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Constructor for the controller."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleObservableList modules listed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public CalendarView(ObservableList\u003cModule\u003e moduleObservableList) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // initialize the calendar grid and its contents"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        LocalDateTime currentDateTime \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        currentYear \u003d currentDateTime.getYear();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        currentMonth \u003d currentDateTime.getMonthValue();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // update the Label and the grids"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        monthAndYear.setText(String.format(\"%s %s\", Month.of(currentMonth), Year.of(currentYear)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        monthAndYear.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // update calendar"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        initializeWholeCalendar();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // update contents in calendar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        loadActivities(moduleObservableList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // allow updating of calendar"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // TODO: whenever a module is added, do this also"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        moduleObservableList.addListener(new ListChangeListener\u003cModule\u003e() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            public void onChanged(Change\u003c? extends Module\u003e c) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                resetCalendar();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                loadActivities(moduleObservableList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                updateCalendar(moduleObservableList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        updateCalendar(moduleObservableList);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to update the calendar as activities are editied/removed/added."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleObservableList List of modules"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void updateCalendar(ObservableList\u003cModule\u003e moduleObservableList) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Module module : moduleObservableList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cActivity\u003e activityObservableList \u003d module.getFilteredActivityList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            activityObservableList.addListener(new ListChangeListener\u003cActivity\u003e() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                public void onChanged(Change\u003c? extends Activity\u003e c) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    resetCalendar();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    loadActivities(moduleObservableList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            });"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialize the header for the calendar."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void initializeCalendarHeader() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d 7; i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            VBox dayHeader \u003d new VBox();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            dayHeader.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            GridPane.setVgrow(dayHeader, Priority.NEVER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Label day \u003d new Label();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            day.setText(DayOfWeek.of(i).getDisplayName(TextStyle.SHORT, Locale.ENGLISH));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            day.setTextFill(Color.WHITE);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            day.setAlignment(Pos.CENTER);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dayHeader.getChildren().add(day);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            dayHeader.getStyleClass().add(\"date-header\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            calendarGrid.add(dayHeader, i - 1, 0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialize the date grids for the calendar."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void initializeDateGrids() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        LocalDateTime monthDetails \u003d LocalDateTime.of(currentYear, currentMonth, 1, 0, 0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int firstDayOfMonth \u003d monthDetails.getDayOfWeek().getValue(); // get when the first date lies on which day"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int totalDaysInMonth \u003d monthDetails.getMonth().maxLength(); // get total days in current month"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // need to adjust totalDaysInMonth for Feb (leap year)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        LocalDate date \u003d LocalDate.of(currentYear, currentMonth, 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (!date.isLeapYear() \u0026\u0026 date.getMonth() \u003d\u003d Month.FEBRUARY) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            totalDaysInMonth--; // need to minus 1 as not leap year"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int nullDays \u003d firstDayOfMonth - 1;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        int currentDate \u003d 1;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // populate the first row of the calendar grid"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (int i \u003d 0; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            VBox dateContent \u003d new VBox();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            GridPane.setVgrow(dateContent, Priority.ALWAYS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            dateContent.setId(Integer.toString(currentDate));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (i \u003c nullDays) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                // not in current month, set to white color"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                dateContent.getStyleClass().add(\"date-pane\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // set to purple color plus add date number"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                dateContent.getStyleClass().add(\"date-pane\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Label dateLabel \u003d new Label();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateLabel.setText(Integer.toString(currentDate));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                dateLabel.setStyle(\"-fx-text-fill:black\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                dateLabel.setPadding(new Insets(10));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContent.getChildren().add(dateLabel);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                currentDate++;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            calendarGrid.add(dateContent, i, 1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // populate the rest of the grids as per normal"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (int i \u003d 2; i \u003c 7; i++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (int j \u003d 0; j \u003c 7; j++) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                VBox dateContent \u003d new VBox();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                GridPane.setVgrow(dateContent, Priority.ALWAYS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                dateContent.setId(Integer.toString(currentDate));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // check if current grid is still within the month"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (currentDate \u003c\u003d totalDaysInMonth) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    dateContent.getStyleClass().add(\"date-pane\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Label dateLabel \u003d new Label();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateLabel.setText(Integer.toString(currentDate));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    dateLabel.setStyle(\"-fx-text-fill: black\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    dateLabel.setPadding(new Insets(10));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateContent.getChildren().add(dateLabel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    currentDate++;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    // create a white pane"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    dateContent.getStyleClass().add(\"date-pane\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                calendarGrid.add(dateContent, j, i);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Load all activities into the calendar."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param moduleObservableList modules in the application"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void loadActivities(ObservableList\u003cModule\u003e moduleObservableList) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        HashMap\u003cInteger, ArrayList\u003cActivity\u003e\u003e activityHashMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Module module : moduleObservableList) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ObservableList\u003cActivity\u003e activityObservableList \u003d"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                module.getFilteredActivityList();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            for (Activity activity : activityObservableList) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (activity.occurInMonth(currentMonth)) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    int activityDate \u003d getMonth(activity);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    if (activityHashMap.containsKey(activityDate)) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        activityHashMap.get(activityDate).add(activity);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        ArrayList\u003cActivity\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        activities.add(activity);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        activityHashMap.put(activityDate, activities);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // now we populate those grids that has activities"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Integer i : activityHashMap.keySet()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            ArrayList\u003cActivity\u003e dateActivities \u003d activityHashMap.get(i);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            int size \u003d dateActivities.size();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (size \u003e 0) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                Node node \u003d calendarGrid.lookup(\"#\" + Integer.toString(i));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                VBox dateContent \u003d (VBox) node;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                int counter \u003d 1;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                for (Activity activity : dateActivities) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    if (counter \u003c\u003d 3) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        Label activityLabel \u003d getActivityLabel(activity);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        dateContent.getChildren().add(activityLabel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        counter++;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                // add the others... label"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (size \u003e 3) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    int left \u003d size - 3;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    Label leftActivities \u003d new Label();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    leftActivities.setText(String.format(\"%d other activities\", left));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    leftActivities.setPadding(new Insets(0, 5, 0, 5));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    leftActivities.setStyle(\"-fx-background-color:#f4c2c2; -fx-background-radius: 5 5 5 5\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    leftActivities.setMaxWidth(Double.MAX_VALUE);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    dateContent.getChildren().add(leftActivities);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Get the label representing the activity."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activity activity to be listed in calendar"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Label getActivityLabel(Activity activity) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Label activityLabel \u003d new Label();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        activityLabel.setText(activity.toString());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        activityLabel.setPadding(new Insets(0, 5, 0, 5));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (activity instanceof Deadline) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // color it red"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            activityLabel.setStyle(\"-fx-background-color:#AFEEEE; -fx-background-radius: 5 5 5 5\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else if (activity instanceof Event) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // color it yellow"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            activityLabel.setStyle(\"-fx-background-color: darkblue; -fx-background-radius: 5 5 5 5\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            // color it green"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            activityLabel.setStyle(\"-fx-background-color:green; -fx-background-radius: 5 5 5 5\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        activityLabel.setTextFill(Color.BLACK);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return activityLabel;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Initialize the whole calendar."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void initializeWholeCalendar() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        initializeCalendarHeader();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        initializeDateGrids();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Get the start months of the activities."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activity activity to be listed on calendar"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private int getMonth(Activity activity) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        if (activity instanceof Deadline) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return ((Deadline) activity).getDueDate().getDate().getDayOfMonth();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else if (activity instanceof Event) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return ((Event) activity).getDateFrom().getDate().getDayOfMonth();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            return ((Lesson) activity).getDateFrom().getDate().getDayOfMonth();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Method to reset the whole calendar (remove all activities)."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private void resetCalendar() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ObservableList\u003cNode\u003e calendarCells \u003d calendarGrid.getChildren();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        for (Node cell : calendarCells) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            if (GridPane.getRowIndex(cell) !\u003d null"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                \u0026\u0026 GridPane.getRowIndex(cell) !\u003d 0) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                ObservableList\u003cNode\u003e nodes \u003d ((VBox) cell).getChildren();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                if (nodes.size() \u003e 1) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                    nodes.remove(1, nodes.size());"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 16,
      "kester-ng": 280
    }
  },
  {
    "path": "src/main/java/nasa/ui/CommandBox.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.LinkedList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ListIterator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final List\u003cString\u003e commandHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ListIterator\u003cString\u003e commandHistoryIterator;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandHistory \u003d new LinkedList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandHistoryIterator \u003d commandHistory.listIterator();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandTextField.addEventFilter(KeyEvent.KEY_RELEASED, event -\u003e {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            //Overriding default redo"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (event.getCode() \u003d\u003d KeyCode.Z \u0026\u0026 event.isShortcutDown() \u0026\u0026 event.isShiftDown()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                commandTextField.setText(\"redo\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                handleCommandEntered();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            //Overriding default undo"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            } else if (event.getCode() \u003d\u003d KeyCode.Z \u0026\u0026 event.isShortcutDown()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                commandTextField.setText(\"undo\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                handleCommandEntered();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        //Controls to view command history"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandTextField.addEventHandler(KeyEvent.KEY_RELEASED, (key) -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            switch (key.getCode()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case UP:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (commandHistoryIterator.hasPrevious()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    commandTextField.setText(commandHistoryIterator.previous());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case DOWN:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (commandHistoryIterator.hasNext()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    commandTextField.setText(commandHistoryIterator.next());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            case H:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                if (key.isControlDown()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    commandTextField.setText(\"help\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    handleCommandEntered();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            commandHistory.add(commandTextField.getText());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            commandHistoryIterator \u003d commandHistory"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    .listIterator(commandHistory.size());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         * @see nasa.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 127
    }
  },
  {
    "path": "src/main/java/nasa/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static final String USERGUIDE_URL \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \"https://github.com/AY1920S2-CS2103T-T10-4/main/blob/master/docs/UserGuide.adoc\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 5,
      "-": 99
    }
  },
  {
    "path": "src/main/java/nasa/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private TabPanel tabPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private MenuItem undoMenuItem;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private MenuItem redoMenuItem;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StackPane tabPanelPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        primaryStage.addEventFilter(KeyEvent.KEY_RELEASED, event -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            //Overriding default redo"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (event.getCode() \u003d\u003d KeyCode.Z \u0026\u0026 event.isShortcutDown() \u0026\u0026 event.isShiftDown()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                handleRedo();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                //Overriding default undo"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            } else if (event.getCode() \u003d\u003d KeyCode.Z \u0026\u0026 event.isShortcutDown()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                handleUndo();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            } else if (event.getCode() \u003d\u003d KeyCode.TAB) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                tabPanel.next();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        TODO: Implement Activity list panel to display activity of the respective module"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Can use {@code logic.getFilteredActivityList()}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tabPanel \u003d new TabPanel(logic);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tabPanelPlaceholder.getChildren().add(tabPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getNasaBookFilePath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Handles undo."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void handleUndo() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            executeCommand(\"undo\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.info(\"Invalid command\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Handles redo."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void handleRedo() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            executeCommand(\"redo\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            logger.info(\"Invalid command.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see Logic#execute(String)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 58,
      "-": 170,
      "don-tay": 4
    }
  },
  {
    "path": "src/main/java/nasa/ui/ModuleCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.ui.activity.ActivityListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ModuleCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"ModuleListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public final Module module;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public final int id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ActivityListPanel activityListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Pane cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label code;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StackPane activityListPanelPlaceholder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ModuleCard(Module module, int displayedIndex) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.module \u003d module;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.id \u003d displayedIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        code.setText(module.getModuleCode().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        activityListPanel \u003d new ActivityListPanel(module.getFilteredActivityList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        activityListPanelPlaceholder.getChildren().add(activityListPanel.getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!(other instanceof ModuleCard)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ModuleCard card \u003d (ModuleCard) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return id \u003d\u003d card.id"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u0026\u0026 module.equals(card.module);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 63,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/ui/ModuleListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import javafx.scene.control.Control;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ModuleListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"ModuleListPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ModuleListPanel.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ListView\u003cModule\u003e moduleListView;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label noModules;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ModuleListPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!moduleList.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            noModules.setManaged(false);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleListView.setItems(moduleList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleListView.setCellFactory(listView -\u003e new ModuleListViewCell());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    class ModuleListViewCell extends ListCell\u003cModule\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        protected void updateItem(Module module, boolean empty) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            super.updateItem(module, empty);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            noModules.setManaged(false);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            prefWidthProperty().bind(moduleListView.widthProperty()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    .divide(moduleListView.getItems().size()).subtract(5));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            //TODO Fit modules to screen"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            minWidthProperty().set(200);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            setMaxWidth(Control.USE_PREF_SIZE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (empty || module \u003d\u003d null) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                setGraphic(new ModuleCard(module, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 59,
      "kester-ng": 5
    }
  },
  {
    "path": "src/main/java/nasa/ui/ResultDisplay.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 26
    }
  },
  {
    "path": "src/main/java/nasa/ui/StatisticsPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ListChangeListener;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Tooltip;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Panel showing statistics on modules."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class StatisticsPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"StatisticsPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(StatisticsPanel.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private PieChart pieChart;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private BarChart\u003cString, Integer\u003e barChart;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private CategoryAxis xAxis;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private NumberAxis yAxis;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public StatisticsPanel(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        setStatistics(moduleList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleList.addListener(new ListChangeListener\u003cModule\u003e() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            public void onChanged(Change\u003c? extends Module\u003e c) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                setStatistics(moduleList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        updateStatistics(moduleList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Method to update statistics as activities are edited/removed/added."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @param moduleObservableList List of modules"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void updateStatistics(ObservableList\u003cModule\u003e moduleObservableList) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module module : moduleObservableList) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            ObservableList\u003cActivity\u003e activityObservableList \u003d module.getFilteredActivityList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            activityObservableList.addListener(new ListChangeListener\u003cActivity\u003e() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                public void onChanged(Change\u003c? extends Activity\u003e c) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    setStatistics(moduleObservableList);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void setStatistics(ObservableList\u003cModule\u003e moduleList) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        List\u003cPieChart.Data\u003e pieData \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            pieData.add(new PieChart.Data(module.getModuleCode().toString(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    module.getActivities().getActivityList().size()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e chartData \u003d FXCollections.observableArrayList(pieData);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        pieChart.setData(chartData);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        pieChart.getData().forEach(data -\u003e {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            String percentage \u003d String.format(\"%.2f%%\", (data.getPieValue() / 100));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            Tooltip toolTip \u003d new Tooltip(percentage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            Tooltip.install(data.getNode(), toolTip);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        });"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        //Bar chart"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        XYChart.Series\u003cString, Integer\u003e barData \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module module : moduleList) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            barData.getData().add(new XYChart.Data(module.getModuleCode().toString(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    module.getActivities().getActivityList().size()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        barChart.setData(FXCollections.observableArrayList(barData));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void resetStatistics() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        pieChart.getData().clear();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        barChart.getData().clear();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 99
    }
  },
  {
    "path": "src/main/java/nasa/ui/StatusBarFooter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 25
    }
  },
  {
    "path": "src/main/java/nasa/ui/TabPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.TabPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Tab for modules."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class TabPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"TabPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TabPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ModuleListPanel moduleListPanel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StatisticsPanel statisticsPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private CalendarView calendarView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StackPane moduleListPanelPlaceholder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StackPane statisticsPanelPlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private StackPane calendarPlaceholder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private HBox moduleList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private TabPane tabPane;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private HBox statisticsList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public TabPanel(Logic logic) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        calendarView \u003d new CalendarView(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        calendarPlaceholder.getChildren().add(calendarView.getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        calendarPlaceholder.getStyleClass().add(\"background\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleListPanel \u003d new ModuleListPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        moduleListPanelPlaceholder.getChildren().add(moduleListPanel.getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        statisticsPanel \u003d new StatisticsPanel(logic.getFilteredModuleList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        statisticsPanelPlaceholder.getChildren().add(statisticsPanel.getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        tabPane.setTabMinWidth(100);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Switches to the subsequent tab or the first tab if current tab is the last tab."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void next() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (tabPane.getSelectionModel().isSelected(tabPane.getTabs().size() - 1)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tabPane.getSelectionModel().selectFirst();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            tabPane.getSelectionModel().selectNext();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 60
    }
  },
  {
    "path": "src/main/java/nasa/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Starts the UI (and the App).  */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 12
    }
  },
  {
    "path": "src/main/java/nasa/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.MainApp;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.Logic;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/nasa.png\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    void showAlertDialogAndWait(AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 9,
      "-": 77
    }
  },
  {
    "path": "src/main/java/nasa/ui/UiPart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Resource folder where FXML files are stored. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 86
    }
  },
  {
    "path": "src/main/java/nasa/ui/activity/ActivityCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.ui.UiPart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * An UI component that displays information of a {@code Module}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ActivityCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"ActivityListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public final Activity activity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private VBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label note;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label status;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ActivityCard(Activity activity, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        name.setText(activity.getName().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        date.setText(activity.getDate().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        note.setText(activity.getNote().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        status.setText(activity.getStatus().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        priority.setText(activity.getPriority().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (!(other instanceof ActivityCard)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ActivityCard card \u003d (ActivityCard) other;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return name.getText().equals(card.name.getText());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 68,
      "kester-ng": 1
    }
  },
  {
    "path": "src/main/java/nasa/ui/activity/ActivityListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.ui.UiPart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Panel containing the list of modules."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ActivityListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String FXML \u003d \"ActivityListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ActivityListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ListView\u003cActivity\u003e activityListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ActivityListPanel(ObservableList\u003cActivity\u003e activityList) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        activityListView.setItems(activityList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        activityListView.setCellFactory(listView -\u003e new ActivityListViewCell());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setWidth(double width) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        activityListView.setPrefWidth(width);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Module} using a {@code ModuleCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    class ActivityListViewCell extends ListCell\u003cActivity\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        protected void updateItem(Activity activity, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            super.updateItem(activity, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            prefWidthProperty().bind(activityListView.widthProperty().subtract(10));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (empty || activity \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                setGraphic(new ActivityCard(activity, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 50,
      "kester-ng": 3
    }
  },
  {
    "path": "src/main/resources/view/ActivityListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003cVBox fx:id\u003d\"activityPane\" spacing\u003d\"5.0\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"activity_big_label\" text\u003d\"\\$code\" wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"note\" styleClass\u003d\"activity_small_label\" text\u003d\"\\$code\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"activity_small_label\" text\u003d\"\\$code\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"status\" styleClass\u003d\"activity_small_label\" text\u003d\"\\$code\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"activity_small_label\" text\u003d\"\\$code\" wrapText\u003d\"true\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cminWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \u003cInsets bottom\u003d\"15.0\" left\u003d\"15.0\" right\u003d\"15.0\" top\u003d\"15.0\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 28,
      "kester-ng": 4
    }
  },
  {
    "path": "src/main/resources/view/ActivityListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cListView fx:id\u003d\"activityListView\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          xmlns:fx\u003d\"http://javafx.com/fxml/1\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7
    }
  },
  {
    "path": "src/main/resources/view/CalendarView.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.effect.ColorAdjust?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"monthAndYear\" styleClass\u003d\"cell_big_label\" layoutX\u003d\"376.0\" layoutY\u003d\"6.0\" prefHeight\u003d\"17.0\" prefWidth\u003d\"206.0\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "           textAlignment\u003d\"CENTER\" wrapText\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "      \u003cGridPane fx:id\u003d\"calendarGrid\" styleClass\u003d\"calendarGrid\" gridLinesVisible\u003d\"true\" layoutX\u003d\"36.0\" layoutY\u003d\"32.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cRowConstraints fx:id\u003d\"CalendarGrid\" minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"100.0\" prefHeight\u003d\"100.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"100.0\" prefHeight\u003d\"100.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"100.0\" prefHeight\u003d\"100.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"100.0\" prefHeight\u003d\"100.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"100.0\" prefHeight\u003d\"100.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cRowConstraints minHeight\u003d\"100.0\" prefHeight\u003d\"100.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         \u003ceffect\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            \u003cColorAdjust /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         \u003c/effect\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "kester-ng": 31
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 35
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         title\u003d\"Nice And Amazing Student Assistant\" minWidth\u003d\"100\" minHeight\u003d\"100\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cImage url\u003d\"@/images/nasa.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "      \u003cAnchorPane maxHeight\u003d\"Infinity\" maxWidth\u003d\"Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                  prefWidth\u003d\"1000.0\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                   AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "              \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Edit\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                  \u003cMenuItem fx:id\u003d\"undoMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUndo\" text\u003d\"Undo\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                  \u003cMenuItem fx:id\u003d\"redoMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleRedo\" text\u003d\"Redo\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "              \u003c/Menu\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/Menu\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          \u003cStackPane fx:id\u003d\"tabPanelPlaceholder\" AnchorPane.topAnchor\u003d\"25.0\" AnchorPane.leftAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                         AnchorPane.bottomAnchor\u003d\"165\" /\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     AnchorPane.bottomAnchor\u003d\"130.0\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     minHeight\u003d\"125\" prefHeight\u003d\"125\" maxHeight\u003d\"125\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     AnchorPane.bottomAnchor\u003d\"10.0\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "          \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                     AnchorPane.bottomAnchor\u003d\"0.0\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "      \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 23,
      "-": 42
    }
  },
  {
    "path": "src/main/resources/view/ModuleListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cVBox id\u003d\"modulePane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cLabel fx:id\u003d\"code\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$code\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cminWidth\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cStackPane fx:id\u003d\"activityListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 18
    }
  },
  {
    "path": "src/main/resources/view/ModuleListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cHBox xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cLabel fx:id\u003d\"noModules\" maxWidth\u003d\"Infinity\" styleClass\u003d\"no-modules\" minHeight\u003d\"200\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "           maxHeight\u003d\"Infinity\" wrapText\u003d\"true\" alignment\u003d\"BOTTOM_CENTER\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "           text\u003d\"No modules added... Use madd m/[MODULE_CODE] n/[MODULE_NAME] to start adding!\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "           HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cListView id\u003d\"module\" fx:id\u003d\"moduleListView\" orientation\u003d\"HORIZONTAL\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 13
    }
  },
  {
    "path": "src/main/resources/view/NasaMainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003c?import javafx.scene.control.ScrollPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003cStage xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            \u003cAnchorPane prefHeight\u003d\"293.0\" prefWidth\u003d\"251.0\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "               \u003cTextField layoutX\u003d\"6.0\" layoutY\u003d\"166.0\" prefHeight\u003d\"27.0\" prefWidth\u003d\"198.0\" AnchorPane.bottomAnchor\u003d\"8.0\" AnchorPane.leftAnchor\u003d\"6.0\" AnchorPane.rightAnchor\u003d\"69.0\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "               \u003cTabPane layoutX\u003d\"7.0\" layoutY\u003d\"7.0\" prefHeight\u003d\"36.0\" prefWidth\u003d\"202.0\" tabClosingPolicy\u003d\"UNAVAILABLE\" AnchorPane.leftAnchor\u003d\"5.0\" AnchorPane.rightAnchor\u003d\"5.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                 \u003ctabs\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                   \u003cTab text\u003d\"Untitled Tab 1\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                   \u003cTab text\u003d\"Untitled Tab 2\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                 \u003c/tabs\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "               \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "               \u003cScrollPane layoutX\u003d\"7.0\" layoutY\u003d\"43.0\" prefHeight\u003d\"116.0\" prefWidth\u003d\"202.0\" AnchorPane.bottomAnchor\u003d\"42.0\" AnchorPane.leftAnchor\u003d\"7.0\" AnchorPane.rightAnchor\u003d\"6.5\" AnchorPane.topAnchor\u003d\"43.0\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "               \u003cButton layoutX\u003d\"161.0\" layoutY\u003d\"166.0\" mnemonicParsing\u003d\"false\" prefHeight\u003d\"27.0\" prefWidth\u003d\"55.0\" text\u003d\"Button\" AnchorPane.bottomAnchor\u003d\"8.0\" AnchorPane.rightAnchor\u003d\"7.0\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            \u003c/children\u003e\u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "\u003c/Stage\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 27
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/StatisticsPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.chart.BarChart?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.chart.CategoryAxis?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.chart.NumberAxis?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cHBox alignment\u003d\"CENTER\" spacing\u003d\"50\" xmlns\u003d\"http://javafx.com/javafx/8.0.171\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cPieChart fx:id\u003d\"pieChart\" layoutX\u003d\"50.0\" title\u003d\"Overall Statistics\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "              id\u003d\"pieChart\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cBarChart fx:id\u003d\"barChart\" id\u003d\"barChart\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cxAxis\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cCategoryAxis fx:id\u003d\"xAxis\" side\u003d\"BOTTOM\" label\u003d\"Modules\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/xAxis\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003cyAxis\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cNumberAxis fx:id\u003d\"yAxis\" side\u003d\"LEFT\" label\u003d\"Activities\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        \u003c/yAxis\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/BarChart\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 22
    }
  },
  {
    "path": "src/main/resources/view/TabPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cAnchorPane AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            AnchorPane.bottomAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003cTabPane fx:id\u003d\"tabPane\" maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "             minWidth\u003d\"-Infinity\" prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" tabClosingPolicy\u003d\"UNAVAILABLE\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "             xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "             AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "             AnchorPane.bottomAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cTab text\u003d\"Modules\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003cHBox fx:id\u003d\"moduleList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"500\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                          prefHeight\u003d\"1000\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                          AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                          AnchorPane.bottomAnchor\u003d\"0.0\" alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"moduleListPanelPlaceholder\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cTab text\u003d\"Calendar\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"calendarPlaceholder\" AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"25.0\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                                   AnchorPane.rightAnchor\u003d\"25.0\" alignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003cTab text\u003d\"Statistics\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"180.0\" prefWidth\u003d\"200.0\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003cHBox fx:id\u003d\"statisticsList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"500\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                          prefHeight\u003d\"1000\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                          AnchorPane.topAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                          AnchorPane.bottomAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"statisticsPanelPlaceholder\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    \u003c/HBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            \u003c/Tab\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    \u003c/TabPane\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 50
    }
  },
  {
    "path": "src/test/java/nasa/AppParametersTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/nasa/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "-": 63
    }
  },
  {
    "path": "src/test/java/nasa/SerializableTestClass.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/nasa/commons/core/ConfigTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/nasa/commons/core/VersionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/nasa/commons/core/index/IndexTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 58
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/AppUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/nasa.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 33
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/CollectionUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/ConfigUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/FileUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/JsonUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/nasa/commons/util/StringUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches a partial word only"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 141
    }
  },
  {
    "path": "src/test/java/nasa/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2030;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2030;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS2030;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.JsonNasaBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setUp() throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonNasaBookStorage nasaBookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new JsonNasaBookStorage(temporaryFolder.resolve(\"nasaBook.json\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        temporaryFolder.resolve(\"historyBook.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(nasaBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String deleteCommand \u003d \"delete\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() throws IOException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // Setup LogicManager with JsonNasaBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonNasaBookStorage nasaBookStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new JsonNasaBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionNasaBook.json\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                        temporaryFolder.resolve(\"ioExceptionHistoryBook.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(nasaBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String addCommand \u003d AddModuleCommand.COMMAND_WORD + MODULE_CODE_DESC_CS2030 + MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module expectedModule \u003d"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                new ModuleBuilder().withCode(VALID_MODULE_CODE_CS2030).withName(VALID_MODULE_NAME_CS2030)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        expectedModel.addModule(expectedModule);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static class JsonNasaBookIoExceptionThrowingStub extends JsonNasaBookStorage {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        private JsonNasaBookIoExceptionThrowingStub(Path filePath, Path filePathTwo) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            super(filePath, filePathTwo);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        public void saveUltimate(ReadOnlyNasaBook nasaBook, ReadOnlyHistory\u003cUniqueModuleList\u003e historyBook,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                                 Path filePathOne, Path filePathTwo) throws IOException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void saveNasaBook(ReadOnlyNasaBook nasaBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 39,
      "EdmondOng": 16,
      "-": 120
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.ReadOnlyHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.SortMethod;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void constructor_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddModuleCommand(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_moduleAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ModelStubAcceptingModuleAdded modelStub \u003d new ModelStubAcceptingModuleAdded();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        CommandResult commandResult \u003d new AddModuleCommand(validModule).execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(String.format(AddModuleCommand.MESSAGE_SUCCESS, validModule), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(Arrays.asList(validModule), modelStub.modulesAdded);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module validModule \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddModuleCommand addCommand \u003d new AddModuleCommand(validModule);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithModule(validModule);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(CommandException.class, AddModuleCommand.MESSAGE_DUPLICATED_MODULE, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module cs2103t \u003d new ModuleBuilder().withCode(\"CS2103T\").build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module cs2101 \u003d new ModuleBuilder().withCode(\"CS2101\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddModuleCommand addCS2103TCommand \u003d new AddModuleCommand(cs2103t);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddModuleCommand addCS2101Command \u003d new AddModuleCommand(cs2101);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(addCS2103TCommand.equals(addCS2103TCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddModuleCommand addCS2103TCommandCopy \u003d new AddModuleCommand(cs2103t);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(addCS2103TCommand.equals(addCS2103TCommandCopy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(addCS2103TCommand.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(addCS2103TCommand.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(addCS2103TCommand.equals(addCS2101Command));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private abstract class ModelStub implements Model {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public Path getNasaBookFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void setNasaBookFilePath(Path nasaBookFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void setNasaBook(ReadOnlyNasaBook newData) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public ReadOnlyNasaBook getNasaBook() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public boolean hasModule(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void deleteModule(Module target) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void deleteModule(ModuleCode target) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public ObservableList\u003cModule\u003e getFilteredModuleList() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void updateFilteredModuleList(Predicate\u003cModule\u003e predicate) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        public HistoryManager\u003cUniqueModuleList\u003e getHistoryManager() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        public ObservableList\u003cActivity\u003e getFilteredActivityList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        public ReadOnlyHistory getHistoryBook() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        public void undoHistory() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        public void redoHistory() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        public void setSchedule(ModuleCode module, Name activity, Index type) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * A Model stub that contains a single module."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private class ModelStubWithModule extends ModelStub {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        private final Module module;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ModelStubWithModule(Module module) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            this.module \u003d module;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void addModule(ModuleCode moduleCode, ModuleName moduleName) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            requireNonNull(moduleName);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void setModule(ModuleCode target, Module editedModule) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void addActivity(Module target, Activity activity) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void addActivity(ModuleCode target, Activity activity) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void removeActivity(Module target, Activity activity) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void removeActivity(ModuleCode target, Activity activity) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public boolean hasActivity(ModuleCode target, Activity activity) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void setActivityByIndex(Module module, Index index, Activity activity) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void setActivityByIndex(ModuleCode moduleCode, Index index, Activity activity) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void editActivityByIndex(Module module, Index index, Object... args) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void editActivityByIndex(ModuleCode moduleCode, Index index, Object... args) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public ObservableList\u003cActivity\u003e getFilteredActivityList(Index index) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void updateFilteredActivityList(Index index, Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void removeModuleByIndex(Index index) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void removeActivityByIndex(Module module, Index index) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void removeActivityByIndex(ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        public void setSchedule(ModuleCode module, Name activity, Index type) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void sortActivityList(SortMethod sortMethod) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return this.module.isSameModule(module);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * A Model stub that always accept the module being added."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private class ModelStubAcceptingModuleAdded extends ModelStub {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        final ArrayList\u003cModule\u003e modulesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public boolean hasModule(Module module) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return modulesAdded.stream().anyMatch(module::isSameModule);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void addModule(Module module) {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            requireNonNull(module);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            modulesAdded.add(module);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void addModule(ModuleCode moduleCode, ModuleName moduleName) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            requireNonNull(moduleCode);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            requireNonNull(moduleName);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            modulesAdded.add(new Module(moduleCode, moduleName));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void setModule(Module target, Module editedModule) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void setModule(ModuleCode target, Module editedModule) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void addActivity(Module target, Activity activity) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void addActivity(ModuleCode target, Activity activity) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void removeActivity(Module target, Activity activity) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void removeActivity(ModuleCode target, Activity activity) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public boolean hasActivity(ModuleCode target, Activity activity) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void setActivityByIndex(Module module, Index index, Activity activity) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void setActivityByIndex(ModuleCode moduleCode, Index index, Activity activity) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void editActivityByIndex(Module module, Index index, Object... args) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void editActivityByIndex(ModuleCode moduleCode, Index index, Object... args) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public ObservableList\u003cActivity\u003e getFilteredActivityList(Index index) {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        public ObservableList\u003cActivity\u003e getFilteredActivityList(ModuleCode moduleCode) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void updateFilteredActivityList(Index index, Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void removeModuleByIndex(Index index) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void removeActivityByIndex(Module module, Index index) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void removeActivityByIndex(ModuleCode moduleCode, Index index) {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        public HistoryManager\u003cUniqueModuleList\u003e getHistoryManager() {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        public void undoHistory() {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        public void redoHistory() {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public ReadOnlyNasaBook getNasaBook() {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return new NasaBook();"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        public ReadOnlyHistory getHistoryBook() {"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        public void setSchedule(ModuleCode module, Name activity, Index type) {}"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public void sortActivityList(SortMethod sortMethod) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 407,
      "EdmondOng": 61,
      "kester-ng": 6,
      "don-tay": 12
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/AddModuleCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "// Integrated test TODO: changed name to AddModuleCommandTest"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddModuleCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String MODULE_CODE \u003d \"CS2103\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String MODULE_NAME \u003d \"Software Engineering\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003cUniqueModuleList\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_newModule_success() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module validModule \u003d new Module(new ModuleCode(MODULE_CODE), new ModuleName(MODULE_NAME));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNasaBook(), model.getHistoryBook(), model.getUserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        expectedModel.addModule(validModule);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandSuccess(new AddModuleCommand(validModule), model, String.format(AddModuleCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                validModule), expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_duplicateModule_fail() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d new Module(new ModuleCode(MODULE_CODE), new ModuleName(MODULE_NAME));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        AddModuleCommand command \u003d new AddModuleCommand(module);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        command.execute(model); //add one time"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // cannot add the same module again"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e command.execute(model));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_duplicateModule_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module moduleInList \u003d model.getNasaBook().getModuleList().get(0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandFailure(new AddModuleCommand(moduleInList), model, AddModuleCommand.MESSAGE_DUPLICATED_MODULE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 16,
      "EdmondOng": 10,
      "kester-ng": 36
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_emptyNasaBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_nonEmptyNasaBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        expectedModel.setNasaBook(new NasaBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 29,
      "EdmondOng": 3
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/CommandResultTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true)));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false).hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true).hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_ACTIVITY_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_NOTE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.EditActivityDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Test util."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    // valid module names and codes"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS2030 \u003d \"CS2030\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String VALID_MODULE_CODE_CS1231 \u003d \"CS1231\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_MODULE_NAME_CS2030 \u003d \"Programming Methodology II\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_MODULE_NAME_CS1231 \u003d \"Discrete Structures\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    // valid activity names and their parameters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_ACTIVITY_NAME_HWK \u003d \"Homework 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_ACTIVITY_NAME_TUTORIAL \u003d \"Weekly Tutorial\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_ACTIVITY_NAME_EXAM \u003d \"Final Paper\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_NOTES_TEST \u003d \"This is merely a testing of the notes\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String VALID_NOTES_TEST_2 \u003d \"Notes test two\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_PRIORITY_HIGH \u003d \"1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_PRIORITY_LOW \u003d \"5\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_DATE_TEST \u003d \"12-12-2020 23:59\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String VALID_DATE_TEST_2 \u003d \"14-12-2020 23:59\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    // parameters with their prefixes"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MODULE_CODE_DESC_CS2030 \u003d \" \" + PREFIX_MODULE + VALID_MODULE_CODE_CS2030;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String MODULE_CODE_DESC_CS1231 \u003d \" \" + PREFIX_MODULE + VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MODULE_NAME_DESC_CS2030 \u003d \" \" + PREFIX_MODULE_NAME + VALID_MODULE_NAME_CS2030;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String MODULE_NAME_DESC_CS1231 \u003d \" \" + PREFIX_MODULE_NAME + VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String ACTIVITY_NAME_DESC_HWK \u003d \" \" + PREFIX_ACTIVITY_NAME + VALID_ACTIVITY_NAME_HWK;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String ACTIVITY_NAME_DESC_TUTORIAL \u003d \" \" + PREFIX_ACTIVITY_NAME + VALID_ACTIVITY_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String ACTIVITY_NAME_DESC_EXAM \u003d \" \" + PREFIX_ACTIVITY_NAME + VALID_ACTIVITY_NAME_EXAM;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String NOTES_DESC_TEST \u003d \" \" + PREFIX_NOTE + VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String NOTES_DESC_TEST_2 \u003d \" \" + PREFIX_NOTE + VALID_NOTES_TEST_2;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String PRIORITY_DESC_HIGH \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String PRIORITY_DESC_LOW \u003d \" \" + PREFIX_PRIORITY + VALID_PRIORITY_LOW;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DATE_DESC_TEST \u003d \" \" + PREFIX_DATE + VALID_DATE_TEST;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final String DATE_DESC_TEST_2 \u003d \" \" + PREFIX_DATE + VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DATE_DESC_TEST_FROM \u003d \" \" + PREFIX_START_DATE + VALID_DATE_TEST;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DATE_DESC_TEST_TO \u003d \" \" + PREFIX_END_DATE + VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    // invalid parameters with their prefixes"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_MODULE_DESC \u003d \" \" + PREFIX_MODULE + \"@31_+\"; //only alphanumeric char"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_MODULE_NAME_DESC \u003d \" \" + PREFIX_MODULE_NAME + \"\\t\"; //only whitespaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_ACTIVITY_NAME_DESC \u003d \" \" + PREFIX_ACTIVITY_NAME"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"\\t\\t\"; // only whitespaces"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_NOTES_DESC \u003d \" \" + PREFIX_NOTE"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"        \"; //only whitespaces"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_PRIORITY_DESC \u003d \" \" + PREFIX_PRIORITY + \"r\"; //not an integer"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"2020-12-31 11:00\"; //not DD-MM-YYYY HH:MM format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_DATE_FROM_DESC \u003d \" \" + PREFIX_START_DATE"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"2020-12-31 11:00\"; // not DD-MM-YYYY HH:MM format"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String INVALID_DATE_TO_DESC \u003d \" \" + PREFIX_END_DATE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        + \"2020-12-31 11:00\"; // not DD-MM-YYYY HH:MM format"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    //extra test strings"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final EditActivityCommand.EditActivityDescriptor DESC_EXAM;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final EditActivityCommand.EditActivityDescriptor DESC_HWK;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final EditModuleCommand.EditModuleDescriptor DESC_CS2030;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final EditModuleCommand.EditModuleDescriptor DESC_CS1231;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        DESC_EXAM \u003d new EditActivityDescriptorBuilder().withName(VALID_ACTIVITY_NAME_EXAM)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withDate(VALID_DATE_TEST).withNote(VALID_NOTES_TEST).withPriority(VALID_PRIORITY_HIGH)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        DESC_HWK \u003d new EditActivityDescriptorBuilder().withName(VALID_ACTIVITY_NAME_HWK)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withDate(VALID_DATE_TEST_2).withNote(VALID_NOTES_TEST_2).withPriority(VALID_PRIORITY_LOW)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        DESC_CS2030 \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_MODULE_CODE_CS2030)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleName(VALID_MODULE_NAME_CS2030).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        DESC_CS1231 \u003d new EditModuleDescriptorBuilder().withModuleCode(VALID_MODULE_CODE_CS1231)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleName(VALID_MODULE_NAME_CS1231).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        NasaBook expectedAddressBook \u003d new NasaBook(actualModel.getNasaBook());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        List\u003cModule\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getNasaBook());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredModuleList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 114,
      "don-tay": 27
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/DeleteActivityCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalIndexes.INDEX_SECOND_ACTIVITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteActivityCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_validActivityUnfilteredList_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteActivityCommand deleteActivityCommand \u003d new DeleteActivityCommand(INDEX_FIRST_ACTIVITY, moduleCode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(INDEX_FIRST_ACTIVITY.toString()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            + DeleteActivityCommand.MESSAGE_DELETE_ACTIVITY_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.removeActivityByIndex(moduleCode, INDEX_FIRST_ACTIVITY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(deleteActivityCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // an index that is invalid (\u003e list.size())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module module \u003d model.getFilteredModuleList().get(INDEX_SECOND_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d module.getModuleCode();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteActivityCommand deleteActivityCommand \u003d new DeleteActivityCommand(Index.fromOneBased(6), moduleCode);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(deleteActivityCommand, model, DeleteActivityCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_invalidModuleUnfilteredList_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // a module that does not exist"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ModuleCode moduleCode \u003d new ModuleCode(\"UTW1001K\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteActivityCommand deleteActivityCommand \u003d new DeleteActivityCommand(INDEX_FIRST_ACTIVITY, moduleCode);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(deleteActivityCommand, model, DeleteActivityCommand.MESSAGE_MODULE_NOT_FOUND);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 3,
      "kester-ng": 51
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/DeleteModuleCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * {@code DeleteModuleCommand}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteModuleCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_validModuleUnfilteredList_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteModuleCommand deleteCommand \u003d new DeleteModuleCommand(moduleToDelete.getModuleCode());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteModuleCommand.MESSAGE_DELETE_MODULE_SUCCESS,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                moduleToDelete.getModuleCode().toString());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getNasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_invalidModuleUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        DeleteModuleCommand deleteCommand \u003d new DeleteModuleCommand(new ModuleCode(\"DAO2703\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandFailure(deleteCommand, model, DeleteModuleCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_validModuleFilteredList_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module moduleToDelete \u003d model.getFilteredModuleList().get(new Index(1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        DeleteModuleCommand deleteCommand \u003d new DeleteModuleCommand(new ModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteModuleCommand.MESSAGE_DELETE_MODULE_SUCCESS, moduleToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNasaBook(), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        expectedModel.deleteModule(moduleToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        showNoModule(expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        showModuleAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getModuleList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_invalidModuleUnfilteredList_failure() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // a  module that does not exist"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        DeleteModuleCommand deleteModuleCommand \u003d new DeleteModuleCommand(new ModuleCode(\"MA1521\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandFailure(deleteModuleCommand, model, DeleteModuleCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        DeleteModuleCommand deleteFirstCommand \u003d new DeleteModuleCommand(new ModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        DeleteModuleCommand deleteSecondCommand \u003d new DeleteModuleCommand(new ModuleCode(\"CS2101\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        DeleteModuleCommand deleteFirstCommandCopy \u003d new DeleteModuleCommand(new ModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void showNoModule(Model model) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        model.updateFilteredModuleList(p -\u003e false);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(model.getFilteredModuleList().isEmpty());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 80,
      "EdmondOng": 3,
      "kester-ng": 36
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/EditActivityCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DESC_EXAM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DESC_HWK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_EXAM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.testutil.TypicalIndexes.INDEX_SECOND_ACTIVITY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.testutil.TypicalNasaBook.NASABOOK_TYPE_1;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.EditActivityCommand.EditActivityDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.EditActivityDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "// TODO: Implement {@code getFilteredActivityList} by accepting moduleCode as parameter in {@interface Model}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * and unit tests for EditActivityCommand."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditActivityCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Model model \u003d new ModelManager(NASABOOK_TYPE_1.deepCopyNasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private Module module \u003d new ModuleBuilder().build(); // module to contain activity"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private int activityListSize \u003d module.getActivities().getActivityList().size(); // num of activity in module"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private Index indexLastActivity \u003d Index.fromOneBased(activityListSize);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private ModuleCode moduleCode \u003d module.getModuleCode(); // module code of activity-containing module"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private Index moduleIndex \u003d Index.fromZeroBased(model.getNasaBook().getModuleList().indexOf(module));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void execute_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Activity editedActivity \u003d new DeadlineBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder(editedActivity).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityCommand editActivityCommand \u003d new EditActivityCommand(INDEX_FIRST_ACTIVITY, moduleCode, descriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String expectedMessage \u003d String.format(EditActivityCommand.MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new NasaBook(model.getNasaBook()), model.getHistoryBook(),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        expectedModel.setActivityByIndex(moduleCode, INDEX_FIRST_ACTIVITY, editedActivity);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertCommandSuccess(editActivityCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void execute_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Activity editedActivity \u003d new DeadlineBuilder().withName(VALID_ACTIVITY_NAME_EXAM).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder(editedActivity).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityCommand editActivityCommand \u003d new EditActivityCommand(INDEX_FIRST_ACTIVITY, moduleCode, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String expectedMessage \u003d String.format(EditActivityCommand.MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new NasaBook(model.getNasaBook()), model.getHistoryBook(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        expectedModel.setActivityByIndex(moduleCode, INDEX_FIRST_ACTIVITY, editedActivity);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertCommandSuccess(editActivityCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void execute_noFieldSpecified_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityCommand editActivityCommand \u003d new EditActivityCommand(INDEX_FIRST_ACTIVITY, moduleCode,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                new EditActivityDescriptor());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Activity editedActivity \u003d model.getFilteredActivityList(moduleIndex).get(INDEX_FIRST_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String expectedMessage \u003d String.format(EditActivityCommand.MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new NasaBook(model.getNasaBook()), model.getHistoryBook(),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertCommandSuccess(editActivityCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void execute_duplicateActivityFilteredList_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // edit activity in filtered list into a duplicate in nasa book"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Activity activityInList \u003d model.getFilteredActivityList(moduleIndex).get(INDEX_SECOND_ACTIVITY.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityCommand editActivityCommand \u003d new EditActivityCommand(INDEX_FIRST_ACTIVITY, moduleCode,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                new EditActivityDescriptorBuilder(activityInList).build());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertCommandFailure(editActivityCommand, model, EditActivityCommand.MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void execute_invalidActivityIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredActivityList(moduleIndex).size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder().build();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityCommand editActivityCommand \u003d new EditActivityCommand(outOfBoundIndex, moduleCode, descriptor);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertCommandFailure(editActivityCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        final EditActivityCommand standardCommand \u003d new EditActivityCommand(INDEX_FIRST_ACTIVITY, moduleCode,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                DESC_EXAM);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityDescriptor copyDescriptor \u003d new EditActivityDescriptor(DESC_EXAM);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityCommand commandWithSameValues \u003d new EditActivityCommand(INDEX_FIRST_ACTIVITY, moduleCode,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                copyDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(standardCommand.equals(new EditActivityCommand(INDEX_SECOND_ACTIVITY, moduleCode, DESC_EXAM)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(standardCommand.equals(new EditActivityCommand(INDEX_FIRST_ACTIVITY, moduleCode, DESC_HWK)));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 8,
      "don-tay": 134
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/EditActivityDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DESC_EXAM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DESC_HWK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_NOTES_TEST_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_PRIORITY_LOW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.EditActivityCommand.EditActivityDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.EditActivityDescriptorBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditActivityDescriptorTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityDescriptor descriptorWithSameValues \u003d new EditActivityDescriptor(DESC_EXAM);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(DESC_EXAM.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(DESC_EXAM.equals(DESC_EXAM));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_EXAM.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_EXAM.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_EXAM.equals(DESC_HWK));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityDescriptor editedExam \u003d new EditActivityDescriptorBuilder(DESC_EXAM)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withName(VALID_ACTIVITY_NAME_TUTORIAL).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_EXAM.equals(editedExam));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        editedExam \u003d new EditActivityDescriptorBuilder(DESC_EXAM).withDate(VALID_DATE_TEST_2).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_EXAM.equals(editedExam));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different note -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        editedExam \u003d new EditActivityDescriptorBuilder(DESC_EXAM).withNote(VALID_NOTES_TEST_2).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_EXAM.equals(editedExam));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different priority -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        editedExam \u003d new EditActivityDescriptorBuilder(DESC_EXAM).withPriority(VALID_PRIORITY_LOW).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_EXAM.equals(editedExam));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "don-tay": 54
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/EditModuleCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DESC_CS1231;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DESC_CS2030;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.model.util.SampleDataUtil.getSampleNasaBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * and unit tests for EditModuleCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final Model model \u003d new ModelManager(getSampleNasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final ModuleCode firstModuleCodeToEdit \u003d model.getFilteredModuleList().get(0).getModuleCode();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private final ModuleCode lastModuleCodeToEdit \u003d model.getFilteredModuleList()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "             .get(model.getFilteredModuleList().size() - 1).getModuleCode();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void execute_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module editedModule \u003d new ModuleBuilder().build(); // module with attribute moduleName and moduleCode"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // Descriptor built off editedModule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(editedModule).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // Command making edits to moduleCode with descriptor"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand editModuleCommand \u003d new EditModuleCommand(firstModuleCodeToEdit, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String expectedMessage \u003d String.format(EditModuleCommand.MESSAGE_EDIT_MODULE_SUCCESS, editedModule);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Initializing model with same initial state as global model variable"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new NasaBook(model.getNasaBook()), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // Replace existing module in model with new, editedModule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        expectedModel.setModule(firstModuleCodeToEdit, editedModule);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * Check if successful message from editModuleCommand is equal to expectedMessage,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         * and model is equal to expectedModel"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "         */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertCommandSuccess(editModuleCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void execute_duplicateModuleUnfilteredList_failure() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Module firstModule \u003d model.getFilteredModuleList().get(0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder(firstModule).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand editModuleCommand \u003d new EditModuleCommand(firstModuleCodeToEdit, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertCommandFailure(editModuleCommand, model, EditModuleCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand editModuleCommand \u003d new EditModuleCommand(firstModuleCodeToEdit, new EditModuleDescriptor());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertCommandFailure(editModuleCommand, model, EditModuleCommand.MESSAGE_DUPLICATE_MODULE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        final EditModuleCommand standardCommand \u003d new EditModuleCommand(lastModuleCodeToEdit, DESC_CS1231);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor copyDescriptor \u003d new EditModuleDescriptor(DESC_CS1231);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand commandWithSameValues \u003d new EditModuleCommand(lastModuleCodeToEdit, copyDescriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(standardCommand.equals(new EditModuleCommand(firstModuleCodeToEdit, DESC_CS1231)));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(standardCommand.equals(new EditModuleCommand(lastModuleCodeToEdit, DESC_CS2030)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 3,
      "don-tay": 104
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/EditModuleDescriptorTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DESC_CS1231;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DESC_CS2030;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleDescriptorTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptorWithSameValues \u003d new EditModuleDescriptor(DESC_CS2030);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(DESC_CS2030.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(DESC_CS2030.equals(DESC_CS2030));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_CS2030.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_CS2030.equals(5));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_CS2030.equals(DESC_CS1231));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different module name -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor editedExam \u003d new EditModuleDescriptorBuilder(DESC_CS2030)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleName(VALID_MODULE_NAME_CS1231).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_CS2030.equals(editedExam));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // different module code -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        editedExam \u003d new EditModuleDescriptorBuilder(DESC_CS2030).withModuleCode(VALID_MODULE_CODE_CS1231).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(DESC_CS2030.equals(editedExam));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "don-tay": 45
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_ACTIVITY_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.ActivityContainsKeyWordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.testutil.NasaBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Model model \u003d new ModelManager(new NasaBookBuilder().build(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(new NasaBookBuilder().build(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ActivityContainsKeyWordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new ActivityContainsKeyWordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ActivityContainsKeyWordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new ActivityContainsKeyWordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ACTIVITY_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ActivityContainsKeyWordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_multipleKeywords_multipleActivitiesFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        expectedModel \u003d new ModelManager(new NasaBookBuilder().build(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ACTIVITY_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        ActivityContainsKeyWordsPredicate predicate \u003d preparePredicate(\"Lab\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.updateFilteredActivityList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(model.equals(expectedModel));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            CommandResult res \u003d findCommand.execute(model);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            assertEquals(res, new CommandResult(expectedMessage));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", e);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(findCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Parses {@code userInput} into a {@code ActivityContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private ActivityContainsKeyWordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        return new ActivityContainsKeyWordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 4,
      "kester-ng": 74,
      "don-tay": 10
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 5,
      "-": 15
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model \u003d new ModelManager(getTypicalNasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getNasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        //showModuleAtIndex(model, INDEX_FIRST_MODULE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "EdmondOng": 3,
      "-": 28
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/addcommands/AddDeadlineCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.testutil.DeadlineBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddDeadlineCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model \u003d new ModelManager(new NasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        module \u003d new Module(new ModuleCode(VALID_MODULE_CODE_CS1231), new ModuleName(VALID_MODULE_NAME_CS1231));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.addModule(module);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_newDeadline_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d new DeadlineBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new NasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        expectedModel.addModule(new ModuleCode(VALID_MODULE_CODE_CS1231), new ModuleName(VALID_MODULE_NAME_CS1231));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.addActivity(module, deadline);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddDeadlineCommand command \u003d new AddDeadlineCommand(deadline, new ModuleCode(VALID_MODULE_CODE_CS1231));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(command, model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            String.format(AddDeadlineCommand.MESSAGE_SUCCESS, deadline), expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_duplicateDeadline_failure() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d new DeadlineBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNasaBook(), model.getHistoryBook(), model.getUserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddDeadlineCommand command \u003d new AddDeadlineCommand(deadline, new ModuleCode(VALID_MODULE_CODE_CS1231));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.addActivity(module, deadline);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            AddDeadlineCommand.MESSAGE_DUPLICATED_ACTIVITY, () -\u003e command.execute(expectedModel));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_nullDeadline_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            new AddDeadlineCommand(null, new ModuleCode(VALID_MODULE_CODE_CS1231)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_nullModuleCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Deadline deadline \u003d (new DeadlineBuilder().build());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new AddDeadlineCommand(deadline, null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "EdmondOng": 4,
      "kester-ng": 61
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/addcommands/AddEventCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.testutil.EventBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddEventCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model \u003d new ModelManager(new NasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        module \u003d new Module(new ModuleCode(VALID_MODULE_CODE_CS1231), new ModuleName(VALID_MODULE_NAME_CS1231));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.addModule(module);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_newEvent_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new NasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        expectedModel.addModule(new ModuleCode(VALID_MODULE_CODE_CS1231), new ModuleName(VALID_MODULE_NAME_CS1231));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.addActivity(module, event);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddEventCommand command \u003d new AddEventCommand(event, new ModuleCode(VALID_MODULE_CODE_CS1231));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(command, model, String.format(AddEventCommand.MESSAGE_SUCCESS, event), expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_duplicateEvent_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNasaBook(), model.getHistoryBook(), model.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        AddEventCommand command \u003d new AddEventCommand(event,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            new ModuleCode(VALID_MODULE_CODE_CS1231));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.addActivity(module, event);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(CommandException.class, AddEventCommand.MESSAGE_DUPLICATED_ACTIVITY, () -\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            command.execute(expectedModel));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_nullDeadline_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddEventCommand(null,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                new ModuleCode(VALID_MODULE_CODE_CS1231)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_nullModuleCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Event event \u003d new EventBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddEventCommand(event, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "EdmondOng": 4,
      "kester-ng": 59
    }
  },
  {
    "path": "src/test/java/nasa/logic/commands/addcommands/AddLessonCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.commands.addcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.HistoryBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Lesson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddLessonCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private Module module;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        model \u003d new ModelManager(new NasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        module \u003d new Module(new ModuleCode(VALID_MODULE_CODE_CS1231), new ModuleName(VALID_MODULE_NAME_CS1231));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        model.addModule(module);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_newLesson_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new NasaBook(), new HistoryBook\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        expectedModel.addModule(new ModuleCode(VALID_MODULE_CODE_CS1231), new ModuleName(VALID_MODULE_NAME_CS1231));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.addActivity(module, lesson);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddLessonCommand command \u003d new AddLessonCommand(lesson, new ModuleCode(VALID_MODULE_CODE_CS1231));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertCommandSuccess(command, model, String.format(AddDeadlineCommand.MESSAGE_SUCCESS, lesson), expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void execute_duplicateLesson_failure() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getNasaBook(), model.getHistoryBook(), model.getUserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddLessonCommand command \u003d new AddLessonCommand(lesson, new ModuleCode(VALID_MODULE_CODE_CS1231));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        expectedModel.addActivity(module, lesson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(CommandException.class, AddDeadlineCommand.MESSAGE_DUPLICATED_ACTIVITY, ()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            -\u003e command.execute(expectedModel));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_nullDeadline_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddLessonCommand(null,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                new ModuleCode(VALID_MODULE_CODE_CS1231)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_nullModuleCode_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Lesson lesson \u003d new LessonBuilder().build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddLessonCommand(lesson, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 7,
      "EdmondOng": 5,
      "kester-ng": 58
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/AddModuleCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2030;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS1231;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddModuleCommandParserTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private AddModuleCommandParser parser \u003d new AddModuleCommandParser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // create the the cs1231 module, contains empty list"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module cs1231 \u003d new Module(new ModuleCode(VALID_MODULE_CODE_CS1231), new ModuleName(VALID_MODULE_NAME_CS1231));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MODULE_CODE_DESC_CS1231 + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                new AddModuleCommand(cs1231));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // multiple module codes - only the last one is taken into account"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS2030 + MODULE_CODE_DESC_CS1231 + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                new AddModuleCommand(cs1231));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // multiple module names - only the last one is taken into account"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231 + MODULE_NAME_DESC_CS2030 + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                new AddModuleCommand(cs1231));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                // multiple tags - all accepted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                new AddModuleCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing module code prefix"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, MODULE_NAME_DESC_CS1231, expectedMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing module name prefix"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231, expectedMessage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, VALID_MODULE_CODE_CS1231 + VALID_MODULE_NAME_CS1231,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid module name"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + INVALID_MODULE_NAME_DESC,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC + INVALID_MODULE_NAME_DESC,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + MODULE_CODE_DESC_CS1231"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                        + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 43,
      "kester-ng": 45,
      "don-tay": 11
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /** Also covers: testing for prefixes not specified as a prefix **/"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/CommandParserTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/DeleteActivityCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DeleteActivityCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteActivityCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private DeleteActivityCommandParser parser \u003d new DeleteActivityCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_validArgs_returnsDeleteActivityCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseSuccess(parser, \"1\" + MODULE_CODE_DESC_CS1231, new DeleteActivityCommand(Index.fromOneBased(1),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                moduleCode));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no module stated in the user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                DeleteActivityCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no index stated at all"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                DeleteActivityCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // incorrect module code"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                DeleteActivityCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "kester-ng": 25,
      "don-tay": 11
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/DeleteModuleCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.DeleteModuleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class DeleteModuleCommandParserTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private DeleteModuleCommandParser parser \u003d new DeleteModuleCommandParser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231); // dummy module"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_validArgs_returnsDeleteModuleCommand() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231, new DeleteModuleCommand(moduleCode));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // no PREFIX_MODULE"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid argument"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                DeleteModuleCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 11,
      "kester-ng": 24,
      "don-tay": 7
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/EditActivityCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.ACTIVITY_NAME_DESC_EXAM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.ACTIVITY_NAME_DESC_HWK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DATE_DESC_TEST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DATE_DESC_TEST_2;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_ACTIVITY_NAME_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_NOTES_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2030;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.NOTES_DESC_TEST;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.NOTES_DESC_TEST_2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.PRIORITY_DESC_HIGH;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.PRIORITY_DESC_LOW;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_EXAM;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_HWK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2030;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_NOTES_TEST_2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_PRIORITY_LOW;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.testutil.TypicalIndexes.INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.testutil.TypicalIndexes.INDEX_SECOND_ACTIVITY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.testutil.TypicalIndexes.INDEX_THIRD_ACTIVITY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.EditActivityCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.EditActivityCommand.EditActivityDescriptor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.EditActivityDescriptorBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditActivityCommandParserTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditActivityCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private EditActivityCommandParser parser \u003d new EditActivityCommandParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, VALID_MODULE_CODE_CS1231 + ACTIVITY_NAME_DESC_EXAM, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // no module code specified"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1\" + ACTIVITY_NAME_DESC_EXAM, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1\" + MODULE_CODE_DESC_CS2030, EditActivityCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"-5\" + MODULE_CODE_DESC_CS2030 + ACTIVITY_NAME_DESC_EXAM,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                 MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"0\" + MODULE_CODE_DESC_CS1231 + PRIORITY_DESC_HIGH, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1 \" + MODULE_CODE_DESC_CS2030 + \" i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid target module code"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MODULE_DESC + VALID_ACTIVITY_NAME_EXAM,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1\" + MODULE_CODE_DESC_CS2030 + INVALID_ACTIVITY_NAME_DESC,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1\" + MODULE_CODE_DESC_CS2030 + INVALID_DATE_DESC,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1\" + MODULE_CODE_DESC_CS2030 + INVALID_NOTES_DESC,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Note.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1\" + MODULE_CODE_DESC_CS2030 + INVALID_PRIORITY_DESC,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid priority followed by valid activity name"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1\" + MODULE_CODE_DESC_CS2030 + INVALID_PRIORITY_DESC"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + VALID_ACTIVITY_NAME_EXAM, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1\" + MODULE_CODE_DESC_CS2030 + VALID_PRIORITY_HIGH + INVALID_PRIORITY_DESC,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1\" + MODULE_CODE_DESC_CS2030 + INVALID_PRIORITY_DESC + INVALID_NOTES_DESC"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                        + VALID_ACTIVITY_NAME_EXAM + VALID_DATE_TEST, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_ACTIVITY;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MODULE_CODE_DESC_CS2030 + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + PRIORITY_DESC_HIGH + ACTIVITY_NAME_DESC_EXAM;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withDate(VALID_DATE_TEST).withNote(VALID_NOTES_TEST)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withPriority(VALID_PRIORITY_HIGH).withName(VALID_ACTIVITY_NAME_EXAM).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityCommand expectedCommand \u003d new EditActivityCommand(targetIndex, targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + MODULE_CODE_DESC_CS2030 + DATE_DESC_TEST + NOTES_DESC_TEST;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder().withDate(VALID_DATE_TEST)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withNote(VALID_NOTES_TEST).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityCommand expectedCommand \u003d new EditActivityCommand(targetIndex, targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_ACTIVITY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String preamble \u003d targetIndex.getOneBased() + MODULE_CODE_DESC_CS2030;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d preamble + ACTIVITY_NAME_DESC_HWK;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder().withName(VALID_ACTIVITY_NAME_HWK)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityCommand expectedCommand \u003d new EditActivityCommand(targetIndex, targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        userInput \u003d preamble + DATE_DESC_TEST;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor \u003d new EditActivityDescriptorBuilder().withDate(VALID_DATE_TEST).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        expectedCommand \u003d new EditActivityCommand(targetIndex, targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // note"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        userInput \u003d preamble + NOTES_DESC_TEST;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor \u003d new EditActivityDescriptorBuilder().withNote(VALID_NOTES_TEST).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        expectedCommand \u003d new EditActivityCommand(targetIndex, targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // priority"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        userInput \u003d preamble + PRIORITY_DESC_HIGH;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor \u003d new EditActivityDescriptorBuilder().withPriority(VALID_PRIORITY_HIGH).build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        expectedCommand \u003d new EditActivityCommand(targetIndex, targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String preamble \u003d targetIndex.getOneBased() + MODULE_CODE_DESC_CS2030;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d preamble + ACTIVITY_NAME_DESC_HWK + DATE_DESC_TEST + NOTES_DESC_TEST + PRIORITY_DESC_HIGH"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + ACTIVITY_NAME_DESC_EXAM + DATE_DESC_TEST_2 + NOTES_DESC_TEST_2 + PRIORITY_DESC_LOW;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder().withName(VALID_ACTIVITY_NAME_EXAM)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withDate(VALID_DATE_TEST_2).withNote(VALID_NOTES_TEST_2).withPriority(VALID_PRIORITY_LOW)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityCommand expectedCommand \u003d new EditActivityCommand(targetIndex, targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_ACTIVITY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String preamble \u003d targetIndex.getOneBased() + MODULE_CODE_DESC_CS2030;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d preamble + INVALID_ACTIVITY_NAME_DESC + ACTIVITY_NAME_DESC_EXAM;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityDescriptor descriptor \u003d new EditActivityDescriptorBuilder().withName(VALID_ACTIVITY_NAME_EXAM)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditActivityCommand expectedCommand \u003d new EditActivityCommand(targetIndex, targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        userInput \u003d preamble + INVALID_NOTES_DESC + ACTIVITY_NAME_DESC_EXAM + NOTES_DESC_TEST + DATE_DESC_TEST"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + PRIORITY_DESC_LOW;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor \u003d new EditActivityDescriptorBuilder().withName(VALID_ACTIVITY_NAME_EXAM).withDate(VALID_DATE_TEST)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withNote(VALID_NOTES_TEST).withPriority(VALID_PRIORITY_LOW).build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        expectedCommand \u003d new EditActivityCommand(targetIndex, targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "don-tay": 225
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/EditModuleCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_NAME_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS2030;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS1231;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS2030;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS1231;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS2030;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.EditModuleCommand.EXCESS_MODULE_CODE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.EditModuleCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.testutil.EditModuleDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditModuleCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private EditModuleCommandParser parser \u003d new EditModuleCommandParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // no existing module code specified"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, MODULE_NAME_DESC_CS2030 , MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid module code to be edited specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, \"i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String validPreamble \u003d MODULE_CODE_DESC_CS2030.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + INVALID_MODULE_NAME_DESC,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleName.MESSAGE_CONSTRAINTS); // invalid module name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + INVALID_MODULE_DESC,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS); // invalid module code"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid module code followed by valid name"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + INVALID_MODULE_DESC + MODULE_NAME_DESC_CS1231,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // invalid module name followed by valid module code"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + INVALID_MODULE_NAME_DESC + MODULE_CODE_DESC_CS1231,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // two module codes input (in addition to preamble)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + MODULE_CODE_DESC_CS1231 + MODULE_CODE_DESC_CS2030,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                EXCESS_MODULE_CODE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // multiple invalid values, but module code errors are always caught before module name errors"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, validPreamble + INVALID_MODULE_NAME_DESC + INVALID_MODULE_DESC,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String validPreamble \u003d MODULE_CODE_DESC_CS2030.trim();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d validPreamble + MODULE_CODE_DESC_CS1231 + MODULE_NAME_DESC_CS1231;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withModuleName(VALID_MODULE_NAME_CS1231)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_CS1231).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand expectedCommand \u003d new EditModuleCommand(targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String validPreamble \u003d MODULE_CODE_DESC_CS2030.trim();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // edit module code only"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d validPreamble + MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_CS1231).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand expectedCommand \u003d new EditModuleCommand(targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        // edit module name only"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        userInput \u003d validPreamble + MODULE_NAME_DESC_CS1231;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor \u003d new EditModuleDescriptorBuilder().withModuleName(VALID_MODULE_NAME_CS1231).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        expectedCommand \u003d new EditModuleCommand(targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_multipleRepeatedModuleNames_acceptsLast() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String validPreamble \u003d MODULE_CODE_DESC_CS2030.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d validPreamble + MODULE_CODE_DESC_CS1231 + MODULE_NAME_DESC_CS1231 + MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withModuleName(VALID_MODULE_NAME_CS2030)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_CS1231).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand expectedCommand \u003d new EditModuleCommand(targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public void parse_invalidModuleNameFollowedByValidModuleName_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String validPreamble \u003d MODULE_CODE_DESC_CS2030.trim();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        ModuleCode targetModuleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS2030);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        String userInput \u003d validPreamble + MODULE_CODE_DESC_CS1231 + INVALID_MODULE_NAME_DESC + MODULE_NAME_DESC_CS1231"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + MODULE_NAME_DESC_CS2030;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleDescriptor descriptor \u003d new EditModuleDescriptorBuilder().withModuleName(VALID_MODULE_NAME_CS2030)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                .withModuleCode(VALID_MODULE_CODE_CS1231).build();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        EditModuleCommand expectedCommand \u003d new EditModuleCommand(targetModuleCode, descriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "don-tay": 147
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/FindCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "-": 25
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/NasaBookParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class NasaBookParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private final NasaBookParser parser \u003d new NasaBookParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        AddModuleCommand command \u003d (AddModuleCommand) parser.parseCommand(ModuleUtil.getAddModuleCommand(module));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(new AddModuleCommand(module), command);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            DeleteModuleCommand command \u003d (DeleteModuleCommand) parser.parseCommand("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    DeleteModuleCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            assertEquals(new DeleteModuleCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    + INDEX_FIRST_PERSON.getOneBased() + \" \" + ModuleUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 91
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_DATE \u003d \"2020-12-20 12:59\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_ACTIVITY_NAME \u003d \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_NOTE \u003d \"\\t\\r\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_PRIORITY \u003d \"-2\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_MODULE_NAME \u003d \"C@!;\u0027[]\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String VALID_DATE \u003d \"20-08-2020 23:59\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String VALID_ACTIVITY_NAME \u003d \"CS2103T TP\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String VALID_NOTE \u003d \"Finish milestone v1.2 by next wednesday.\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + \"prepare for new features.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String VALID_PRIORITY \u003d \"3\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private static final String VALID_MODULE_NAME \u003d \"Computer organisation\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseModuleName((String) null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseModuleName_validModuleNameWithoutWhitespaces_returnsModuleName() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ModuleName expectedModuleName \u003d new ModuleName(VALID_MODULE_NAME);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(expectedModuleName, ParserUtil.parseModuleName(VALID_MODULE_NAME));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseModuleName_validModuleNameWithWhitespaces_returnsModuleName() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String moduleNameWithWhitespaces \u003d WHITESPACE + VALID_MODULE_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ModuleName expectedModuleName \u003d new ModuleName(VALID_MODULE_NAME);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(expectedModuleName, ParserUtil.parseModuleName(moduleNameWithWhitespaces));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseModuleName_invalidModuleNameWithoutWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseModuleName(INVALID_MODULE_NAME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseModuleName_invalidModuleNameWithWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String moduleNameWithWhitespaces \u003d WHITESPACE + INVALID_MODULE_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseModuleName(moduleNameWithWhitespaces));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseDate_validDateWithoutWhitespaces_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseDate_validDateWithWhitespaces_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String dateWithWhiteSpace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(dateWithWhiteSpace));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseDate_invalidDateWithoutWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseDate_invalidDateWithWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String dateWithWhiteSpace \u003d WHITESPACE + INVALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(dateWithWhiteSpace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseActivityName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseActivityName(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseActivityName_validNameWithoutWhitespaces_returnsName() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name expectedName \u003d new Name(VALID_ACTIVITY_NAME);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseActivityName(VALID_ACTIVITY_NAME));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseActivityName_validNameWithWhitespaces_returnsName() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String nameWithWhiteSpaces \u003d WHITESPACE + VALID_ACTIVITY_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Name expectedName \u003d new Name(VALID_ACTIVITY_NAME);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseActivityName(nameWithWhiteSpaces));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseActivityName_invalidNameWithoutWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseActivityName(INVALID_ACTIVITY_NAME));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseActivityName_invalidNameWithWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String nameWithWhiteSpaces \u003d WHITESPACE + INVALID_ACTIVITY_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseActivityName(nameWithWhiteSpaces));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parseNote_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseNote(null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseNote_validNoteWithoutWhitespaces_returnsNote() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NOTE);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedNote, ParserUtil.parseNote(VALID_NOTE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseNote_validNoteWithWhitespaces_returnsNote() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String noteWithWhiteSpaces \u003d WHITESPACE + VALID_NOTE + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Note expectedNote \u003d new Note(VALID_NOTE);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedNote, ParserUtil.parseNote(noteWithWhiteSpaces));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseNote_invalidNoteWithoutWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNote(INVALID_NOTE));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parseNote_invalidNoteWithWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String noteWithWhiteSpaces \u003d WHITESPACE + INVALID_NOTE + WHITESPACE;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseNote(noteWithWhiteSpaces));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void parsePriority_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriority(null));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parsePriority_validPriorityWithoutWhitespaces_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(VALID_PRIORITY));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parsePriority_validPriorityWithWhitespaces_returnsPriority() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String priorityWithWhitespaces \u003d WHITESPACE + VALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Priority expectedPriority \u003d new Priority(VALID_PRIORITY);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(expectedPriority, ParserUtil.parsePriority(priorityWithWhitespaces));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parsePriority_invalidPriorityWithoutWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(INVALID_PRIORITY));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parsePriority_invalidPriorityWithWhitespaces_throwsParseException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String priorityWithWhitespaces \u003d WHITESPACE + INVALID_PRIORITY + WHITESPACE;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriority(priorityWithWhitespaces));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 74,
      "kester-ng": 122,
      "don-tay": 2
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/RepeatActivityCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.logic.commands.RepeatCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class RepeatActivityCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private RepeatActivityCommandParser parser \u003d new RepeatActivityCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Name nameOfActivity \u003d new Name(\"Project work\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Index index \u003d Index.fromZeroBased(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void commandParserTest() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertParseSuccess(parser, \" m/CS1231 a/Project work r/1\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "               new RepeatCommand(moduleCode, nameOfActivity, index));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 25
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/addcommandparser/AddDeadlineCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.ACTIVITY_NAME_DESC_HWK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DATE_DESC_TEST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_ACTIVITY_NAME_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_NOTES_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.NOTES_DESC_TEST;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.PRIORITY_DESC_HIGH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_HWK;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.addcommands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddDeadlineCommandParserTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private AddDeadlineCommandParser parser \u003d new AddDeadlineCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_allFieldPresent_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + PRIORITY_DESC_HIGH, new AddDeadlineCommand(DeadlineBuilder.ALL_FIELDS_PRESENT, moduleCode));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_compulsoryFieldsMissing_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddDeadlineCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing moduleCode"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, ACTIVITY_NAME_DESC_HWK + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing date prefix"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing activity name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, expectedMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // notes parameter missing"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK + DATE_DESC_TEST"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + PRIORITY_DESC_HIGH, new AddDeadlineCommand(DeadlineBuilder.NOTE_FIELD_MISSING,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                moduleCode));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // priority parameter missing"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK + DATE_DESC_TEST"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + NOTES_DESC_TEST, new AddDeadlineCommand(DeadlineBuilder.PRIORITY_FIELD_MISSING, moduleCode));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid module code"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC + ACTIVITY_NAME_DESC_HWK"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid activity name"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + INVALID_ACTIVITY_NAME_DESC"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + INVALID_DATE_DESC + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid Notes"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + DATE_DESC_TEST + INVALID_NOTES_DESC"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + PRIORITY_DESC_HIGH, Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid Priority"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_HWK"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + DATE_DESC_TEST + NOTES_DESC_TEST"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + INVALID_PRIORITY_DESC, Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class DeadlineBuilder {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Deadline ALL_FIELDS_PRESENT \u003d new Deadline(new Name(VALID_ACTIVITY_NAME_HWK),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        new Note(VALID_NOTES_TEST),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        new Priority(VALID_PRIORITY_HIGH), new Date(VALID_DATE_TEST));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Deadline NOTE_FIELD_MISSING \u003d new Deadline(new Name(VALID_ACTIVITY_NAME_HWK), null ,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        new Priority(VALID_PRIORITY_HIGH), new Date(VALID_DATE_TEST));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Deadline PRIORITY_FIELD_MISSING \u003d new Deadline(new Name(VALID_ACTIVITY_NAME_HWK),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new Note(VALID_NOTES_TEST), null, new Date(VALID_DATE_TEST));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kester-ng": 81,
      "don-tay": 31
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/addcommandparser/AddEventCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.ACTIVITY_NAME_DESC_EXAM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DATE_DESC_TEST_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DATE_DESC_TEST_TO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_ACTIVITY_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_DATE_FROM_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_DATE_TO_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_NOTES_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.NOTES_DESC_TEST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.PRIORITY_DESC_HIGH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_EXAM;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.addcommands.AddEventCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.testutil.EventBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddEventCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private AddEventCommandParser parser \u003d new AddEventCommandParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MODULE_CODE_DESC_CS1231"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + ACTIVITY_NAME_DESC_EXAM + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PRIORITY_DESC_HIGH + NOTES_DESC_TEST,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new AddEventCommand(new EventBuilder().build(), moduleCode));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_compulsoryFieldsMissing_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing module code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, ACTIVITY_NAME_DESC_EXAM + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PRIORITY_DESC_HIGH + NOTES_DESC_TEST, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing activity name"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PRIORITY_DESC_HIGH + NOTES_DESC_TEST, expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing from-date"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM + DATE_DESC_TEST_TO"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PRIORITY_DESC_HIGH + NOTES_DESC_TEST, expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // missing to-date"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM + DATE_DESC_TEST_FROM"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + PRIORITY_DESC_HIGH + NOTES_DESC_TEST, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // note field missing"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + DATE_DESC_TEST_FROM + DATE_DESC_TEST_TO + PRIORITY_DESC_HIGH,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            new AddEventCommand(EventTemplate.NOTE_FIELD_MISSING, moduleCode));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // priority field missing"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                + DATE_DESC_TEST_FROM + DATE_DESC_TEST_TO + NOTES_DESC_TEST,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            new AddEventCommand(EventTemplate.PRIORITY_FIELD_MISSING, moduleCode));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //invalid module code"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM + NOTES_DESC_TEST + PRIORITY_DESC_HIGH,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid activity name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + INVALID_ACTIVITY_NAME_DESC"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM + NOTES_DESC_TEST + PRIORITY_DESC_HIGH,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid date-from"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + INVALID_DATE_FROM_DESC + DATE_DESC_TEST_TO + NOTES_DESC_TEST + PRIORITY_DESC_HIGH,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid date-to"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + INVALID_DATE_TO_DESC + DATE_DESC_TEST_FROM + NOTES_DESC_TEST + PRIORITY_DESC_HIGH,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid note"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + DATE_DESC_TEST_FROM + DATE_DESC_TEST_TO + INVALID_NOTES_DESC + PRIORITY_DESC_HIGH,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_EXAM"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + DATE_DESC_TEST_FROM + DATE_DESC_TEST_TO + NOTES_DESC_TEST + INVALID_PRIORITY_DESC,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class EventTemplate {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Event NOTE_FIELD_MISSING \u003d new Event(new Name(VALID_ACTIVITY_NAME_EXAM), null,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        new Priority(VALID_PRIORITY_HIGH), new Date(VALID_DATE_TEST), new Date(VALID_DATE_TEST_2));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Event PRIORITY_FIELD_MISSING \u003d new Event(new Name(VALID_ACTIVITY_NAME_EXAM),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new Note(VALID_NOTES_TEST), null, new Date(VALID_DATE_TEST), new Date(VALID_DATE_TEST_2));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 14,
      "EdmondOng": 1,
      "kester-ng": 93,
      "don-tay": 17
    }
  },
  {
    "path": "src/test/java/nasa/logic/parser/addcommandparser/AddLessonCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "package nasa.logic.parser.addcommandparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.ACTIVITY_NAME_DESC_TUTORIAL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DATE_DESC_TEST_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.DATE_DESC_TEST_TO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_ACTIVITY_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_DATE_FROM_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_DATE_TO_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_MODULE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_NOTES_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.INVALID_PRIORITY_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.MODULE_CODE_DESC_CS1231;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.NOTES_DESC_TEST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.PRIORITY_DESC_HIGH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_CODE_CS1231;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_PRIORITY_HIGH;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.logic.commands.addcommands.AddLessonCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Lesson;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.testutil.LessonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class AddLessonCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private AddLessonCommandParser parser \u003d new AddLessonCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private ModuleCode moduleCode \u003d new ModuleCode(VALID_MODULE_CODE_CS1231);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + DATE_DESC_TEST_FROM + DATE_DESC_TEST_TO + PRIORITY_DESC_HIGH + NOTES_DESC_TEST,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            new AddLessonCommand(new LessonBuilder().build(), moduleCode));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_compulsoryFieldsMissing_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddLessonCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // module code missing"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertParseFailure(parser, ACTIVITY_NAME_DESC_TUTORIAL + DATE_DESC_TEST_FROM"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                + DATE_DESC_TEST_TO + PRIORITY_DESC_HIGH + NOTES_DESC_TEST, expectedMessage);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // activity name missing"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + DATE_DESC_TEST_FROM"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + DATE_DESC_TEST_TO + PRIORITY_DESC_HIGH + NOTES_DESC_TEST, expectedMessage);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // date-from missing"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + DATE_DESC_TEST_TO + PRIORITY_DESC_HIGH + NOTES_DESC_TEST, expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // date-to missing"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + DATE_DESC_TEST_FROM + PRIORITY_DESC_HIGH + NOTES_DESC_TEST, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // note parameter missing"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + DATE_DESC_TEST_FROM + DATE_DESC_TEST_TO + PRIORITY_DESC_HIGH,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            new AddLessonCommand(LessonTemplate.NOTE_FIELD_MISSING, moduleCode));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // priority field missing"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseSuccess(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_TUTORIAL + DATE_DESC_TEST_FROM"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                        + DATE_DESC_TEST_TO + NOTES_DESC_TEST,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            new AddLessonCommand(LessonTemplate.PRIORITY_FIELD_MISSING, moduleCode));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        //invalid module code"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertParseFailure(parser, INVALID_MODULE_DESC + ACTIVITY_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM + NOTES_DESC_TEST + PRIORITY_DESC_HIGH,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                ModuleCode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid activity name"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + INVALID_ACTIVITY_NAME_DESC"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            + DATE_DESC_TEST_TO + DATE_DESC_TEST_FROM + NOTES_DESC_TEST + PRIORITY_DESC_HIGH, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid date-from"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + INVALID_DATE_FROM_DESC + DATE_DESC_TEST_TO + NOTES_DESC_TEST + PRIORITY_DESC_HIGH,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid date-to"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + INVALID_DATE_TO_DESC + DATE_DESC_TEST_FROM + NOTES_DESC_TEST + PRIORITY_DESC_HIGH,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid note"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + DATE_DESC_TEST_FROM + DATE_DESC_TEST_TO + INVALID_NOTES_DESC + PRIORITY_DESC_HIGH,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Note.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertParseFailure(parser, MODULE_CODE_DESC_CS1231 + ACTIVITY_NAME_DESC_TUTORIAL"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            + DATE_DESC_TEST_FROM + DATE_DESC_TEST_TO + NOTES_DESC_TEST + INVALID_PRIORITY_DESC,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "don-tay"
        },
        "content": "                Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class LessonTemplate {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Lesson NOTE_FIELD_MISSING \u003d new Lesson(new Name(VALID_ACTIVITY_NAME_TUTORIAL), null,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        new Priority(VALID_PRIORITY_HIGH), new Date(VALID_DATE_TEST), new Date(VALID_DATE_TEST_2));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Lesson PRIORITY_FIELD_MISSING \u003d new Lesson(new Name(VALID_ACTIVITY_NAME_TUTORIAL),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        new Note(VALID_NOTES_TEST), null, new Date(VALID_DATE_TEST), new Date(VALID_DATE_TEST_2));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 14,
      "EdmondOng": 1,
      "kester-ng": 90,
      "don-tay": 18
    }
  },
  {
    "path": "src/test/java/nasa/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.model.Model.PREDICATE_SHOW_ALL_MODULES;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2106;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.GEH1001;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalNasaBook.NASABOOK_TYPE_1;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.NasaBookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class ModelManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager(NASABOOK_TYPE_1, new HistoryBook\u003cUniqueModuleList\u003e(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void initialisation() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.getNasaBook().equals(NASABOOK_TYPE_1));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.hasModule(new ModuleCode(\"CS2103T\")));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.hasModule(new ModuleCode(\"GEH1001\")));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.hasModule(new ModuleCode(\"CS2106\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void getFilteredActivityListTest() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ObservableList\u003cActivity\u003e list \u003d modelManager.getFilteredActivityList(new ModuleCode(\"CS2103T\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        System.out.println(list.get(0).getName().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertEquals(\"Homework\", list.get(0).getName().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertEquals(\"Test\", list.get(1).getName().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertEquals(\"Prepare group meeting\", list.get(2).getName().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertEquals(\"Exam\", list.get(3).getName().toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertEquals(\"MPSH\", list.get(4).getName().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        modelManager.deleteModule(GEH1001);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        modelManager.deleteModule(CS2103T);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        modelManager.deleteModule(CS2106);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(new NasaBook(), new NasaBook(modelManager.getNasaBook()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        userPrefs.setNasaBookFilePath(Paths.get(\"nasa/book/file/path\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        userPrefs.setNasaBookFilePath(Paths.get(\"new/nasa/book/file/path\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setNasaBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setNasaBookFilePath(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void setNasaBookFilePath_validPath_setsNasaBookFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Path path \u003d Paths.get(\"nasa/book/file/path\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        modelManager.setNasaBookFilePath(path);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(path, modelManager.getNasaBookFilePath());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasModule((nasa.model.module.Module) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_moduleNotInNasaBook_returnsFalse() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        modelManager.deleteModule(GEH1001);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(modelManager.hasModule(GEH1001));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_personInNasaBook_returnsTrue() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(modelManager.hasModule(GEH1001));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getFilteredModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredModuleList().remove(0));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        NasaBook nasaBook \u003d new NasaBookBuilder().build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        NasaBook differentNasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        modelManager \u003d new ModelManager(nasaBook, new HistoryBook\u003c\u003e(), userPrefs);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(nasaBook, new HistoryBook\u003c\u003e(), userPrefs);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentNasaBook, new HistoryBook\u003c\u003e(), userPrefs)));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        String[] keywords \u003d GEH1001.getModuleName().toString().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //modelManager.updateFilteredModuleList((Predicate) new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //assertFalse(modelManager.equals(new ModelManager(nasaBook, userPrefs)));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        modelManager.updateFilteredModuleList(PREDICATE_SHOW_ALL_MODULES);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        differentUserPrefs.setNasaBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(nasaBook, new HistoryBook\u003c\u003e(), differentUserPrefs)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 20,
      "EdmondOng": 83,
      "-": 58,
      "kester-ng": 1
    }
  },
  {
    "path": "src/test/java/nasa/model/NasaBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_MODULE_NAME_CS2030;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalActivities.DEADLINE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2106;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.exceptions.DuplicateModuleException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class NasaBookTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final NasaBook nasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(Collections.emptyList(), nasaBook.getModuleList());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e nasaBook.resetData(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void resetData_withValidReadOnlyNasaBook_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook newData \u003d getTypicalNasaBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBook.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(newData, nasaBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void resetData_withDuplicateModules_throwsDuplicateModuleException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // Two Modules with the same identity fields\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module editedcs2103t \u003d new ModuleBuilder().withCode(\"CS2103T\").withName(\"SOFTWARE ENGINEERING\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        List\u003cModule\u003e newModules \u003d Arrays.asList(CS2103T, editedcs2103t);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBookStub newData \u003d new NasaBookStub(newModules);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(DuplicateModuleException.class, () -\u003e nasaBook.resetData(newData));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_nullModule_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e nasaBook.hasModule((nasa.model.module.Module) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_moduleNotInNasaBook_returnsFalse() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(nasaBook.hasModule(CS2103T));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_moduleInNasaBook_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(nasaBook.hasModule(CS2103T));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void hasModule_moduleWithSameIdentityFieldsInNasaBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module editedcs2103t \u003d new ModuleBuilder(CS2103T).withName(VALID_MODULE_NAME_CS2030)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(nasaBook.hasModule(editedcs2103t));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getModuleList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e nasaBook.getModuleList().remove(0));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void addModule() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(nasaBook.hasModule(CS2103T));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void addActivity() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addActivity(CS2103T, DEADLINE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(nasaBook.hasActivity(CS2103T, DEADLINE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void removeActivity() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addActivity(CS2103T, DEADLINE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.removeActivity(CS2103T, DEADLINE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(nasaBook.hasActivity(CS2103T, DEADLINE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void removeModuleByIndex() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(CS2103T);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.addModule(CS2106);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        nasaBook.removeModuleByIndex(Index.fromZeroBased(1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(nasaBook.hasModule(CS2103T));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(nasaBook.hasModule(CS2106));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * A stub ReadOnlyNasaBook whose Modules list can violate interface constraints."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static class NasaBookStub implements ReadOnlyNasaBook {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        private final ObservableList\u003cModule\u003e modules \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        NasaBookStub(Collection\u003cModule\u003e modules) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            this.modules.setAll(modules);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        public ObservableList\u003cModule\u003e getModuleList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        public UniqueModuleList getUniqueModuleList() { // stub"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "don-tay"
        },
        "content": "            return new UniqueModuleList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        public ObservableList\u003cModule\u003e getDeepCopyList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            return modules;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 86,
      "EdmondOng": 44,
      "kester-ng": 7,
      "don-tay": 8
    }
  },
  {
    "path": "src/test/java/nasa/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setNasaBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 18
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/DateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // null Date"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid Dates"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Date.isValidDate(\"30-02-2020\")); // invalid date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-02-2020 12:00\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(Date.isValidDate(\"29-02-2020\")); //no time;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // valid Dates"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Date.isValidDate(\"29-02-2020 23:59\")); //leap year"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(Date.isValidDate(\"29-2-2020 23:59\")); //leap year"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(Date.isValidDate(\"12-03-2020 20:00\")); //leap year"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void getDifferenceInDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Date dateNoOne \u003d new Date(\"20-04-2020 23:59\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Date dateNoTwo \u003d new Date(\"19-04-2020 01:00\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        long[] difference \u003d dateNoOne.getDifference(dateNoTwo);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        for (long x : difference) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            System.out.println(x);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void testToString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void testEquals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    void testHashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "EdmondOng": 13,
      "kester-ng": 48
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/DeadlineTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalActivities.DEADLINE_LATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.testutil.Assert;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class DeadlineTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void create_deadline() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline subject \u003d new Deadline(new Name(\"Test\"), new Date(\"20-04-2020 03:00\"), new Note(\"Practice\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        subject.updateStatus();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(subject.isLate());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void check_format_deadline() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                new Deadline(new Name(\"Test\"), new Date(\"20-04-2019 03:00\"), new Note(\"Practice\")));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    void set_due_date() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Date date \u003d new Date(\"19-03-2020 03:00\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline subject \u003d (Deadline) DEADLINE_LATE;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertFalse(subject.getDueDate().equals(date));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        subject.setDueDate(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        assertTrue(subject.getDueDate().equals(date));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 28,
      "kester-ng": 4,
      "don-tay": 4
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/EventTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalActivities.CORRECT_EVENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalActivities.PAST_EVENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalActivities.WRONG_EVENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " * An EventTest class to test the functionality of Event."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class EventTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void isValidEvent() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //invalid date sequence"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(Event.isValidEvent(WRONG_EVENT));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //invalid date expired"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(Event.isValidEvent(PAST_EVENT));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //valid date sequence"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(Event.isValidEvent(CORRECT_EVENT));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 28
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/NameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(Name.isValidName(\"\\t\\t\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(Name.isValidName(\"run*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Name.isValidName(\"tutorial\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Name.isValidName(\"cs2103 tutorial\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Name.isValidName(\"tP\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(Name.isValidName(\"Studying for cs2103 finals\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 33,
      "kester-ng": 6
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/NoteTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class NoteTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void isValidNote_validNote_true() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        boolean result \u003d Note.isValidNote(\"Remember to update UG and DG!\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(true, result);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void isValidNote_invalidNote_false() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         * Test for empty string, or whitespace characters"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Note.isValidNote(\"       \"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Note.isValidNote(\"\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Note.isValidNote(\"\\t\\t\\n\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void note_validInstantiation_noException() throws IllegalArgumentException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        Note note \u003d new Note(\"Update UG and DG!\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d new Note(\"ABC\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d new Note(\"\\t\\t\\tThe best in the world!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d new Note(\"\\n\\t\\nUpdate website headings!\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        note \u003d new Note(\"..........\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void note_invalidInstantiation_exceptionThrown() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            Note note \u003d new Note(\"            \\t\\n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            fail();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            assertEquals(\"java.lang.IllegalArgumentException: \" + Note.MESSAGE_CONSTRAINTS, e.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 43
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/PriorityTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class PriorityTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void isValidPriorityValue() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // valid priority"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(true, Priority.isValidPriorityValue(\"3\"));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertEquals(true, Priority.isValidPriorityValue(\"1\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid priority"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"2.0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"3.5\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"-1\"));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"10\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertEquals(false, Priority.isValidPriorityValue(\"a\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_invalidNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid number beyond range of 1 to 5 inclusive"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"6\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"0\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"-3\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"20\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid number: non-numeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"d\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(\"testing string\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 1,
      "kester-ng": 34
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/ScheduleTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class ScheduleTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    final Date date \u003d new Date(\"10-03-2020 03:00\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    final Date temp \u003d date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    final Schedule schedule \u003d new Schedule(date);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void initialisation_test() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        schedule.setType(1);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //System.out.println(schedule.getDate());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(Date.now().isBefore(schedule.getDate()));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        schedule.setType(2);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //System.out.println(schedule.getDate());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(Date.now().isBefore(schedule.getDate()));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        schedule.setType(3);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(Date.now().isBefore(schedule.getDate()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        schedule.cancel();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertEquals(temp, schedule.getDate());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 31
    }
  },
  {
    "path": "src/test/java/nasa/model/activity/UniqueActivityListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalActivities.CORRECT_EVENT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalActivities.DEADLINE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * To test the UniqueActivity class."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "class UniqueActivityListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private final UniqueActivityList uniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UniqueActivityList newUniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void contains_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void contains_activityNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(uniqueActivityList.contains(DEADLINE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void contains_activityInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(uniqueActivityList.contains(DEADLINE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivity_test() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.setActivity(DEADLINE, CORRECT_EVENT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(uniqueActivityList.contains(CORRECT_EVENT));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void remove_test() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.remove(DEADLINE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(uniqueActivityList.contains(DEADLINE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void setActivities_test() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(CORRECT_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        newUniqueActivityList.add(CORRECT_EVENT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.setActivities(newUniqueActivityList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(uniqueActivityList.contains(DEADLINE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void checkUnmodifiableList_test() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(CORRECT_EVENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(uniqueActivityList.asUnmodifiableObservableList().size() \u003d\u003d 2);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void modifyUnmodifiableList_test() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        ObservableList\u003cActivity\u003e temp \u003d uniqueActivityList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e temp.add(CORRECT_EVENT));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public void getActivityByName() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueActivityList.add(DEADLINE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Activity activity \u003d uniqueActivityList.getActivityByName(new Name(\"Homework for tut\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertEquals(DEADLINE, activity);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "EdmondOng": 52,
      "kester-ng": 32
    }
  },
  {
    "path": "src/test/java/nasa/model/module/ModuleCodeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ModuleCodeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleCode(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_invalidModuleCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String invalidModuleCode \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleCode(invalidModuleCode));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void isValidModuleCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // null moduleCode"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleCode.isValidModuleCode(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // invalid moduleCode"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"run*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertFalse(ModuleCode.isValidModuleCode(\"cs2103 finals\")); // module code with whitespace"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        // valid moduleCode"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"tutorial\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"CS2103T\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertTrue(ModuleCode.isValidModuleCode(\"tP\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "kester-ng": 39
    }
  },
  {
    "path": "src/test/java/nasa/model/module/ModuleNameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ModuleNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleName(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void isValidModuleName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ModuleName.isValidModuleName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // invalid module name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // No special characters, only whitespaces or empty strings"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"123@@*\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(ModuleName.isValidModuleName(\"\\t\\t\\t\\n\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // valid module name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"Econometrics\")); // alphabets only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"Software Engineering\")); // with capital letters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(ModuleName.isValidModuleName(\"Programming Methodology II\")); // long names"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 32,
      "kester-ng": 12
    }
  },
  {
    "path": "src/test/java/nasa/model/module/ModuleTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2106;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.testutil.ModuleBuilder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class ModuleTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ModuleCode(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void constructor_invalidModuleCode_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        String invalidModuleCode \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ModuleCode(invalidModuleCode));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module module \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e module.getTags().remove(0));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void isSameModule() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.isSameModule(CS2103T);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.isSameModule(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module editedAlice \u003d new ModuleBuilder(CS2103T).withPhone(VALID_PHONE_CS2101).withEmail(VALID_EMAIL_CS2101)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        .build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(CS2103T).withName(VALID_NAME_CS2101).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(CS2103T).withEmail(VALID_EMAIL_CS2101).withAddress(VALID_ADDRESS_CS2101)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(CS2103T).withPhone(VALID_PHONE_CS2101).withAddress(VALID_ADDRESS_CS2101)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(CS2103T).withAddress(VALID_ADDRESS_CS2101).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.isSameModule(editedAlice));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //TODO: Add test method for equals, similar idea to ModuleTest"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module cs2103tCopy \u003d new ModuleBuilder().withCode(\"CS2103T\").withName(\"SOFTWARE ENGINEERING\").build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.equals(cs2103tCopy));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.equals(CS2103T));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.equals(null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.equals(5));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different module -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.equals(CS2106));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different code-\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Module editedcs2103t \u003d new ModuleBuilder().withCode(\"CS2113\").build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.equals(editedcs2103t));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedcs2103t \u003d new ModuleBuilder().withName(\"Object Oriented Programming\").build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertTrue(CS2103T.equals(editedcs2103t));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        editedAlice \u003d new ModuleBuilder(CS2103T).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(CS2103T.equals(editedAlice));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "         */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 82,
      "kester-ng": 22
    }
  },
  {
    "path": "src/test/java/nasa/model/module/UniqueModuleListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.model.module;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.testutil.TypicalActivities.DEADLINE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2106;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.GEH1001;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "class UniqueModuleListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UniqueModuleList uniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private final UniqueModuleList newUniqueModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void contains() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(uniqueModuleList.contains(CS2103T));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setModule() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void remove() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.remove(CS2103T);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(uniqueModuleList.contains(CS2103T));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setModules() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.setModule(CS2103T, CS2106);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(uniqueModuleList.contains(CS2103T));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(uniqueModuleList.contains(CS2106));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void testSetModules() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        newUniqueModuleList.add(GEH1001);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.setModules(newUniqueModuleList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(uniqueModuleList.contains(GEH1001));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(uniqueModuleList.contains(CS2103T));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void setActivityByIndex() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        DEADLINE.setNote(new Note(\"HELLO WORLD\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(GEH1001);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //Task 2 of GEH1001 notes is \"Final Essay\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Index index \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.setActivityByIndex(GEH1001, index, DEADLINE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(uniqueModuleList.getModule(GEH1001).contains(DEADLINE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void editActivityByIndex() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(GEH1001);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        //Task 2 of GEH1001 notes is \"Final Essay\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Note note \u003d new Note(\"Hello world\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Index index \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.editActivityByIndex(GEH1001, index, note);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Activity activity \u003d uniqueModuleList.getModule(GEH1001).getActivityByIndex(index);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(activity.getNote().equals(note));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    void getModule() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        uniqueModuleList.add(CS2103T);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertTrue(CS2103T.equals(uniqueModuleList.getModule(CS2103T)));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        assertFalse(CS2106.equals(uniqueModuleList.getModule(CS2103T)));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 79,
      "kester-ng": 5
    }
  },
  {
    "path": "src/test/java/nasa/storage/JsonAdaptedModuleTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.storage.JsonAdaptedModule.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class JsonAdaptedModuleTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_CODE \u003d \"CS@\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String INVALID_NAME \u003d \"#name\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    //private static final String INVALID_ACTIVITY \u003d \"#friend\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final String VALID_NAME \u003d CS2103T.getModuleCode().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final List\u003cJsonAdaptedActivity\u003e VALID_ACTIVITIES \u003d CS2103T.getActivities().getActivityList().stream()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            .map(JsonAdaptedActivity::new)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_validModuleDetails_returnsModule() throws Exception {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(CS2103T);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(CS2103T, module.toModelType());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_invalidCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                new JsonAdaptedModule(INVALID_CODE, VALID_NAME, VALID_ACTIVITIES);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d ModuleCode.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_nullCode_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(null, VALID_NAME, VALID_ACTIVITIES);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleCode.class.getSimpleName());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedModule module \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                new JsonAdaptedModule(VALID_CODE, INVALID_NAME, VALID_ACTIVITIES);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d ModuleName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedModule module \u003d new JsonAdaptedModule(VALID_CODE, null, VALID_ACTIVITIES);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ModuleName.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, module::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_invalidActivities_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        List\u003cJsonAdaptedActivity\u003e invalidActivities \u003d new ArrayList\u003c\u003e(VALID_ACTIVITIES);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        invalidActivities.add(new JsonAdaptedActivity(INVALID_ACTIVITY));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonAdaptedModule Module \u003d"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                new JsonAdaptedModule(VALID_CODE, VALID_NAME, invalidActivities);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, Module::toModelType);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 44,
      "-": 31
    }
  },
  {
    "path": "src/test/java/nasa/storage/JsonNasaBookStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2103T;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.GEH1001;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class JsonNasaBookStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            \"JsonNasaBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void readNasaBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readNasaBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyNasaBook\u003e readNasaBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new JsonNasaBookStorage(Paths.get(filePath),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "                Paths.get(filePath)).readNasaBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertFalse(readNasaBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readNasaBook(\"notJsonFormatNasaBook.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void readNasaBook_invalidModuleNasaBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readNasaBook(\"invalidModuleNasaBook.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void readNasaBook_invalidAndValidModuleNasaBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readNasaBook(\"invalidAndValidModuleNasaBook.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void readAndSaveNasaBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempNasaBook.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Path filePathTwo \u003d testFolder.resolve(\"TempHistoryBook.json\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook original \u003d getTypicalNasaBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        JsonNasaBookStorage jsonNasaBookStorage \u003d new JsonNasaBookStorage(filePath, filePathTwo);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        jsonNasaBookStorage.saveNasaBook(original, filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ReadOnlyNasaBook readBack \u003d jsonNasaBookStorage.readNasaBook(filePath).get();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(original, new NasaBook(readBack));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        original.addModule(GEH1001);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        original.removeModule(CS2103T);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        jsonNasaBookStorage.saveNasaBook(original, filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        readBack \u003d jsonNasaBookStorage.readNasaBook(filePath).get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(original, new NasaBook(readBack));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        original.addModule(CS2103T);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        jsonNasaBookStorage.saveNasaBook(original); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        readBack \u003d jsonNasaBookStorage.readNasaBook().get(); // file path not specified"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(original, new NasaBook(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook_nullNasaBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveNasaBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Saves {@code NasaBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private void saveNasaBook(ReadOnlyNasaBook nasaBook, String filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            new JsonNasaBookStorage(Paths.get(filePath), Paths.get(filePath))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                    .saveNasaBook(nasaBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void saveNasaBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveNasaBook(new NasaBook(), null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 40,
      "EdmondOng": 7,
      "-": 65
    }
  },
  {
    "path": "src/test/java/nasa/storage/JsonSerializableNasaBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class JsonSerializableNasaBookTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableNasaBookTest\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Path TYPICAL_MODULES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalModulesNasaBook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Path INVALID_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidModuleNasaBook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    private static final Path DUPLICATE_MODULE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateModuleNasaBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_typicalModulesFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonSerializableNasaBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_MODULES_FILE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonSerializableNasaBook.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook nasaBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook typicalModulesNasaBook \u003d TypicalModules.getTypicalNasaBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(nasaBookFromFile, typicalModulesNasaBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_invalidModuleFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonSerializableNasaBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_MODULE_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonSerializableNasaBook.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void toModelType_duplicateModules_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        JsonSerializableNasaBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_MODULE_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                JsonSerializableNasaBook.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableNasaBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 26,
      "-": 22
    }
  },
  {
    "path": "src/test/java/nasa/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        userPrefs.setNasaBookFilePath(Paths.get(\"data/nasabook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/nasa/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.TypicalModules.getTypicalNasaBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.ReadOnlyNasaBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "        JsonNasaBookStorage nasaBookStorage \u003d new JsonNasaBookStorage(getTempFilePath(\"ab\"), getTempFilePath(\"cd\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        storageManager \u003d new StorageManager(nasaBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void nasaBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         * {@link JsonNasaBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonNasaBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook original \u003d getTypicalNasaBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        storageManager.saveNasaBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        ReadOnlyNasaBook retrieved \u003d storageManager.readNasaBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertEquals(original, new NasaBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public void getNasaBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        assertNotNull(storageManager.getNasaBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 16,
      "-": 51,
      "kester-ng": 1
    }
  },
  {
    "path": "src/test/java/nasa/testutil/Assert.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/nasa/testutil/DeadlineBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Deadline;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class to help build example deadlines."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class DeadlineBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Homework\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"19-10-2020 03:00\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_NOTE \u003d \"Take note of qns2\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_DUE_DATE \u003d \"13-11-2020 03:00\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date dueDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise default name, date and note for an activity to test."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DeadlineBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        note \u003d new Note(DEFAULT_NOTE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        dueDate \u003d new Date(DEFAULT_DUE_DATE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initializes the DeadlineBuilder with the data of {@code activityToCopy}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DeadlineBuilder(Object activityToCopy) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Deadline activity \u003d (Deadline) activityToCopy;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d activity.getName();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        date \u003d activity.getDate();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        note \u003d activity.getNote();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        dueDate \u003d activity.getDueDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Name} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DeadlineBuilder withName(String name) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Date} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DeadlineBuilder withDate(String date) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Date} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DeadlineBuilder withDueDate(String date) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.dueDate \u003d new Date(date);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Note} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public DeadlineBuilder withNote(String note) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.note \u003d new Note(note);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Build an activity accordingly."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Deadline build() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new Deadline(name, dueDate, note);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 73,
      "kester-ng": 8,
      "don-tay": 1
    }
  },
  {
    "path": "src/test/java/nasa/testutil/EditActivityDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.EditActivityCommand.EditActivityDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.activity.Priority;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * A utility class to help with building EditActivityDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditActivityDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private EditActivityDescriptor descriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditActivityDescriptorBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor \u003d new EditActivityDescriptor();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditActivityDescriptorBuilder(EditActivityDescriptor descriptor) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.descriptor \u003d new EditActivityDescriptor(descriptor);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns an {@code EditActivityDescriptor} with fields containing {@code activity}\u0027s details"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditActivityDescriptorBuilder(Activity activity) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor \u003d new EditActivityDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setName(activity.getName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setNote(activity.getNote());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setPriority(activity.getPriority());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setDate(activity.getDate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Sets the {@code Name} of the {@code EditActivityDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditActivityDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Sets the {@code Note} of the {@code EditActivityDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditActivityDescriptorBuilder withNote(String note) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setNote(new Note(note));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Sets the {@code Priority} of the {@code EditActivityDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditActivityDescriptorBuilder withPriority(String priority) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setPriority(new Priority(priority));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Sets the {@code Address} of the {@code EditActivityDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditActivityDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditActivityDescriptor build() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "don-tay": 71
    }
  },
  {
    "path": "src/test/java/nasa/testutil/EditModuleDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "don-tay"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.logic.commands.EditModuleCommand.EditModuleDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "don-tay"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "don-tay"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "don-tay"
        },
        "content": " * A utility class to help with building EditModuleDescriptor objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "don-tay"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "don-tay"
        },
        "content": "public class EditModuleDescriptorBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    private EditModuleDescriptor descriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptorBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptorBuilder(EditModuleDescriptor descriptor) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        this.descriptor \u003d new EditModuleDescriptor(descriptor);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Returns an {@code EditModuleDescriptor} with fields containing {@code module}\u0027s details"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptorBuilder(Module module) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor \u003d new EditModuleDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setModuleName(module.getModuleName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setModuleCode(module.getModuleCode());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Sets the {@code ModuleName} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptorBuilder withModuleName(String moduleName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setModuleName(new ModuleName(moduleName));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code EditModuleDescriptor} that we are building."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "don-tay"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptorBuilder withModuleCode(String moduleCode) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        descriptor.setModuleCode(new ModuleCode(moduleCode));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "don-tay"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public EditModuleDescriptor build() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "don-tay"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "don-tay": 51
    }
  },
  {
    "path": "src/test/java/nasa/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/*"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 15,
      "-": 59
    }
  },
  {
    "path": "src/test/java/nasa/testutil/EventBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_EXAM;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class to build example events."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class EventBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DEFAULT_NAME \u003d VALID_ACTIVITY_NAME_EXAM;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"19-10-2020 03:00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DEFAULT_NOTE \u003d VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DEFAULT_TO_DATE \u003d VALID_DATE_TEST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DEFAULT_FROM_DATE \u003d VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date toDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date fromDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise default name, date and note for an activity to test."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        note \u003d new Note(DEFAULT_NOTE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        toDate \u003d new Date(DEFAULT_TO_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        fromDate \u003d new Date(DEFAULT_FROM_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initializes the EventBuilder with the data of {@code activityToCopy}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder(Object activityToCopy) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Activity activity \u003d (Activity) activityToCopy;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d activity.getName();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        date \u003d activity.getDate();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        note \u003d activity.getNote();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        toDate \u003d new Date(DEFAULT_TO_DATE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        fromDate \u003d new Date(DEFAULT_FROM_DATE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Name} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Date} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder withDate(String date) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Note} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder withNote(String note) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.note \u003d new Note(note);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code toDate} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder withToDate(String toDate) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.toDate \u003d new Date(toDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code fromDate} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public EventBuilder withFromDate(String fromDate) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.fromDate \u003d new Date(fromDate);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Build an activity accordingly."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Event build() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new Event(name, note, fromDate, toDate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 82,
      "kester-ng": 18
    }
  },
  {
    "path": "src/test/java/nasa/testutil/LessonBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_ACTIVITY_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import static nasa.logic.commands.CommandTestUtil.VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Date;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Lesson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.activity.Note;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class to build example lessons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class LessonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DEFAULT_NAME \u003d VALID_ACTIVITY_NAME_TUTORIAL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"19-10-2020 03:00\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DEFAULT_NOTE \u003d VALID_NOTES_TEST;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d VALID_DATE_TEST;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final String DEFAULT_END_DATE \u003d VALID_DATE_TEST_2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Note note;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private Date endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initialise default name, date and note for an activity to test."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public LessonBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        note \u003d new Note(DEFAULT_NOTE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        startDate \u003d new Date(DEFAULT_START_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        endDate \u003d new Date(DEFAULT_END_DATE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Initializes the LessonBuilder with the data of {@code activityToCopy}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public LessonBuilder(Object activityToCopy) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Activity activity \u003d (Activity) activityToCopy;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d activity.getName();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        date \u003d activity.getDate();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        note \u003d activity.getNote();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Name} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public LessonBuilder withName(String name) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Date} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public LessonBuilder withDate(String date) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code Note} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public LessonBuilder withNote(String note) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.note \u003d new Note(note);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code endDate} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public LessonBuilder withToDate(String startDate) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.startDate \u003d new Date(startDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Sets the {@code startDate} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public LessonBuilder withFromDate(String endDate) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.endDate \u003d new Date(endDate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     * Build an activity accordingly."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public Lesson build() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return new Lesson(name, note, startDate, endDate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 81,
      "kester-ng": 18
    }
  },
  {
    "path": "src/test/java/nasa/testutil/ModuleBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.activity.UniqueActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.ModuleName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A utility class to help with building Module objects."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class ModuleBuilder {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_MODULE_NAME \u003d \"SOFTWARE ENGINEERING\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final String DEFAULT_MODULE_CODE \u003d \"CS2103T\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Activity TASK_1 \u003d new DeadlineBuilder()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Homework\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withDate(\"01-04-2021 01:00\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withDueDate(\"06-04-2021 01:00\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"Do models for project\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Activity TASK_2 \u003d new DeadlineBuilder()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Test\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withDate(\"22-07-2021 01:00\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withDueDate(\"02-08-2021 01:00\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"Do tutorials\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Activity TASK_3 \u003d new DeadlineBuilder()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Prepare group meeting\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withDate(\"04-04-2021 01:00\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withDueDate(\"22-04-2021 01:00\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"Prepare for group meetings\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Activity TASK_4 \u003d new DeadlineBuilder()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Exam\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withDate(\"01-05-2021 01:00\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withDueDate(\"13-05-2021 01:00\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"Chapter 1\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Activity TASK_5 \u003d new EventBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"MPSH\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withFromDate(\"01-04-2021 01:00\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withToDate(\"04-04-2021 01:00\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"Booked MPSH\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleName name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private ModuleCode code;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private UniqueActivityList activityList;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleBuilder() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        name \u003d new ModuleName(DEFAULT_MODULE_NAME);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        code \u003d new ModuleCode(DEFAULT_MODULE_CODE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        activityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        activityList.add(TASK_1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        activityList.add(TASK_2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        activityList.add(TASK_3);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        activityList.add(TASK_4);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        activityList.add(TASK_5);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public ModuleBuilder(Module moduleToCopy) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        name \u003d moduleToCopy.getModuleName();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        code \u003d moduleToCopy.getModuleCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        UniqueActivityList newActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        newActivityList.setActivities(moduleToCopy.getDeepCopyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        activityList \u003d newActivityList;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the {@code ModuleName} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleBuilder withName(String name) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.name \u003d new ModuleName(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Sets the {@code ModuleCode} of the {@code Module} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleBuilder withCode(String code) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.code \u003d new ModuleCode(code);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Build module with activity."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param activity activity to be added"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return ModuleBuilder"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleBuilder withAddActivity(Activity activity) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.activityList.add(activity);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Remove every activity."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return ModuleBuilder"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public ModuleBuilder withRemoveAll() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        this.activityList.removeAll();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Build module based on code and name."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return Module"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public Module build() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        Module module \u003d new Module(code, name);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        module.setActivities(activityList.getDeepCopyList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return module;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 8,
      "EdmondOng": 88,
      "kester-ng": 20
    }
  },
  {
    "path": "src/test/java/nasa/testutil/ModuleUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.logic.parser.CliSyntax.PREFIX_MODULE_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.logic.commands.AddModuleCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A utility class for Module."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "public class ModuleUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns an add command string for adding the {@code module}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static String getAddModuleCommand(Module module) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return AddModuleCommand.COMMAND_WORD + \" \" + getModuleDetails(module);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the part of command string for the given {@code module}\u0027s details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static String getModuleDetails(Module module) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        sb.append(PREFIX_MODULE + module.getModuleName().toString() + \" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        sb.append(PREFIX_MODULE_NAME + module.getModuleCode().toString() + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        module.getActivities().getActivityList().stream().forEach("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        );"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 59
    }
  },
  {
    "path": "src/test/java/nasa/testutil/NasaBookBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.CS2106;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import static nasa.testutil.TypicalModules.GEH1001;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.UniqueModuleList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class to build example NasaBook."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class NasaBookBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Module DEFAULT_MODULE_1 \u003d CS2106;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Module DEFAULT_MODULE_2 \u003d GEH1001;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "don-tay"
        },
        "content": "    public static final Module DEFAULT_MODULE_3 \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private UniqueModuleList moduleList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBookBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        moduleList.add(DEFAULT_MODULE_1); // first module in moduleList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.add(DEFAULT_MODULE_2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.add(DEFAULT_MODULE_3);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Reset nasabook builder."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return NasaBookBuilder"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBookBuilder reset() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Add module to Nasabook."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param module module"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return NasaBookBuilder"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBookBuilder addModule(Module module) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.add(module);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Delete the module from Nasabook."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param module module"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return NasaBookBuilder"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBookBuilder deleteModule(Module module) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.remove(module);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Delete the module from Nasabook."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @param index index"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return NasaBookBuilder"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBookBuilder deleteModule(Index index) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        moduleList.removeByIndex(index);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * Build Nasabook."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     * @return NasaBook"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public NasaBook build() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        NasaBook nasaBook \u003d new NasaBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        UniqueModuleList newModuleList \u003d new UniqueModuleList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        newModuleList.setModules(moduleList.getDeepCopyList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "don-tay"
        },
        "content": "        nasaBook.setModuleList(newModuleList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "        return nasaBook;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 47,
      "kester-ng": 26,
      "don-tay": 7
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the middle index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the last index of the module in the {@code model}\u0027s module list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return Index.fromOneBased(model.getFilteredModuleList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns the module in the {@code model}\u0027s module list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static Module getModule(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return model.getFilteredModuleList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TypicalActivities.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Contains examples of activities use for testing."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class TypicalActivities {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Activity DEADLINE \u003d new DeadlineBuilder().withName(\"Homework for tut\")"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withDate(\"19-02-2021 06:00\")"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withDueDate(\"19-02-2021 06:00\")"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"pay attention to qns2\").build();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Activity DEADLINE_LATE \u003d new DeadlineBuilder().withName(\"Test\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withDate(\"11-01-2021 06:00\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withDueDate(\"12-01-2021 06:00\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withNote(\"pay attention to qns2\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Activity WRONG_EVENT \u003d new EventBuilder().withName(\"BasketBall MPSH\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withFromDate(\"02-02-2021 06:00\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withToDate(\"01-01-2021 06:00\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Activity CORRECT_EVENT \u003d new EventBuilder().withName(\"Tennis\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withFromDate(\"02-04-2021 06:00\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withToDate(\"13-06-2021 06:00\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Activity PAST_EVENT \u003d new EventBuilder().withName(\"Soccer\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withFromDate(\"02-04-2019 06:00\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withToDate(\"13-06-2019 06:00\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    private TypicalActivities() {} // prevents instantiation"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "EdmondOng": 22,
      "kester-ng": 9
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kester-ng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Index INDEX_FIRST_ACTIVITY \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Index INDEX_SECOND_ACTIVITY \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "    public static final Index INDEX_THIRD_ACTIVITY \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "kester-ng": 10
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TypicalModules.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.module.Module;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": " * A utility class containing a list of {@code Module} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class TypicalModules {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    //Default module"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Module CS2103T \u003d new ModuleBuilder().build();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Module CS2106 \u003d new ModuleBuilder().withCode(\"CS2106\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Operating System\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withRemoveAll()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withAddActivity(new DeadlineBuilder().withName(\"Lab Assignment 1\").withNote(\"Lab1 IPC\").build())"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withAddActivity(new DeadlineBuilder().withName(\"Lab Assignment 2\").withNote(\"Lab2 Processes\").build())"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "            .withAddActivity(new DeadlineBuilder().withName(\"Lab Assignment 3\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "                .withNote(\"Lab3 Synchronization\").build())"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final Module GEH1001 \u003d new ModuleBuilder().withCode(\"GEH1001\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withName(\"Globalization and new media\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withRemoveAll()"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withAddActivity(new DeadlineBuilder().withName(\"Midterm\").withNote(\"Midterm Essay\").build())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withAddActivity(new DeadlineBuilder().withName(\"Finals\").withNote(\"Final Essay\").build())"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withAddActivity(new DeadlineBuilder().withName(\"Quiz 1\").withNote(\"Quiz1\").build())"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withAddActivity(new DeadlineBuilder().withName(\"Quiz 2\").withNote(\"Quiz2\").build())"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .withAddActivity(new DeadlineBuilder().withName(\"Quiz 3\").withNote(\"Quiz3\").build())"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private TypicalModules() {} // prevents instantiation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     * Returns an {@code NasaBook} with all the typical modules."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static NasaBook getTypicalNasaBook() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        NasaBook nb \u003d new NasaBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        for (Module module : getTypicalModules()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "            nb.addModule(module.getDeepCopyModule());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return nb;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    public static List\u003cModule\u003e getTypicalModules() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CS2103T, CS2106));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 20,
      "EdmondOng": 29,
      "kester-ng": 2
    }
  },
  {
    "path": "src/test/java/nasa/testutil/TypicalNasaBook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "package nasa.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "import nasa.model.NasaBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kester-ng"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " * Class for a NasaBook."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kester-ng"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "public class TypicalNasaBook {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    public static final NasaBook NASABOOK_TYPE_1 \u003d new NasaBookBuilder().build().deepCopyNasaBook();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "    private TypicalNasaBook() {} // prevents instantiation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EdmondOng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EdmondOng": 9,
      "kester-ng": 3
    }
  },
  {
    "path": "src/test/java/nasa/ui/TestFxmlObject.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/nasa/ui/UiPartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "package nasa.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import static nasa.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "import nasa.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 3,
      "-": 112
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import nasa.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003c?import nasa.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CharmaineKoh"
        },
        "content": "\u003cfx:root type\u003d\"nasa.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "CharmaineKoh": 2,
      "-": 5
    }
  }
]
