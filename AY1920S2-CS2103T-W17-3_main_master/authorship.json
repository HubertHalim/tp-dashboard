[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        \u0027site-name\u0027: \u0027E.T.\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/AY1920S2-CS2103T-W17-3/main\u0027,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 2,
      "-": 152
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.beans.value.ObservableObjectValue;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.AccommodationBookingManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ActivityManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.FixedExpenseManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.PackingListManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyAccommodationBookingManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyActivityManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyFixedExpenseManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyPackingListManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyTransportBookingManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.TransportBookingManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.UserPrefs;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.trip.ReadOnlyTripManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.sampledata.SampleDataUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.storage.accommodationbooking.AccommodationBookingStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.storage.accommodationbooking.JsonAccommodationBookingStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.storage.activity.ActivityManagerStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.storage.activity.JsonActivityManagerStorage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.storage.fixedexpense.FixedExpenseStorage;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.storage.fixedexpense.JsonFixedExpenseStorage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.storage.packinglist.JsonPackingListStorage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.storage.packinglist.PackingListStorage;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.storage.transportbooking.JsonTransportBookingStorage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.storage.transportbooking.TransportBookingStorage;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.storage.trip.JsonTripStorage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.storage.trip.TripStorage;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant VERSION."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The Ui."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The Logic."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The Storage."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The Model."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The Config."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing E.T. ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        TransportBookingStorage transportBookingStorage \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                new JsonTransportBookingStorage((userPrefs.getTransportBookingStorageFilePath()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        FixedExpenseStorage fixedExpenseStorage \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new JsonFixedExpenseStorage(userPrefs.getFixedExpenseStorageFilePath());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        ActivityManagerStorage activityManagerStorage \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                new JsonActivityManagerStorage(userPrefs.getActivityManagerStorageFilePath());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        AccommodationBookingStorage accommodationBookingStorage \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new JsonAccommodationBookingStorage((userPrefs.getAccommodationBookingStorageFilePath()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        PackingListStorage packingListStorage \u003d new JsonPackingListStorage(userPrefs.getPackingListStorageFilePath());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        TripStorage tripStorage \u003d new JsonTripStorage();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                transportBookingStorage,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                fixedExpenseStorage,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                activityManagerStorage,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                accommodationBookingStorage,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                packingListStorage, tripStorage,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                userPrefsStorage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (addressBookOptional.isEmpty()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        ReadOnlyTransportBookingManager transportBookingManager \u003d initTransportBookingManager(storage);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        ReadOnlyFixedExpenseManager fixedExpenseManager \u003d initFixedExpenseManager(storage);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        ReadOnlyActivityManager activityManager \u003d initActivityManager(storage);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        ReadOnlyAccommodationBookingManager accommodationBookingManager \u003d initAccommodationBookingManager(storage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        ReadOnlyPackingListManager packingListManager \u003d initPackingListManager(storage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        ReadOnlyTripManager tripManager \u003d initTripManager(storage);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return new ModelManager(initialData, transportBookingManager, fixedExpenseManager, packingListManager,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                activityManager, accommodationBookingManager, tripManager, userPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Returns a {@code ReadOnlyManager} with the data from {@code storage}\u0027s transport bookings."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The data from the sample transport bookings will be used instead"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * if {@code storage}\u0027s transport booking manager is not found,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * or an empty transport booking manager will be used instead if errors"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * occur when reading {@code storage}\u0027s transport booking manager."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private ReadOnlyTransportBookingManager initTransportBookingManager(Storage storage) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        ReadOnlyTransportBookingManager transportBookingManager;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            Optional\u003cReadOnlyTransportBookingManager\u003e transportBookingManagerOptional \u003d storage.readTransportBookings();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (transportBookingManagerOptional.isEmpty()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TransportBookingManager.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            transportBookingManager \u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    transportBookingManagerOptional.orElseGet(SampleDataUtil::getSampleTransportBookingManager);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty\""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"TransportBookingManager.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            transportBookingManager \u003d new TransportBookingManager();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty \""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    + \"TransportBookingManager.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            transportBookingManager \u003d new TransportBookingManager();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            storage.saveTransportBookings(transportBookingManager);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            logger.info(\"Saving initial data of TransportBookingManager.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            logger.warning(\"Problem while saving to the file.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return transportBookingManager;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Returns a {@code ReadOnlyManager} with the data from {@code storage}\u0027s fixed expenses."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The data from the sample fixed expenses will be used instead"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * if {@code storage}\u0027s fixed expense manager is not found,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * or an empty fixed expense manager will be used instead"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * if errors occur when reading {@code storage}\u0027s fixed expense manager."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private ReadOnlyFixedExpenseManager initFixedExpenseManager(Storage storage) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        ReadOnlyFixedExpenseManager fixedExpenseManager;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            Optional\u003cReadOnlyFixedExpenseManager\u003e fixedExpenseManagerOptional \u003d storage.readFixedExpenses();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            if (fixedExpenseManagerOptional.isEmpty()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample FixedExpenseManager.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            fixedExpenseManager \u003d fixedExpenseManagerOptional.orElseGet(SampleDataUtil::getSampleFixedExpenseManager);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty\""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    + \"FixedExpenseManager.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            fixedExpenseManager \u003d new FixedExpenseManager();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty \""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    + \"FixedExpenseManager.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            fixedExpenseManager \u003d new FixedExpenseManager();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            storage.saveFixedExpenses(fixedExpenseManager);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            logger.info(\"Saving initial data of FixedExpenseManager.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            logger.warning(\"Problem while saving to the file.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return fixedExpenseManager;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Returns a {@code ReadOnlyManager} with the data from {@code storage}\u0027s activities."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * The data from the sample activities will be used instead if {@code storage}\u0027s activities manager is not found,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * or an empty activity manager will be used instead if errors occur when reading {@code storage}\u0027s"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * activity manager."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private ReadOnlyActivityManager initActivityManager(Storage storage) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        ReadOnlyActivityManager activityManager;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            Optional\u003cReadOnlyActivityManager\u003e activityManagerOptional \u003d storage.readActivityManager();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            if (activityManagerOptional.isEmpty()) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ActivityManager.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            activityManager \u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    activityManagerOptional.orElseGet(SampleDataUtil::getSampleActivityManager);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty\""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    + \"ActivityManager.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            activityManager \u003d new ActivityManager();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty \""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    + \"ActivityManager.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            activityManager \u003d new ActivityManager();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            storage.saveActivityManager(activityManager);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            logger.info(\"Saving initial data of ActivityManager.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            logger.warning(\"Problem while saving to the file.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return activityManager;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Returns a {@code ReadOnlyManager} with the data from {@code storage}\u0027s accommodation bookings."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The data from the sample accommodation bookings will be used instead"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * if {@code storage}\u0027s accommodation booking manager is not found,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * or an empty accommodation booking manager will be used instead if errors occur when"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * reading {@code storage}\u0027s accommodation booking manager."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private ReadOnlyAccommodationBookingManager initAccommodationBookingManager(Storage storage) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        ReadOnlyAccommodationBookingManager accommodationBookingManager;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            Optional\u003cReadOnlyAccommodationBookingManager\u003e accommodationBookingManagerOptional \u003d"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    storage.readAccommodationBookings();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            if (accommodationBookingManagerOptional.isEmpty()) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AccommodationBookingManager.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            accommodationBookingManager \u003d"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    accommodationBookingManagerOptional.orElseGet(SampleDataUtil::getSampleAccommodationBookingManager);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty\""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    + \"AccommodationBookingManager.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            accommodationBookingManager \u003d new AccommodationBookingManager();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty \""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    + \"AccommodationBookingManager.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            accommodationBookingManager \u003d new AccommodationBookingManager();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            storage.saveAccommodationBookings(accommodationBookingManager);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            logger.info(\"Saving initial data of AccommodationBookingManager.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            logger.warning(\"Problem while saving to the file.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return accommodationBookingManager;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Returns a {@code ReadOnlyManager} with the data from {@code storage}\u0027s packing list."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The data from the sample packing list will be used instead if {@code storage}\u0027s packing list"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * is not found, or an empty packing list will be used instead if errors occur when"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * reading {@code storage}\u0027s packing list."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private ReadOnlyPackingListManager initPackingListManager(Storage storage) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        ReadOnlyPackingListManager packingListManager;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            Optional\u003cReadOnlyPackingListManager\u003e packingListManagerOptional \u003d storage.readPackingList();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            if (packingListManagerOptional.isEmpty()) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample PackingListManager.\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            packingListManager \u003d"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                    packingListManagerOptional.orElseGet(SampleDataUtil::getSamplePackingListManager);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty\""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                    + \"PackingListManager.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            packingListManager \u003d new PackingListManager();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty \""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                    + \"PackingListManager.\");"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            packingListManager \u003d new PackingListManager();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            storage.savePackingList(packingListManager);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            logger.info(\"Saving initial data of PackingListManager.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            logger.warning(\"Problem while saving to the file.\");"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return packingListManager;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param configFilePath the config file path"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the config"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Path configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        // Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param storage the storage"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the user prefs"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        // Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns a {@code ReadOnlyManager} with the data from {@code storage}\u0027s transport bookings."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * The data from the sample transport bookings will be used instead"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * if {@code storage}\u0027s transport booking manager is not found,"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * or an empty transport booking manager will be used instead if errors"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * occur when reading {@code storage}\u0027s transport booking manager."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private ReadOnlyTripManager initTripManager(Storage storage) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return new ReadOnlyTripManager() {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            public ObservableObjectValue\u003cTrip\u003e getTrip() {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        };"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        logger.info(\"Starting E.T. \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping E.T. ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 83,
      "jwee97": 59,
      "Deunitato": 68,
      "zenatrick": 66,
      "-": 171
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_INVALID_DISPLAYED_INDEX_FORMAT \u003d \"The %1$s index provided is invalid.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    //--------Fixed Expense Messages-----------//"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String MESSAGE_INVALID_FIXEDEXPENSE_DISPLAYED_INDEX \u003d \"The Fixed Expense \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \"index provided is invalid\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String MESSAGE_INVALID_EMPTY_FIXEDEXPENSE_LIST \u003d \"The Fixed Expense List is empty\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    //--------Packing List Messages-----------//"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_INVALID_ITEM_DISPLAYED_INDEX \u003d \"The Packing List Item \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"index provided is invalid\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //--------Activity Messages-----------//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX \u003d \"The activity \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"index provided is invalid\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    //--------Accommodation Booking Messages-----------//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_INVALID_ACCOMMODATION_BOOKING_DISPLAYED_INDEX \u003d \"The Accommodation Booking \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"index provided is invalid\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 3,
      "jwee97": 4,
      "Deunitato": 4,
      "zenatrick": 1,
      "joshlay96": 5,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/time/DateTime.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.commons.core.time;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a DateTime object in ET which wraps around the java.time.LocalDateTime and provides basic"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * functionality such as comparision between time."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class DateTime {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date-Time entered must be in the format of \u003cdd-MM-yyyy HH:mm\u003e.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static final DateTimeFormatter FORMAT_INPUT \u003d DateTimeFormatter.ofPattern(\"d-M-yyyy H:m\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static final DateTimeFormatter FORMAT_STORAGE \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static final DateTimeFormatter FORMAT_OUTPUT \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy, hh:mma\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final LocalDateTime dateTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * DateTime can only be created by calling {@link #fromString(String)}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private DateTime(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Compare this date-time with another date-time."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The comparison is primarily based on the date-time, from earliest to latest. It is \"consistent with equals\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * as defined by Comparable."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public int compareTo(DateTime other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return dateTime.compareTo(other.dateTime);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns this DateTime in the user input format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String getStorageFormat() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return dateTime.format(FORMAT_STORAGE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Creates a new {@code DateTime} from the given properly formatted {@code dataTimeString}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static DateTime fromString(String dateTimeString) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(dateTimeString);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        checkArgument(isValidDateTime(dateTimeString), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new DateTime(LocalDateTime.parse(dateTimeString, FORMAT_INPUT));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if a given string is a valid DateTime format."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static boolean isValidDateTime(String test) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            LocalDateTime.parse(test, FORMAT_INPUT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || (other instanceof DateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 dateTime.equals(((DateTime) other).dateTime)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return dateTime.hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return dateTime.format(FORMAT_OUTPUT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of persons"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    ///**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // * Returns an unmodifiable view of the current planning status."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // * @return the unmodifiable view of the current planning status."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //SimpleStringProperty getPlanningStatus();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of activities."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @return the unmodifiable view of the filtered list of activities."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredActivityList();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of transport bookings."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return the unmodifiable view of the filtered list of transport bookings."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    ObservableList\u003cTransportBooking\u003e getFilteredTransportBookingList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of accommodation bookings."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @return the unmodifiable view of the filtered list of accommodation bookings."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    ObservableList\u003cAccommodationBooking\u003e getFilteredAccommodationBookingList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of fixed expenses."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return the unmodifiable view of the filtered list of fixed expenses."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    ObservableList\u003cFixedExpense\u003e getFilteredFixedExpenseList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns an unmodifiable view of the filtered packing list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return the unmodifiable view of the filtered packing list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    ObservableList\u003cPackingListItem\u003e getFilteredPackingList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 6,
      "Deunitato": 6,
      "zenatrick": 39,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.EasyTravelParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private final EasyTravelParser easyTravelParser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        easyTravelParser \u003d new EasyTravelParser();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        Command command \u003d easyTravelParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            storage.saveAccommodationBookings(model.getAccommodationBookingManager());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveAddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            storage.saveFixedExpenses(model.getFixedExpenseManager());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            storage.saveTransportBookings(model.getTransportBookingManager());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            storage.saveActivityManager(model.getActivityManager());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            storage.savePackingList(model.getPackingListManager());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public ObservableList\u003cTransportBooking\u003e getFilteredTransportBookingList() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return model.getFilteredTransportBookingList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return model.getFilteredActivityList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public ObservableList\u003cFixedExpense\u003e getFilteredFixedExpenseList() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return model.getFilteredFixedExpenseList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public ObservableList\u003cPackingListItem\u003e getFilteredPackingList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return model.getFilteredPackingList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public ObservableList\u003cAccommodationBooking\u003e getFilteredAccommodationBookingList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return model.getFilteredAccommodationBookingList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 5,
      "jwee97": 6,
      "Deunitato": 5,
      "zenatrick": 22,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 1,
      "-": 225
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/accommodationbooking/AddAccommodationBookingCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.logic.commands.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_END_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_START_DAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Adds an AccommodationBooking to the AccommodationBookingManager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class AddAccommodationBookingCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addacc\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an accommodation booking. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + PREFIX_ACCOMMODATION_NAME + \"NAME \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + PREFIX_ACCOMMODATION_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + PREFIX_ACCOMMODATION_START_DAY + \"START_DAY \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + PREFIX_ACCOMMODATION_END_DAY + \"END_DAY \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"[\" + PREFIX_ACCOMMODATION_REMARK + \"REMARK]\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + PREFIX_ACCOMMODATION_NAME + \"JW Marriott Hotel \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + PREFIX_ACCOMMODATION_LOCATION + \"KL \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + PREFIX_ACCOMMODATION_START_DAY + \"2 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + PREFIX_ACCOMMODATION_END_DAY + \"4 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + PREFIX_ACCOMMODATION_REMARK + \"Check-in at 3pm.\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New accommodation booking added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOMMODATION_BOOKING \u003d \"This accommodation booking already exists \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"in the list\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final AccommodationBooking toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public AddAccommodationBookingCommand(AccommodationBooking accommodationBooking) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(accommodationBooking);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        toAdd \u003d accommodationBooking;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (model.hasAccommodationBooking(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACCOMMODATION_BOOKING);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        model.addAccommodationBooking(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                || (other instanceof AddAccommodationBookingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddAccommodationBookingCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/accommodationbooking/ClearAccommodationBookingCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.logic.commands.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.listmanagers.AccommodationBookingManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Clears the Accommodation Booking List."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class ClearAccommodationBookingCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearacc\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Accommodation Bookings has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        model.setAccommodationBookingManager(new AccommodationBookingManager());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/accommodationbooking/DeleteAccommodationBookingCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.logic.commands.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Deletes an Accommodation Booking from the Accommodation Booking Manager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class DeleteAccommodationBookingCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteacc\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \": Deletes the accommodation booking identified by the index number used in the displayed accommodation \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"booking list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_DELETE_ACCOMMODATION_BOOKING_SUCCESS \u003d \"Deleted Accommodation Booking: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public DeleteAccommodationBookingCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        List\u003cAccommodationBooking\u003e lastShownList \u003d model.getFilteredAccommodationBookingList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACCOMMODATION_BOOKING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        AccommodationBooking accommodationBookingToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        model.deleteAccommodationBooking(accommodationBookingToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ACCOMMODATION_BOOKING_SUCCESS,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                accommodationBookingToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/accommodationbooking/EditAccommodationBookingCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.logic.commands.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_END_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_START_DAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ACCOMMODATION_BOOKINGS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.Day;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.Remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class EditAccommodationBookingCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editacc\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the accommodation booking \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"identified by the index number used in the displayed accommodation booking list. \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"[\" + PREFIX_ACCOMMODATION_NAME + \"NAME] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"[\" + PREFIX_ACCOMMODATION_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"[\" + PREFIX_ACCOMMODATION_START_DAY + \"START_DAY] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"[\" + PREFIX_ACCOMMODATION_END_DAY + \"END_DAY] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"[\" + PREFIX_ACCOMMODATION_REMARK + \"REMARK]\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + PREFIX_ACCOMMODATION_NAME + \"Casa del Rio \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + PREFIX_ACCOMMODATION_LOCATION + \"Malacca\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_EDIT_ACCOMMODATION_BOOKING_SUCCESS \u003d \"Edited Accommodation Booking: %1$s\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOMMODATION_BOOKING \u003d \"This Accommodation Booking already exists \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"in the accommodation booking list.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final EditAccommodationBookingDescriptor editAccommodationBookingDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param editAccommodationBookingDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public EditAccommodationBookingCommand(Index index,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                                           EditAccommodationBookingDescriptor editAccommodationBookingDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(editAccommodationBookingDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.editAccommodationBookingDescriptor \u003d new EditAccommodationBookingDescriptor("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                editAccommodationBookingDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        List\u003cAccommodationBooking\u003e lastShownList \u003d model.getFilteredAccommodationBookingList();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACCOMMODATION_BOOKING_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        AccommodationBooking accommodationBookingToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        AccommodationBooking editedAccommodationBooking \u003d createEditedAccommodationBooking(accommodationBookingToEdit,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                editAccommodationBookingDescriptor);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!accommodationBookingToEdit.isSame(editedAccommodationBooking)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u0026\u0026 model.hasAccommodationBooking(editedAccommodationBooking)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACCOMMODATION_BOOKING);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        model.setAccommodationBooking(accommodationBookingToEdit, editedAccommodationBooking);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        model.updateFilteredAccommodationBookingList(PREDICATE_SHOW_ALL_ACCOMMODATION_BOOKINGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ACCOMMODATION_BOOKING_SUCCESS, editedAccommodationBooking));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private static AccommodationBooking createEditedAccommodationBooking("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            AccommodationBooking accommodationBookingToEdit,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            EditAccommodationBookingDescriptor editAccommodationBookingDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assert accommodationBookingToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        AccommodationName updatedName \u003d editAccommodationBookingDescriptor.getAccommodationName()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                .orElse(accommodationBookingToEdit.getAccommodationName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        Location updatedLocation \u003d editAccommodationBookingDescriptor.getLocation().orElse(accommodationBookingToEdit"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                .getLocation());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        Day updatedStartDay \u003d editAccommodationBookingDescriptor.getStartDay().orElse(accommodationBookingToEdit"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                .getStartDay());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        Day updatedEndDay \u003d editAccommodationBookingDescriptor.getEndDay().orElse(accommodationBookingToEdit"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                .getEndDay());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        Remark updatedRemark \u003d editAccommodationBookingDescriptor.getRemark().orElse(accommodationBookingToEdit"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                .getRemark());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new AccommodationBooking(updatedName, updatedLocation, updatedStartDay, updatedEndDay, updatedRemark);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        EditAccommodationBookingCommand e \u003d (EditAccommodationBookingCommand) other;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u0026\u0026 editAccommodationBookingDescriptor.equals(e.editAccommodationBookingDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static class EditAccommodationBookingDescriptor {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        private AccommodationName accommodationName;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        private Location accommodationLocation;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        private Day accommodationStartDay;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        private Day accommodationEndDay;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        private Remark accommodationRemark;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        public EditAccommodationBookingDescriptor() {}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jwee97"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jwee97"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jwee97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        public EditAccommodationBookingDescriptor(EditAccommodationBookingDescriptor toCopy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            setAccommodationName(toCopy.accommodationName);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            setLocation(toCopy.accommodationLocation);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            setStartDay(toCopy.accommodationStartDay);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            setEndDay(toCopy.accommodationEndDay);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            setRemark(toCopy.accommodationRemark);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jwee97"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jwee97"
        },
        "content": "         */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return CollectionUtil.isAnyNonNull(accommodationName, accommodationLocation, accommodationStartDay,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    accommodationEndDay, accommodationRemark);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        public void setAccommodationName(AccommodationName accommodationName) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            this.accommodationName \u003d accommodationName;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        public Optional\u003cAccommodationName\u003e getAccommodationName() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return Optional.ofNullable(accommodationName);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        public void setLocation(Location accommodationLocation) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            this.accommodationLocation \u003d accommodationLocation;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return Optional.ofNullable(accommodationLocation);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        public void setStartDay(Day accommodationStartDay) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            this.accommodationStartDay \u003d accommodationStartDay;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        public Optional\u003cDay\u003e getStartDay() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return Optional.ofNullable(accommodationStartDay);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        public void setEndDay(Day accommodationEndDay) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            this.accommodationEndDay \u003d accommodationEndDay;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        public Optional\u003cDay\u003e getEndDay() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return Optional.ofNullable(accommodationEndDay);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        public void setRemark(Remark accommodationRemark) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            this.accommodationRemark \u003d accommodationRemark;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        public Optional\u003cRemark\u003e getRemark() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return Optional.ofNullable(accommodationRemark);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            if (!(other instanceof EditAccommodationBookingDescriptor)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            EditAccommodationBookingDescriptor e \u003d (EditAccommodationBookingDescriptor) other;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return getAccommodationName().equals(e.getAccommodationName())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    \u0026\u0026 getStartDay().equals(e.getStartDay())"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    \u0026\u0026 getEndDay().equals(e.getEndDay())"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    \u0026\u0026 getRemark().equals(e.getRemark());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 230
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/activity/AddActivityCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.logic.commands.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Adds a Activity to the Activity manager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class AddActivityCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addactivity\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"This activity already exists in the scheduler\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an activity to the activity list\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_TITLE + \"TITLE\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_PRIORITY + \"PRIORITY\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_DURATION + \"DURATION\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_TAG + \"TAGS...\\n \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_TITLE + \"Osaka Castle View \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_PRIORITY + \"1 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_DURATION + \"1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_LOCATION + \"Osaka \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_TAG + \"expensive \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_TAG + \"weeb\";;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Activity added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final Activity toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Creates an AddActivityCommand to the specified {@code Activity}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public AddActivityCommand(Activity toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (model.hasActivity(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        model.addActivity(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                || (other instanceof AddActivityCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddActivityCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/activity/ClearActivityCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.logic.commands.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.ActivityManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class ClearActivityCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearactivity\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"The activity List has been clear\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        model.setActivityManager(new ActivityManager());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Deunitato": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/activity/DeleteActivityCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.logic.commands.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Deletes an activity in the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class DeleteActivityCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteactivity\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \": Deletes the activity identified by the index number used in the displayed activity list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_DELETE_ACTIVITY_SUCCESS \u003d \"Deleted Activity: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public DeleteActivityCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        List\u003cActivity\u003e lastShownList \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Activity activityToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        model.deleteActivity(activityToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ACTIVITY_SUCCESS, activityToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                || (other instanceof DeleteActivityCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteActivityCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/activity/EditActivityCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.logic.commands.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Duration;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Edits the details of an existing activity."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class EditActivityCommand extends Command {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editactivity\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the activity identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"by the index number used in the displayed list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"[\" + PREFIX_TITLE + \"TITLE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"[\" + PREFIX_DURATION + \"DURATION] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"[\" + PREFIX_PRIORITY + \"PRIORITY] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_TITLE + \"I AM DUMB \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_DURATION + \"2\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_EDIT_ACTIVITY_SUCCESS \u003d \"Edited Activity: %1$s\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"This activity already exists in the trip.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final EditActivityDescriptor editActivityDescriptor;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @param index                      of the activity in the filtered activity list to edit"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @param editActivityDescriptor details to edit the activity with"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public EditActivityCommand(Index index, EditActivityDescriptor editActivityDescriptor) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(editActivityDescriptor);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.editActivityDescriptor \u003d new EditActivityDescriptor(editActivityDescriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        List\u003cActivity\u003e lastShownList \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Activity activityToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Activity editedActivity \u003d createEditedActivity(activityToEdit, editActivityDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (!activityToEdit.isSame(editedActivity) \u0026\u0026 model.hasActivity(editedActivity)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        model.setActivity(activityToEdit, editedActivity);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        model.updateFilteredActivityList(Model.PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ACTIVITY_SUCCESS, editedActivity));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Creates and returns a {@code FixedExpense} with the details of {@code activityToEdit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * edited with {@code editActivityDescriptor}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private static Activity createEditedActivity(Activity activityToEdit,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                                                     EditActivityDescriptor editActivityDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assert activityToEdit !\u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Title updatedTitle \u003d editActivityDescriptor.getTitle().orElse(activityToEdit.getTitle());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Duration updatedDuration \u003d editActivityDescriptor.getDuration().orElse(activityToEdit.getDuration());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Location updatedLocation \u003d editActivityDescriptor.getLocation().orElse(activityToEdit.getLocation());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editActivityDescriptor.getTags().orElse(activityToEdit.getTags());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Priority updatedPriority \u003d editActivityDescriptor.getPriority().orElse(activityToEdit.getPriority());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return new Activity(updatedTitle, updatedPriority, updatedDuration, updatedLocation, updatedTags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Stores the details to edit the fixed expense with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static class EditActivityDescriptor {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        private Title title;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        private Duration duration;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        private Priority priority;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        public EditActivityDescriptor() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "         */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        public EditActivityDescriptor(EditActivityDescriptor toCopy) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            setTitle(toCopy.title);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            setDuration(toCopy.duration);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            setPriority(toCopy.priority);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            return CollectionUtil.isAnyNonNull(title, duration, priority);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        public void setTitle(Title title) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            this.title \u003d title;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        public Optional\u003cTitle\u003e getTitle() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            return Optional.ofNullable(title);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        public void setDuration(Duration duration) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            this.duration \u003d duration;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        public Optional\u003cDuration\u003e getDuration() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            return Optional.ofNullable(duration);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        public void setPriority(Priority priority) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            this.priority \u003d priority;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        public Optional\u003cPriority\u003e getPriority() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            return Optional.ofNullable(priority);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "         */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "         */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            if (!(other instanceof EditActivityDescriptor)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            EditActivityDescriptor e \u003d (EditActivityDescriptor) other;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            return getTitle().equals(e.getTitle())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    \u0026\u0026 getDuration().equals(e.getDuration())"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    \u0026\u0026 getPriority().equals(e.getPriority())"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 211
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/fixedexpense/AddFixedExpenseCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.logic.commands.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Adds a Fixed Expense to the Fixed Expense manager."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class AddFixedExpenseCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addexpense\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the address book\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a fixed expense to the fixed expense list\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + PREFIX_DESCRIPTION + \"DESCRIPTION\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY...\\n \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + PREFIX_AMOUNT + \"1500\" + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Plane Tickets\" + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + PREFIX_CATEGORY + \"Flights\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New Fixed Expense added: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final FixedExpense toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Creates an AddFixedExpenseCommand to the specied {@code FixedExpense}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public AddFixedExpenseCommand(FixedExpense toAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (model.hasFixedExpense(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        model.addFixedExpense(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 51,
      "zenatrick": 1,
      "joshlay96": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/fixedexpense/ClearFixedExpenseCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.logic.commands.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.FixedExpenseManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Clears the fixed expense list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class ClearFixedExpenseCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clearexpense\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Fixed Expenses has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        model.setFixedExpenseManager(new FixedExpenseManager());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 23,
      "zenatrick": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/fixedexpense/DeleteFixedExpenseCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.logic.commands.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " * Deletes a fixed expense in the list."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "public class DeleteFixedExpenseCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteexpense\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \": Deletes the fixed expense identified by the index number used in the displayed fixed expense list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String MESSAGE_DELETE_FIXEDEXPENSE_SUCCESS \u003d \"Deleted Fixed Expense: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public DeleteFixedExpenseCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        List\u003cFixedExpense\u003e lastShownList \u003d model.getFilteredFixedExpenseList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        FixedExpense fixedExpenseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        model.deleteFixedExpense(fixedExpenseToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FIXEDEXPENSE_SUCCESS, fixedExpenseToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 1,
      "joshlay96": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/fixedexpense/EditFixedExpenseCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.logic.commands.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " * Edits the details of an existing fixed expense."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "public class EditFixedExpenseCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"editexpense\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the fixed expense identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \"by the index number used in the displayed list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"EMAIL] \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + PREFIX_AMOUNT + \"3000 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + PREFIX_DESCRIPTION + \"SQ Flight\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String MESSAGE_EDIT_FIXEDEXPENSE_SUCCESS \u003d \"Edited Fixed Expense: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_FIXED_EXPENSE \u003d \"This Fixed Expense already exists in the \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \"address book.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private final EditFixedExpenseDescriptor editFixedExpenseDescriptor;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * @param index                      of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * @param editFixedExpenseDescriptor details to edit the fixed expense with"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public EditFixedExpenseCommand(Index index, EditFixedExpenseDescriptor editFixedExpenseDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        requireNonNull(editFixedExpenseDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        this.editFixedExpenseDescriptor \u003d new EditFixedExpenseDescriptor(editFixedExpenseDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        List\u003cFixedExpense\u003e lastShownList \u003d model.getFilteredFixedExpenseList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FIXEDEXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        FixedExpense fixedExpenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        FixedExpense editedExpense \u003d createEditedFixedExpense(fixedExpenseToEdit, editFixedExpenseDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        if (!fixedExpenseToEdit.isSame(editedExpense) \u0026\u0026 model.hasFixedExpense(editedExpense)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_FIXED_EXPENSE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        model.setFixedExpense(fixedExpenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        model.updateFilteredFixedExpenseList(Model.PREDICATE_SHOW_ALL_FIXED_EXPENSES);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_FIXEDEXPENSE_SUCCESS, editedExpense));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * Creates and returns a {@code FixedExpense} with the details of {@code fixedExpenseToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * edited with {@code editFixedExpenseDescriptor}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private static FixedExpense createEditedFixedExpense(FixedExpense fixedExpenseToEdit,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                                                         EditFixedExpenseDescriptor editFixedExpenseDescriptor) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assert fixedExpenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Amount updatedAmount \u003d editFixedExpenseDescriptor.getAmount().orElse(fixedExpenseToEdit.getAmount());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Description updatedDescription \u003d editFixedExpenseDescriptor"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .getDescription().orElse(fixedExpenseToEdit.getDescription());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Category updatedCategory \u003d editFixedExpenseDescriptor.getCategory().orElse(fixedExpenseToEdit.getCategory());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        return new FixedExpense(updatedAmount, updatedDescription, updatedCategory);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * Stores the details to edit the fixed expense with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static class EditFixedExpenseDescriptor {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        public EditFixedExpenseDescriptor() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        public EditFixedExpenseDescriptor(EditFixedExpenseDescriptor toCopy) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return CollectionUtil.isAnyNonNull(amount, description, category);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            if (!(other instanceof EditFixedExpenseDescriptor)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            EditFixedExpenseDescriptor e \u003d (EditFixedExpenseDescriptor) other;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 171
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/fixedexpense/SortFixedExpenseCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.logic.commands.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " * Sorts your Fixed Expense List according to ascending or descending amount."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "public class SortFixedExpenseCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sortexpense\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": sorts the fixed expense identified by the command\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \" 0 or 1 in the displayed fixed expense list\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \"0 sorts by ascending order while 1 sorts by descending order\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \"Parameters : SORTIDENTIFIER (must be 0 or 1) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \"[AMOUNT]\" + \"[DESCRIPTION]\" + \"[CATEGORY]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 amount\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String MESSAGE_SORT_FIXEDEXPENSE_SUCCESS \u003d \"Sorting of FixedExpense successful :)\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String SORT_DESCENDING \u003d \"1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String SORT_ASCENDING \u003d \"0\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String CATEGORY \u003d \"category\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String DESCRIPTION \u003d \"description\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String AMOUNT \u003d \"amount\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private final Integer sortIdentifier;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private final String sortParameter;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public SortFixedExpenseCommand(Integer sortIdentifier, String sortParameter) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        this.sortIdentifier \u003d sortIdentifier;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        this.sortParameter \u003d sortParameter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        List\u003cFixedExpense\u003e lastShownList \u003d model.getFilteredFixedExpenseList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        if (lastShownList.size() \u003c 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EMPTY_FIXEDEXPENSE_LIST);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        switch (sortParameter) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        case \"category\":"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            if (sortIdentifier \u003d\u003d 1) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                model.sortFixedExpenseList((x, y) -\u003e y.getCategory().toString().compareTo("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        x.getCategory().toString()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SORT_FIXEDEXPENSE_SUCCESS));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                model.sortFixedExpenseList(Comparator.comparing(x -\u003e x.getCategory().toString()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SORT_FIXEDEXPENSE_SUCCESS));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        case \"amount\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            if (sortIdentifier \u003d\u003d 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                model.sortFixedExpenseList((x, y) -\u003e (int) Math.signum(Double.parseDouble(y.getAmount().value)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        - Double.parseDouble(x.getAmount().value)));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SORT_FIXEDEXPENSE_SUCCESS));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                model.sortFixedExpenseList((Comparator.comparing(x -\u003e x.getAmount().value)));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SORT_FIXEDEXPENSE_SUCCESS));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        case \"description\":"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            if (sortIdentifier \u003d\u003d 1) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                model.sortFixedExpenseList((x, y) -\u003e y.getDescription().toString().compareTo("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        x.getDescription().toString()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SORT_FIXEDEXPENSE_SUCCESS));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                model.sortFixedExpenseList(Comparator.comparing(x -\u003e x.getDescription().toString()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SORT_FIXEDEXPENSE_SUCCESS));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    SortFixedExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "joshlay96": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/packinglist/AddItemCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "package seedu.address.logic.commands.packinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * The type Add item command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class AddItemCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant COMMAND_WORD."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"additem\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_USAGE."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an item to the packing list. \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + PREFIX_ITEM + \"NAME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + PREFIX_QUANTITY + \"QUANTITY \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + PREFIX_ITEM + \"Tshirts \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            + PREFIX_QUANTITY + 5 + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + PREFIX_CATEGORY + \"basics\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_SUCCESS."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New item added: %1$s\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_DUPLICATE_PERSON."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists in the packing list\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private final PackingListItem toAdd;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Creates an AddItemCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param item the item"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public AddItemCommand(PackingListItem item) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(item);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        toAdd \u003d item;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Execute command result."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param model the model"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the command result"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @throws CommandException the command exception"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (model.hasPackingListItem(toAdd)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        model.addPackingListItem(toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                || (other instanceof AddItemCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddItemCommand) other).toAdd));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 80,
      "joshlay96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/packinglist/CheckItemCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "package seedu.address.logic.commands.packinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PACKING_LIST_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.ItemCategory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.ItemName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.Quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * The type Check item command."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class CheckItemCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant COMMAND_WORD."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"checkitem\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_USAGE."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \": Marks the item identified by the index number used in the displayed packing list as packed.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_DELETE_ITEM_SUCCESS."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_PACKED_ITEM_SUCCESS \u003d \"Packed Item: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_DUPLICATE_ITEM."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists in the packing list.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private final CheckItemDescriptor checkItemDescriptor;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Instantiates a new Check item command."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param index               of the Item in the filtered Item list to check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param checkItemDescriptor details to edit the Item with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public CheckItemCommand(Index index, CheckItemDescriptor checkItemDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(checkItemDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.checkItemDescriptor \u003d new CheckItemDescriptor(checkItemDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        List\u003cPackingListItem\u003e lastShownList \u003d model.getFilteredPackingList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        PackingListItem itemToCheck \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        PackingListItem checkItem \u003d createCheckItem(itemToCheck, checkItemDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (!itemToCheck.isSame(checkItem) \u0026\u0026 model.hasPackingListItem(checkItem)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        model.setPackingListItem(itemToCheck, checkItem);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        model.updateFilteredPackingList(PREDICATE_SHOW_ALL_PACKING_LIST_ITEMS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_PACKED_ITEM_SUCCESS, checkItem));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Creates a new Packing List item with the new attributes."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param itemToCheck               of the Item in the filtered Item list to check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param checkItemDescriptor details to check the Item with"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private static PackingListItem createCheckItem(PackingListItem itemToCheck,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                                                   CheckItemDescriptor checkItemDescriptor) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        assert itemToCheck !\u003d null;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        ItemName updatedName \u003d itemToCheck.getItemName();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        Quantity updatedQuantity \u003d itemToCheck.getQuantity();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        ItemCategory updatedCategory \u003d itemToCheck.getItemCategory();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        Boolean isCheck \u003d checkItemDescriptor.getPacked().get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        boolean isPacked \u003d isCheck.booleanValue();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return new PackingListItem(updatedName, updatedQuantity, updatedCategory, isPacked);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (!(other instanceof CheckItemCommand)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        CheckItemCommand e \u003d (CheckItemCommand) other;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                \u0026\u0026 checkItemDescriptor.equals(e.checkItemDescriptor);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The type Check item descriptor."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static class CheckItemDescriptor {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        private boolean isPacked \u003d true;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Instantiates a new Check item descriptor."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public CheckItemDescriptor() {}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * @param toCopy the to copy"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public CheckItemDescriptor(CheckItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            setCheck(toCopy.isPacked);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Sets check."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * @param isPacked the is packed"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public void setCheck(boolean isPacked) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            this.isPacked \u003d isPacked;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Gets packed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * @return the packed"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public Optional\u003cBoolean\u003e getPacked() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return Optional.ofNullable(isPacked);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            if (!(other instanceof CheckItemDescriptor)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            CheckItemDescriptor e \u003d (CheckItemDescriptor) other;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return getPacked().equals(e.getPacked());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 180
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/packinglist/DeleteItemCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "package seedu.address.logic.commands.packinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * The type Delete item command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class DeleteItemCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant COMMAND_WORD."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteitem\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_USAGE."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \": Deletes the item identified by the index number used in the displayed packing list.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_DELETE_ITEM_SUCCESS."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_DELETE_ITEM_SUCCESS \u003d \"Deleted Item: %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Instantiates a new Delete item command."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param targetIndex the target index"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public DeleteItemCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        List\u003cPackingListItem\u003e lastShownList \u003d model.getFilteredPackingList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        PackingListItem packingListItemToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        model.deletePackingListItem(packingListItemToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ITEM_SUCCESS, packingListItemToDelete));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/packinglist/EditItemCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "package seedu.address.logic.commands.packinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PACKING_LIST_ITEMS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.ItemCategory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.ItemName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.Quantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * The type Edit item command."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class EditItemCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant COMMAND_WORD."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edititem\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_USAGE."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the item identified \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"by the index number used in the displayed packing list. \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"[\" + PREFIX_ITEM + \"NAME] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"[\" + PREFIX_QUANTITY + \"QUANTITY] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + PREFIX_QUANTITY + \"4 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + PREFIX_CATEGORY + \"essentials\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_EDIT_ITEM_SUCCESS."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_EDIT_ITEM_SUCCESS \u003d \"Edited Item: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_NOT_EDITED."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_DUPLICATE_ITEM."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists in the packing list.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private final EditItemDescriptor editItemDescriptor;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Instantiates a new Edit item command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param index              of the Item in the filtered Item list to edit"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param editItemDescriptor details to edit the Item with"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public EditItemCommand(Index index, EditItemDescriptor editItemDescriptor) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(editItemDescriptor);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.editItemDescriptor \u003d new EditItemDescriptor(editItemDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        List\u003cPackingListItem\u003e lastShownList \u003d model.getFilteredPackingList();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        PackingListItem itemToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        PackingListItem editedItem \u003d createEditedItem(itemToEdit, editItemDescriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (!itemToEdit.isSame(editedItem) \u0026\u0026 model.hasPackingListItem(editedItem)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        model.setPackingListItem(itemToEdit, editedItem);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        model.updateFilteredPackingList(PREDICATE_SHOW_ALL_PACKING_LIST_ITEMS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ITEM_SUCCESS, editedItem));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Creates a new Packing List item with the new attributes."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param itemToEdit               of the Item in the filtered Item list to edit"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param editItemDescriptor details to edit the Item with"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private static PackingListItem createEditedItem(PackingListItem itemToEdit,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                                                    EditItemDescriptor editItemDescriptor) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        assert itemToEdit !\u003d null;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        ItemName updatedName \u003d editItemDescriptor.getItemName().orElse(itemToEdit.getItemName());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        Quantity updatedQuantity \u003d editItemDescriptor.getQuantity().orElse(itemToEdit.getQuantity());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        ItemCategory updatedCategory \u003d editItemDescriptor.getItemCategory().orElse(itemToEdit.getItemCategory());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        boolean isCheck \u003d itemToEdit.getChecked();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return new PackingListItem(updatedName, updatedQuantity, updatedCategory, isCheck);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (!(other instanceof EditItemCommand)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        EditItemCommand e \u003d (EditItemCommand) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                \u0026\u0026 editItemDescriptor.equals(e.editItemDescriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The type Edit item descriptor."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static class EditItemDescriptor {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        private ItemName itemName;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        private Quantity quantity;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        private ItemCategory itemCategory;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Instantiates a new Edit item descriptor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public EditItemDescriptor() {}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         *"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * @param toCopy the to copy"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public EditItemDescriptor(EditItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            setItemName(toCopy.itemName);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            setQuantity(toCopy.quantity);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            setItemCategory(toCopy.itemCategory);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * @return the boolean"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return CollectionUtil.isAnyNonNull(itemName, quantity, itemCategory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Sets item name."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * @param itemName the item name"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public void setItemName(ItemName itemName) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Gets item name."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         *"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * @return the item name"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public Optional\u003cItemName\u003e getItemName() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return Optional.ofNullable(itemName);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Sets quantity."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         *"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * @param quantity the quantity"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public void setQuantity(Quantity quantity) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Gets quantity."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * @return the quantity"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public Optional\u003cQuantity\u003e getQuantity() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return Optional.ofNullable(quantity);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Sets item category."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * @param itemCategory the item category"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public void setItemCategory(ItemCategory itemCategory) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            this.itemCategory \u003d itemCategory;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Gets item category."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         *"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * @return the item category"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public Optional\u003cItemCategory\u003e getItemCategory() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return Optional.ofNullable(itemCategory);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            if (!(other instanceof EditItemDescriptor)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            EditItemDescriptor e \u003d (EditItemDescriptor) other;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return getItemName().equals(e.getItemName())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                    \u0026\u0026 getQuantity().equals(e.getQuantity())"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                    \u0026\u0026 getItemCategory().equals(e.getItemCategory());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 243
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/packinglist/UncheckItemCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "package seedu.address.logic.commands.packinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PACKING_LIST_ITEMS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.ItemCategory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.ItemName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.Quantity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * The type Uncheck item command."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class UncheckItemCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant COMMAND_WORD."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"uncheckitem\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_USAGE."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \": Marks the item identified by the index number used in the displayed packing list as unpacked.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_DELETE_ITEM_SUCCESS."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_PACKED_ITEM_SUCCESS \u003d \"Unpacked Item: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_DUPLICATE_ITEM."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"This item already exists in the packing list.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private final UncheckItemDescriptor uncheckItemDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Instantiates a new Edit item command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param index                 of the Item in the filtered Item list to edit"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param uncheckItemDescriptor details to edit the Item with"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public UncheckItemCommand(Index index, UncheckItemDescriptor uncheckItemDescriptor) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(uncheckItemDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.uncheckItemDescriptor \u003d new UncheckItemDescriptor(uncheckItemDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        List\u003cPackingListItem\u003e lastShownList \u003d model.getFilteredPackingList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITEM_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        PackingListItem itemToCheck \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        PackingListItem checkItem \u003d createUncheckItem(itemToCheck, uncheckItemDescriptor);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (!itemToCheck.isSame(checkItem) \u0026\u0026 model.hasPackingListItem(checkItem)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        model.setPackingListItem(itemToCheck, checkItem);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        model.updateFilteredPackingList(PREDICATE_SHOW_ALL_PACKING_LIST_ITEMS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_PACKED_ITEM_SUCCESS, checkItem));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Creates a new Packing List item with the new attributes."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param itemToUncheck               of the Item in the filtered Item list to uncheck"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param uncheckItemDescriptor details to check the Item with"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private static PackingListItem createUncheckItem(PackingListItem itemToUncheck,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                                                     UncheckItemDescriptor uncheckItemDescriptor) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        assert itemToUncheck !\u003d null;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        ItemName updatedName \u003d itemToUncheck.getItemName();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        Quantity updatedQuantity \u003d itemToUncheck.getQuantity();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        ItemCategory updatedCategory \u003d itemToUncheck.getItemCategory();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        Boolean isCheck \u003d uncheckItemDescriptor.getUnpacked().get();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        boolean isPacked \u003d isCheck.booleanValue();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return new PackingListItem(updatedName, updatedQuantity, updatedCategory, isPacked);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (!(other instanceof UncheckItemCommand)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        UncheckItemCommand e \u003d (UncheckItemCommand) other;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                \u0026\u0026 uncheckItemDescriptor.equals(e.uncheckItemDescriptor);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The type Check item descriptor."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static class UncheckItemDescriptor {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        private boolean isPacked \u003d false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Instantiates a new Uncheck item descriptor."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public UncheckItemDescriptor() {}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         *"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * @param toCopy the to copy"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public UncheckItemDescriptor(UncheckItemDescriptor toCopy) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            setCheck(toCopy.isPacked);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Sets check."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * @param isPacked the is packed"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public void setCheck(boolean isPacked) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            this.isPacked \u003d isPacked;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * Gets unpacked."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         * @return the unpacked"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public Optional\u003cBoolean\u003e getUnpacked() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return Optional.ofNullable(isPacked);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            if (!(other instanceof UncheckItemDescriptor)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            UncheckItemDescriptor e \u003d (UncheckItemDescriptor) other;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return getUnpacked().equals(e.getUnpacked());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 180
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/transportbooking/AddTransportBookingCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.logic.commands.transportbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Adds a TransportBooking to the TransportBookingManager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class AddTransportBookingCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addtransport\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a transport booking. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + PREFIX_MODE + \"MODE \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + PREFIX_START_LOCATION + \"START_LOCATION \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + PREFIX_END_LOCATION + \"END_LOCATION \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + PREFIX_START_DATE_TIME + \"START_TIME \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + PREFIX_END_DATE_TIME + \"END_TIME\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + PREFIX_MODE + \"plane \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + PREFIX_START_LOCATION + \"Singapore \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + PREFIX_END_LOCATION + \"Japan \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + PREFIX_START_DATE_TIME + \"20-03-2020 17:00 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + PREFIX_END_DATE_TIME + \"21-03-2020 00:00\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New transport booking added: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRANSPORT_BOOKING \u003d \"This transport booking already exists in the \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"list\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final TransportBooking toAdd;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Creates an AddTransportBookingCommand to add the specified {@code TransportBooking}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public AddTransportBookingCommand(TransportBooking transportBooking) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(transportBooking);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        toAdd \u003d transportBooking;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (model.hasTransportBooking(toAdd)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TRANSPORT_BOOKING);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        model.addTransportBooking(toAdd);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || (other instanceof AddTransportBookingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddTransportBookingCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/transportbooking/ClearTransportBookingCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.logic.commands.transportbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.listmanagers.TransportBookingManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " * Clears the Transport Booking List"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "public class ClearTransportBookingCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"cleartransport\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Transport Bookings has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        model.setTransportBookingManager(new TransportBookingManager());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 4,
      "joshlay96": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/transportbooking/DeleteTransportBookingCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.logic.commands.transportbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Deletes a TransportBooking identified using it\u0027s displayed index from the TransportBookingManager."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class DeleteTransportBookingCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deletetransport\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \": Deletes the transport booking identified by the index number used in the displayed transport \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"booking list.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_DELETE_TRANSPORT_BOOKING_SUCCESS \u003d \"Deleted Transport Booking: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public DeleteTransportBookingCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        List\u003cTransportBooking\u003e lastShownList \u003d model.getFilteredTransportBookingList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_DISPLAYED_INDEX_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    \"Transport Booking\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        TransportBooking transportBookingToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        model.deleteTransportBooking(transportBookingToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TRANSPORT_BOOKING_SUCCESS, transportBookingToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || (other instanceof DeleteTransportBookingCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTransportBookingCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/transportbooking/EditTransportBookingCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.logic.commands.transportbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_TRANSPORT_BOOKINGS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.core.time.DateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.Mode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Edits the details of an existing TransportBooking in the TransportBookingManager."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class EditTransportBookingCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edittransport\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the transport booking identified \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"by the index number used in the displayed transport booking list. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"[\" + PREFIX_MODE + \"MODE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"[\" + PREFIX_START_LOCATION + \"START_LOCATION] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"[\" + PREFIX_END_LOCATION + \"END_LOCATION] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"[\" + PREFIX_START_DATE_TIME + \"START_TIME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"[\" + PREFIX_END_DATE_TIME + \"END_TIME]\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + PREFIX_END_LOCATION + \"Italy \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + PREFIX_END_DATE_TIME + \"31-03-2020 22:00\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_EDIT_TRANSPORT_BOOKING_SUCCESS \u003d \"Edited Transport Booking: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRANSPORT_BOOKING \u003d \"This transport booking already exists in the \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"transport booking list.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final EditTransportBookingDescriptor editTransportBookingDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param index                          index of the transport booking in the filtered transport booking list to"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *                                       edit"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param editTransportBookingDescriptor details to edit the transport booking with"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public EditTransportBookingCommand(Index index, EditTransportBookingDescriptor editTransportBookingDescriptor) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(editTransportBookingDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.editTransportBookingDescriptor \u003d new EditTransportBookingDescriptor(editTransportBookingDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        List\u003cTransportBooking\u003e lastShownList \u003d model.getFilteredTransportBookingList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new CommandException(String.format(Messages.MESSAGE_INVALID_DISPLAYED_INDEX_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    \"transport booking\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        TransportBooking transportBookingToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        TransportBooking editedTransportBooking \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                createEditedTransportBooking(transportBookingToEdit, editTransportBookingDescriptor);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!transportBookingToEdit.isSame(editedTransportBooking)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 model.hasTransportBooking(editedTransportBooking)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TRANSPORT_BOOKING);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        model.setTransportBooking(transportBookingToEdit, editedTransportBooking);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        model.updateFilteredTransportBookingList(PREDICATE_SHOW_ALL_TRANSPORT_BOOKINGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_TRANSPORT_BOOKING_SUCCESS, editedTransportBooking));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Creates and returns a {@code TransportBooking} with the details of {@code transportBookingToEdit}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * edited with {@code editTransportBookingDescriptor}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static TransportBooking createEditedTransportBooking("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            TransportBooking transportBookingToEdit, EditTransportBookingDescriptor editTransportBookingDescriptor) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assert transportBookingToEdit !\u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Mode updatedMode \u003d editTransportBookingDescriptor.getMode().orElse(transportBookingToEdit.getMode());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Location updatedStartLocation \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                editTransportBookingDescriptor.getStartLocation().orElse(transportBookingToEdit.getStartLocation());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Location updatedEndLocation \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                editTransportBookingDescriptor.getEndLocation().orElse(transportBookingToEdit.getEndLocation());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        DateTime updatedStartDateTime \u003d"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                editTransportBookingDescriptor.getStartDateTime().orElse(transportBookingToEdit.getStartDateTime());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        DateTime updatedEndDateTime \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                editTransportBookingDescriptor.getEndDateTime().orElse(transportBookingToEdit.getEndDateTime());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new TransportBooking(updatedMode, updatedStartLocation, updatedEndLocation, updatedStartDateTime,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                updatedEndDateTime);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!(other instanceof EditTransportBookingCommand)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        EditTransportBookingCommand e \u003d (EditTransportBookingCommand) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 editTransportBookingDescriptor.equals(e.editTransportBookingDescriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Stores the details to edit the transport booking with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * corresponding field value of the transport booking."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static class EditTransportBookingDescriptor {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        private Mode mode;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        private Location startLocation;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        private Location endLocation;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        private DateTime startDateTime;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        private DateTime endDateTime;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        public EditTransportBookingDescriptor() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "         */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        public EditTransportBookingDescriptor(EditTransportBookingDescriptor toCopy) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            setMode(toCopy.mode);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            setStartLocation(toCopy.startLocation);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            setEndLocation(toCopy.endLocation);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            setStartDateTime(toCopy.startDateTime);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            setEndDateTime(toCopy.endDateTime);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "         */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return CollectionUtil.isAnyNonNull(mode, startLocation, endLocation, startLocation, endLocation);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        public void setMode(Mode mode) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            this.mode \u003d mode;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        public Optional\u003cMode\u003e getMode() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return Optional.ofNullable(mode);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        public void setStartLocation(Location startLocation) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            this.startLocation \u003d startLocation;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        public Optional\u003cLocation\u003e getStartLocation() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return Optional.ofNullable(startLocation);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        public void setEndLocation(Location endLocation) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            this.endLocation \u003d endLocation;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        public Optional\u003cLocation\u003e getEndLocation() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return Optional.ofNullable(endLocation);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        public void setStartDateTime(DateTime startDateTime) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        public Optional\u003cDateTime\u003e getStartDateTime() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return Optional.ofNullable(startDateTime);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        public void setEndDateTime(DateTime endDateTime) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        public Optional\u003cDateTime\u003e getEndDateTime() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return Optional.ofNullable(endDateTime);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (!(other instanceof EditTransportBookingDescriptor)) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            EditTransportBookingDescriptor e \u003d (EditTransportBookingDescriptor) other;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return mode.equals(e.mode)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    \u0026\u0026 startLocation.equals(e.startLocation)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    \u0026\u0026 endLocation.equals(e.endLocation)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    \u0026\u0026 startDateTime.equals(e.startDateTime)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    \u0026\u0026 endDateTime.equals(e.endDateTime);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 225
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/trip/SetTripCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.logic.commands.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRIP_BUDGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRIP_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRIP_START_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRIP_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Adds a trip to Eztravel."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class SetTripCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"settrip\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets a trip. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_TRIP_TITLE + \"TITLE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_TRIP_BUDGET + \"BUDGET \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_TRIP_START_DATE + \"STARTDATE \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_TRIP_END_DATE + \"ENDDATE \\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_TRIP_TITLE + \"Graduation Trip \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_TRIP_BUDGET + \"5000 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_TRIP_START_DATE + \"28-09-20 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + PREFIX_TRIP_END_DATE + \"5-10-20 \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Trip creation success\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRIP \u003d \"You cannot have more than one trip\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final Trip toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Creates an SetTripCommand to add the specified {@code Trip}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public SetTripCommand(Trip trip) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(trip);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        toAdd \u003d trip;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (model.hasTrip()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_TRIP);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        model.setTrip(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 1,
      "-": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"amount/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"description/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"category/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final Prefix PREFIX_ITEM \u003d new Prefix(\"item/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final Prefix PREFIX_QUANTITY \u003d new Prefix(\"quantity/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final Prefix PREFIX_ITEMCATEGORY \u003d new Prefix(\"category/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final Prefix PREFIX_MODE \u003d new Prefix(\"mode/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final Prefix PREFIX_START_LOCATION \u003d new Prefix(\"startloc/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final Prefix PREFIX_END_LOCATION \u003d new Prefix(\"endloc/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final Prefix PREFIX_START_DATE_TIME \u003d new Prefix(\"starttime/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final Prefix PREFIX_END_DATE_TIME \u003d new Prefix(\"endtime/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"title/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final Prefix PREFIX_PRIORITY \u003d new Prefix(\"priority/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"location/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final Prefix PREFIX_DURATION \u003d new Prefix(\"duration/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final Prefix PREFIX_ACCOMMODATION_NAME \u003d new Prefix(\"name/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final Prefix PREFIX_ACCOMMODATION_LOCATION \u003d new Prefix(\"loc/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final Prefix PREFIX_ACCOMMODATION_START_DAY \u003d new Prefix(\"startday/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final Prefix PREFIX_ACCOMMODATION_END_DAY \u003d new Prefix(\"endday/\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final Prefix PREFIX_ACCOMMODATION_REMARK \u003d new Prefix(\"remark/\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final Prefix PREFIX_TRIP_TITLE \u003d new Prefix(\"remark/\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final Prefix PREFIX_TRIP_START_DATE \u003d new Prefix(\"startdate/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final Prefix PREFIX_TRIP_END_DATE \u003d new Prefix(\"enddate/\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final Prefix PREFIX_TRIP_BUDGET \u003d new Prefix(\"budget/\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 4,
      "jwee97": 10,
      "Deunitato": 11,
      "zenatrick": 5,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EasyTravelParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.accommodationbooking.AddAccommodationBookingCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.accommodationbooking.ClearAccommodationBookingCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.accommodationbooking.DeleteAccommodationBookingCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.accommodationbooking.EditAccommodationBookingCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.activity.AddActivityCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.activity.ClearActivityCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.activity.DeleteActivityCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.activity.EditActivityCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.fixedexpense.AddFixedExpenseCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.fixedexpense.ClearFixedExpenseCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.fixedexpense.DeleteFixedExpenseCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.fixedexpense.EditFixedExpenseCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.fixedexpense.SortFixedExpenseCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.packinglist.AddItemCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.packinglist.CheckItemCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.packinglist.DeleteItemCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.packinglist.EditItemCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.packinglist.UncheckItemCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.transportbooking.AddTransportBookingCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.transportbooking.ClearTransportBookingCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.transportbooking.DeleteTransportBookingCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.transportbooking.EditTransportBookingCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.accommodationbooking.AddAccommodationBookingCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.accommodationbooking.DeleteAccommodationBookingCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.accommodationbooking.EditAccommodationBookingCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.activity.AddActivityParser;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.parser.activity.DeleteActivityParser;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.parser.activity.EditActivityParser;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.fixedexpense.AddFixedExpenseParser;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.parser.fixedexpense.DeleteFixedExpenseCommandParser;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.parser.fixedexpense.EditFixedExpenseParser;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.parser.fixedexpense.SortFixedExpenseCommandParser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.parser.packinglist.AddItemParser;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.packinglist.CheckItemParser;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.packinglist.DeleteItemParser;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.packinglist.EditItemParser;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.packinglist.UncheckItemParser;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.transportbooking.AddTransportBookingCommandParser;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.transportbooking.DeleteTransportBookingCommandParser;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.transportbooking.EditTransportBookingCommandParser;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class EasyTravelParser {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        // Address Book Commands"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        // Fixed Expense Commands"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        case AddFixedExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new AddFixedExpenseParser().parse(arguments);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        case ClearFixedExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return new ClearFixedExpenseCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        case DeleteFixedExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return new DeleteFixedExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        case EditFixedExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return new EditFixedExpenseParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        case SortFixedExpenseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return new SortFixedExpenseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        // Transport Booking Commands"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        case AddTransportBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new AddTransportBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        case EditTransportBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new EditTransportBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        case DeleteTransportBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new DeleteTransportBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        case ClearTransportBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new ClearTransportBookingCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        // Packing List Commands"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        case AddItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return new AddItemParser().parse(arguments);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        case CheckItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return new CheckItemParser().parse(arguments);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        case DeleteItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return new DeleteItemParser().parse(arguments);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        case EditItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return new EditItemParser().parse(arguments);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        case UncheckItemCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return new UncheckItemParser().parse(arguments);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        // Activity Manager Command"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        case AddActivityCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            return new AddActivityParser().parse(arguments);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        case DeleteActivityCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return new DeleteActivityParser().parse(arguments);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        case ClearActivityCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return new ClearActivityCommand();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        case EditActivityCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return new EditActivityParser().parse(arguments);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        case AddAccommodationBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return new AddAccommodationBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        case ClearAccommodationBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return new ClearAccommodationBookingCommand();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        case DeleteAccommodationBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return new DeleteAccommodationBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        case EditAccommodationBookingCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return new EditAccommodationBookingCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 26,
      "jwee97": 37,
      "Deunitato": 11,
      "zenatrick": 25,
      "joshlay96": 17,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 1,
      "-": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.core.time.DateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.fixedexpense.SortFixedExpenseCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.Day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Priority;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.Category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.ItemCategory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.ItemName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.Quantity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.Mode;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_INVALID_INDEX."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param oneBasedIndex the one based index"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the index"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param name the name"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the name"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param phone the phone"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the phone"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param address the address"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the address"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param email the email"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the email"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param tag the tag"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the tag"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param tags the tags"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the set"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @throws ParseException the parse exception"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Parses a {@code String amount} into a {@code Amount}."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param amount the amount"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the amount"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param description the description"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the description"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param category the category"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the category"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!Category.isValidCategory(trimmedCategory)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * Parses a {@code String sortIdentifier}"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * @param sortIdentifier identifier to sort by ascending or descending order."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * @return the String"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * @throws ParseException if the given {@code sortIdentifier} is invalid."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static String parseSortIdentifier(String sortIdentifier) throws ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        requireNonNull(sortIdentifier);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        switch(sortIdentifier) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        case SortFixedExpenseCommand.SORT_ASCENDING:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return SortFixedExpenseCommand.SORT_ASCENDING;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        case SortFixedExpenseCommand.SORT_DESCENDING:"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return SortFixedExpenseCommand.SORT_DESCENDING;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            throw new ParseException(\"String must consist of either high for descending order\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    + \" or low for ascending order\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * Parses a {@code String sortParameters} into a {@code String}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * @param sortParameters the sorting parameters"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * @return the string"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * @throws ParseException if the given {@code sortParameters} is invalid."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static String parseSortParameters(String sortParameters) throws ParseException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        requireNonNull(sortParameters);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        switch(sortParameters) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        case SortFixedExpenseCommand.AMOUNT:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return SortFixedExpenseCommand.AMOUNT;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        case SortFixedExpenseCommand.CATEGORY:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return SortFixedExpenseCommand.CATEGORY;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        case SortFixedExpenseCommand.DESCRIPTION:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return SortFixedExpenseCommand.DESCRIPTION;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            throw new ParseException(\"Parameters must consist of only amount/description/category\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Parses a {@code String mode} into an {@code Mode}."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param mode the mode"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the mode"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws ParseException if the given {@code mode} is invalid."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static Mode parseMode(String mode) throws ParseException {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        String trimmedMode \u003d mode.trim();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!Mode.isValidMode(trimmedMode)) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new ParseException(Mode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new Mode(trimmedMode);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Parses a {@code String location} into an {@code Location}."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param location the location"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the location"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Parses a {@code String time} into an {@code DateTime}."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param dateTime the date time"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the date time"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws ParseException if the given {@code time} is invalid."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static DateTime parseDateTime(String dateTime) throws ParseException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        String trimmedDateTime \u003d dateTime.trim();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!DateTime.isValidDateTime(trimmedDateTime)) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new ParseException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return DateTime.fromString(trimmedDateTime);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Parses a {@code String name} into an {@code ItemName}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param name the name"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the item name"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @throws ParseException the parse exception"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static ItemName parseItemName(String name) throws ParseException {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (!ItemName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return new ItemName(trimmedName);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Parse {@code String quantity} into a {@code Quantity}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param quantity the quantity"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the quantity"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @throws ParseException the parse exception"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static Quantity parseQuantity(String quantity) throws ParseException {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        String trimmedQuantity \u003d quantity.trim();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            Integer intQuantity \u003d Integer.parseInt(trimmedQuantity);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            if (!Quantity.isValidQuantity(intQuantity)) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                throw new ParseException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return new Quantity(intQuantity);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new ParseException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param category the category"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the item category"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @throws ParseException the parse exception"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static ItemCategory parseItemCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (!ItemCategory.isValidItemCategory(trimmedCategory)) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return new ItemCategory(trimmedCategory);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Parses a {@code String Priority} into a {@code {Priority}}."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Parses the string into an Integer"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @throws ParseException if the given {@code priority} is invalid."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static Priority parsePriority(String priority) throws ParseException {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Integer parsedPriority \u003d Integer.parseInt(priority);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (!Priority.isValidPriority(parsedPriority)) {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new ParseException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return new Priority(parsedPriority);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Parses a {@code String Duration} into a {@code {Duration}}."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Parses the string into an Integer"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @throws ParseException if the given {@code duration} is invalid."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static Duration parseDuration(String duration) throws ParseException {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Integer parseDuration \u003d Integer.parseInt(duration);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (!Duration.isValidDuration(parseDuration)) {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new ParseException(Duration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return new Duration(parseDuration);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Parses a {@code String title} into an {@code Title}."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static Title parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (!Title.isValidTitle(trimmedTitle)) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new ParseException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return new Title(trimmedTitle);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Parses a {@code String name} into an {@code AccommodationName}"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param name the name"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @return the item name"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws ParseException the parse exception"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static AccommodationName parseAccommodationName(String name) throws ParseException {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!AccommodationName.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new ParseException(AccommodationName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new AccommodationName(trimmedName);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Parses a {@code String day} into an {@code Day}"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param day the day"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @return the day"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws ParseException the parse exception"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static Day parseDay(String day) throws ParseException {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        String trimmedDay \u003d day.trim();"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!Day.isValidDay(Integer.parseInt(trimmedDay))) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new ParseException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new Day(Integer.parseInt(trimmedDay));"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Parses a {@code String remark} into an {@code Remark}"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param remark the remark"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @return the remark"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws ParseException the parse exception"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static Remark parseRemark(String remark) throws ParseException {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        String trimmedRemark \u003d remark.trim();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!Remark.isValidRemark(trimmedRemark)) {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new ParseException(Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new Remark(trimmedRemark);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 90,
      "jwee97": 96,
      "Deunitato": 48,
      "zenatrick": 53,
      "joshlay96": 50,
      "-": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/accommodationbooking/AddAccommodationBookingCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.logic.parser.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_END_DAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_START_DAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.accommodationbooking.AddAccommodationBookingCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.Day;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Parses input arguments and creates a new AddAccommodationBooking object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class AddAccommodationBookingCommandParser implements Parser\u003cAddAccommodationBookingCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAccommodationBookingCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * and returns an AddAccommodationBookingCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public AddAccommodationBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ACCOMMODATION_NAME, PREFIX_ACCOMMODATION_LOCATION,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        PREFIX_ACCOMMODATION_START_DAY, PREFIX_ACCOMMODATION_END_DAY, PREFIX_ACCOMMODATION_REMARK);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ACCOMMODATION_NAME, PREFIX_ACCOMMODATION_LOCATION,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                PREFIX_ACCOMMODATION_START_DAY, PREFIX_ACCOMMODATION_END_DAY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    AddAccommodationBookingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        AccommodationName accommodationName \u003d ParserUtil.parseAccommodationName(argMultimap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                .getValue(PREFIX_ACCOMMODATION_NAME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        Location accommodationLocation \u003d ParserUtil.parseLocation(argMultimap"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                .getValue(PREFIX_ACCOMMODATION_LOCATION).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        Day startDay \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_ACCOMMODATION_START_DAY).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        Day endDay \u003d ParserUtil.parseDay(argMultimap.getValue(PREFIX_ACCOMMODATION_END_DAY).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACCOMMODATION_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            Remark remark \u003d ParserUtil.parseRemark(argMultimap.getValue(PREFIX_ACCOMMODATION_REMARK).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            AccommodationBooking accommodationBooking \u003d new AccommodationBooking(accommodationName,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    accommodationLocation, startDay, endDay, remark);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return new AddAccommodationBookingCommand(accommodationBooking);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            Remark remark \u003d new Remark(\" \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            AccommodationBooking accommodationBooking \u003d new AccommodationBooking(accommodationName,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    accommodationLocation, startDay, endDay, remark);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return new AddAccommodationBookingCommand(accommodationBooking);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/accommodationbooking/DeleteAccommodationBookingCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.logic.parser.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.accommodationbooking.DeleteAccommodationBookingCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Parses input arguments and creates a new DeleteAccommodationBookingCommand object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class DeleteAccommodationBookingCommandParser implements Parser\u003cDeleteAccommodationBookingCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteAccommodationBookingCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * and returns a DeleteAccommodationBookingCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public DeleteAccommodationBookingCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return new DeleteAccommodationBookingCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/accommodationbooking/EditAccommodationBookingCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.logic.parser.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_END_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ACCOMMODATION_START_DAY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.accommodationbooking.EditAccommodationBookingCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Parses input arguments and creates a new EditAccommodationBookingCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class EditAccommodationBookingCommandParser implements Parser\u003cEditAccommodationBookingCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditAccommodationBookingCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * and returns an EditAccommodationBookingCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public EditAccommodationBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ACCOMMODATION_NAME, PREFIX_ACCOMMODATION_LOCATION,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        PREFIX_ACCOMMODATION_START_DAY, PREFIX_ACCOMMODATION_END_DAY, PREFIX_ACCOMMODATION_REMARK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    EditAccommodationBookingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        EditAccommodationBookingCommand.EditAccommodationBookingDescriptor editAccommodationBookingDescriptor \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new EditAccommodationBookingCommand.EditAccommodationBookingDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACCOMMODATION_NAME).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            editAccommodationBookingDescriptor.setAccommodationName(ParserUtil.parseAccommodationName(argMultimap"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    .getValue(PREFIX_ACCOMMODATION_NAME).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACCOMMODATION_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            editAccommodationBookingDescriptor.setLocation(ParserUtil.parseLocation(argMultimap"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    .getValue(PREFIX_ACCOMMODATION_LOCATION).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACCOMMODATION_START_DAY).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            editAccommodationBookingDescriptor.setStartDay(ParserUtil.parseDay(argMultimap"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    .getValue(PREFIX_ACCOMMODATION_START_DAY).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACCOMMODATION_END_DAY).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            editAccommodationBookingDescriptor.setEndDay(ParserUtil.parseDay(argMultimap"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    .getValue(PREFIX_ACCOMMODATION_END_DAY).get()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ACCOMMODATION_REMARK).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            editAccommodationBookingDescriptor.setRemark(ParserUtil.parseRemark(argMultimap"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    .getValue(PREFIX_ACCOMMODATION_REMARK).get()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!editAccommodationBookingDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new EditAccommodationBookingCommand(index, editAccommodationBookingDescriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/activity/AddActivityParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.logic.parser.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.activity.AddActivityCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Duration;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Priority;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Title;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class AddActivityParser implements Parser\u003cAddActivityCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddActivityCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * and returns an AddActivityCommand object for execution."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public AddActivityCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE, PREFIX_PRIORITY,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                        PREFIX_DURATION, PREFIX_LOCATION, PREFIX_TAG);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TITLE, PREFIX_PRIORITY, PREFIX_DURATION, PREFIX_LOCATION)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    AddActivityCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Title title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Priority priority \u003d ParserUtil.parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Duration duration \u003d ParserUtil.parseDuration(argMultimap.getValue(PREFIX_DURATION).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Activity activity \u003d new Activity(title, priority, duration, location, tagList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return new AddActivityCommand(activity);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/activity/DeleteActivityParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.logic.parser.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.activity.DeleteActivityCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Parses input arguments and creates a new DeleteActivityCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class DeleteActivityParser implements Parser\u003cDeleteActivityCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public DeleteActivityCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            return new DeleteActivityCommand(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    DeleteActivityCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/activity/EditActivityParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.logic.parser.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DURATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRIORITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.activity.EditActivityCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Parses input arguments and creates a new EditActivityCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class EditActivityParser implements Parser\u003cEditActivityCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public EditActivityCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TITLE ,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                        PREFIX_PRIORITY, PREFIX_DURATION, PREFIX_LOCATION, PREFIX_TAG);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    EditActivityCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        EditActivityCommand.EditActivityDescriptor editActivityDescriptor \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                new EditActivityCommand.EditActivityDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TITLE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            editActivityDescriptor.setTitle(ParserUtil"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    .parseTitle(argMultimap.getValue(PREFIX_TITLE).get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRIORITY).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            editActivityDescriptor.setPriority(ParserUtil"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    .parsePriority(argMultimap.getValue(PREFIX_PRIORITY).get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DURATION).isPresent()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            editActivityDescriptor.setDuration(ParserUtil"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    .parseDuration(argMultimap.getValue(PREFIX_DURATION).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            editActivityDescriptor.setLocation(ParserUtil"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    .parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editActivityDescriptor::setTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (!editActivityDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new ParseException(EditActivityCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return new EditActivityCommand(index, editActivityDescriptor);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/fixedexpense/AddFixedExpenseParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.logic.parser.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.commands.fixedexpense.AddFixedExpenseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class AddFixedExpenseParser implements Parser\u003cAddFixedExpenseCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddFixedExpenseCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * and returns an AddFixedExpenseCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public AddFixedExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_DESCRIPTION, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_AMOUNT, PREFIX_DESCRIPTION, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    AddFixedExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        FixedExpense fixedExpense \u003d new FixedExpense(amount, description, category);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new AddFixedExpenseCommand(fixedExpense);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 57,
      "zenatrick": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/fixedexpense/DeleteFixedExpenseCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.logic.parser.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.fixedexpense.DeleteFixedExpenseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " * Parses input arguments and creates a new DeleteFixedExpenseCommand."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "public class DeleteFixedExpenseCommandParser implements Parser\u003cDeleteFixedExpenseCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public DeleteFixedExpenseCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return new DeleteFixedExpenseCommand(index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/fixedexpense/EditFixedExpenseParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.logic.parser.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.fixedexpense.EditFixedExpenseCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " * Parses input arguments and creates a new EditFixedExpenseCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "public class EditFixedExpenseParser implements Parser\u003cEditFixedExpenseCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public EditFixedExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_DESCRIPTION, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    EditFixedExpenseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        EditFixedExpenseCommand.EditFixedExpenseDescriptor editFixedExpenseDescriptor \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new EditFixedExpenseCommand.EditFixedExpenseDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            editFixedExpenseDescriptor.setAmount(ParserUtil"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    .parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            editFixedExpenseDescriptor.setCategory(ParserUtil"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    .parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            editFixedExpenseDescriptor.setDescription(ParserUtil"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    .parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        if (!editFixedExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            throw new ParseException(EditFixedExpenseCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        return new EditFixedExpenseCommand(index, editFixedExpenseDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/fixedexpense/SortFixedExpenseCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.logic.parser.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.commands.fixedexpense.SortFixedExpenseCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " * Parses input arguments and creates a SortFixedExpenseCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "public class SortFixedExpenseCommandParser implements Parser\u003cSortFixedExpenseCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortFixedExpenseCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * and returns an SortFixedExpenseCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public SortFixedExpenseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            if (args.length() \u003c 1) { //The case where nothing is placed after sortexpense"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        SortFixedExpenseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            String parseSortIdentifier \u003d ParserUtil.parseSortIdentifier(args.substring(1, 2));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            String parseSortParameter \u003d ParserUtil.parseSortParameters(args.substring(2).trim().toLowerCase());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return new SortFixedExpenseCommand(Integer.parseInt(parseSortIdentifier), parseSortParameter);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    SortFixedExpenseCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/packinglist/AddItemParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "package seedu.address.logic.parser.packinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEMCATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.packinglist.AddItemCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.ItemCategory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.ItemName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.Quantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * The type Add item parser."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class AddItemParser implements Parser\u003cAddItemCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddItemCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * and returns an AddItemCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public AddItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ITEM, PREFIX_QUANTITY, PREFIX_ITEMCATEGORY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_ITEM, PREFIX_QUANTITY, PREFIX_ITEMCATEGORY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                    AddItemCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        ItemName name \u003d ParserUtil.parseItemName(argMultimap.getValue(PREFIX_ITEM).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        Quantity quantity \u003d ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        ItemCategory category \u003d ParserUtil.parseItemCategory(argMultimap.getValue(PREFIX_ITEMCATEGORY).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        PackingListItem packingListItem \u003d new PackingListItem(name, quantity, category, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return new AddItemCommand(packingListItem);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/packinglist/CheckItemParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "package seedu.address.logic.parser.packinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.packinglist.CheckItemCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.packinglist.CheckItemCommand.CheckItemDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * The type Check item parser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class CheckItemParser implements Parser\u003cCheckItemCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public CheckItemCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            CheckItemDescriptor checkItemDescriptor \u003d new CheckItemDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return new CheckItemCommand(index, checkItemDescriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CheckItemCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/packinglist/DeleteItemParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "package seedu.address.logic.parser.packinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.packinglist.DeleteItemCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * The type Delete item parser."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class DeleteItemParser implements Parser\u003cDeleteItemCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public DeleteItemCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return new DeleteItemCommand(index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new ParseException(String.format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                    (MESSAGE_INVALID_COMMAND_FORMAT, DeleteItemCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/packinglist/EditItemParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "package seedu.address.logic.parser.packinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ITEMCATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_QUANTITY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.packinglist.EditItemCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.packinglist.EditItemCommand.EditItemDescriptor;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * The type Edit item parser."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class EditItemParser implements Parser\u003cEditItemCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public EditItemCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ITEM, PREFIX_QUANTITY, PREFIX_ITEMCATEGORY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditItemCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        EditItemDescriptor editItemDescriptor \u003d new EditItemDescriptor();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ITEM).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            editItemDescriptor.setItemName(ParserUtil.parseItemName(argMultimap.getValue(PREFIX_ITEM).get()));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (argMultimap.getValue(PREFIX_QUANTITY).isPresent()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            editItemDescriptor.setQuantity(ParserUtil.parseQuantity(argMultimap.getValue(PREFIX_QUANTITY).get()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ITEMCATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            editItemDescriptor.setItemCategory(ParserUtil.parseItemCategory"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                    (argMultimap.getValue(PREFIX_ITEMCATEGORY).get()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (!editItemDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new ParseException(EditItemCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return new EditItemCommand(index, editItemDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/packinglist/UncheckItemParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "package seedu.address.logic.parser.packinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.packinglist.UncheckItemCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.commands.packinglist.UncheckItemCommand.UncheckItemDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * The type Uncheck item parser."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class UncheckItemParser implements Parser\u003cUncheckItemCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public UncheckItemCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            UncheckItemDescriptor uncheckItemDescriptor \u003d new UncheckItemDescriptor();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return new UncheckItemCommand(index, uncheckItemDescriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                    UncheckItemCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/transportbooking/AddTransportBookingCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.logic.parser.transportbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_LOCATION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.core.time.DateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.transportbooking.AddTransportBookingCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.Mode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class AddTransportBookingCommandParser implements Parser\u003cAddTransportBookingCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public AddTransportBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODE, PREFIX_START_LOCATION, PREFIX_END_LOCATION,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                        PREFIX_START_DATE_TIME, PREFIX_END_DATE_TIME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MODE, PREFIX_START_LOCATION, PREFIX_END_LOCATION,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                PREFIX_START_DATE_TIME, PREFIX_END_DATE_TIME) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    AddTransportBookingCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Mode mode \u003d ParserUtil.parseMode(argMultimap.getValue(PREFIX_MODE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Location startLocation \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_START_LOCATION).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Location endLocation \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_END_LOCATION).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        DateTime startDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_START_DATE_TIME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        DateTime endDateTime \u003d ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_END_DATE_TIME).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        TransportBooking transportBooking \u003d new TransportBooking(mode, startLocation, endLocation, startDateTime,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                endDateTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new AddTransportBookingCommand(transportBooking);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/transportbooking/DeleteTransportBookingCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.logic.parser.transportbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.transportbooking.DeleteTransportBookingCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Parses input arguments and creates a new DeleteTransportBookingCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class DeleteTransportBookingCommandParser implements Parser\u003cDeleteTransportBookingCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteTransportBookingCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * and returns a DeleteTransportBookingCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public DeleteTransportBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return new DeleteTransportBookingCommand(index);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteTransportBookingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/transportbooking/EditTransportBookingCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.logic.parser.transportbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE_TIME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_LOCATION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.transportbooking.EditTransportBookingCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.commands.transportbooking.EditTransportBookingCommand.EditTransportBookingDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Parses input arguments and creates a new EditTransportBookingCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class EditTransportBookingCommandParser implements Parser\u003cEditTransportBookingCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditTransportBookingCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * and returns an EditTransportBookingCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public EditTransportBookingCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MODE, PREFIX_START_LOCATION, PREFIX_END_LOCATION,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                        PREFIX_START_DATE_TIME, PREFIX_END_DATE_TIME);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    EditTransportBookingCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        EditTransportBookingDescriptor editTransportBookingDescriptor \u003d new EditTransportBookingDescriptor();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (argMultimap.getValue(PREFIX_MODE).isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            editTransportBookingDescriptor.setMode(ParserUtil.parseMode(argMultimap.getValue(PREFIX_MODE).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            editTransportBookingDescriptor.setStartLocation("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    ParserUtil.parseLocation(argMultimap.getValue(PREFIX_START_LOCATION).get()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            editTransportBookingDescriptor.setEndLocation("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    ParserUtil.parseLocation(argMultimap.getValue(PREFIX_END_LOCATION).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE_TIME).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            editTransportBookingDescriptor.setStartDateTime("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_START_DATE_TIME).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE_TIME).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            editTransportBookingDescriptor.setEndDateTime("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    ParserUtil.parseDateTime(argMultimap.getValue(PREFIX_END_DATE_TIME).get()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!editTransportBookingDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new ParseException(EditTransportBookingCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new EditTransportBookingCommand(index, editTransportBookingDescriptor);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyAccommodationBookingManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyActivityManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyFixedExpenseManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyPackingListManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyTransportBookingManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Predicate\u003cTransportBooking\u003e PREDICATE_SHOW_ALL_TRANSPORT_BOOKINGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Predicate\u003cFixedExpense\u003e PREDICATE_SHOW_ALL_FIXED_EXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Predicate\u003cPackingListItem\u003e PREDICATE_SHOW_ALL_PACKING_LIST_ITEMS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    Predicate\u003cActivity\u003e PREDICATE_SHOW_ALL_ACTIVITIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    Predicate\u003cAccommodationBooking\u003e PREDICATE_SHOW_ALL_ACCOMMODATION_BOOKINGS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TransportBookingManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the TransportBookingManager"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    ReadOnlyTransportBookingManager getTransportBookingManager();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces TransportBookingManager data with the data in {@code transportBookingManager}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void setTransportBookingManager(ReadOnlyTransportBookingManager transportBookingManager);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if a transport booking that is the same as {@code target} exists in the"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * TransportBookingManager."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param target the given transport booking."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return true if the given transport booking already exist in the TransportBookingManager."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    boolean hasTransportBooking(TransportBooking target);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Deletes the given transport booking."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The transport booking must exist in the TransportBookingManager."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param toDelete the given transport booking."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void deleteTransportBooking(TransportBooking toDelete);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Adds the given transport booking."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code toAdd} must not already exist in the TransportBookingManager."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param toAdd the given transport booking."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void addTransportBooking(TransportBooking toAdd);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces the given transport booking {@code target} with {@code edited}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code target} must exist in the TransportBookingManager."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code edited} must not be the same as another existing transport booking in the address book."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param target the given target transport booking."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param edited the given edited transport booking."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void setTransportBooking(TransportBooking target, TransportBooking edited);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns an unmodifiable view of the filtered transport booking list"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    ObservableList\u003cTransportBooking\u003e getFilteredTransportBookingList();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Updates the filter of the filtered transport booking list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param predicate the given predicate."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void updateFilteredTransportBookingList(Predicate\u003cTransportBooking\u003e predicate);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FixedExpenseManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns the FixedExpenseManager"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    ReadOnlyFixedExpenseManager getFixedExpenseManager();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces FixedExpenseManager data with the data in {@code fixedExpenseManager}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void setFixedExpenseManager(ReadOnlyFixedExpenseManager fixedExpenseManager);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if a fixed expense that is the same as {@code target} exists in the"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * FixedExpenseManager."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param target the given fixed expense."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return true if the given fixed expense already exist in the FixedExpenseManager."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    boolean hasFixedExpense(FixedExpense target);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Deletes the given fixed expense."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The fixed expense must exist in the FixedExpenseManager."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param toDelete the given fixed expense."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void deleteFixedExpense(FixedExpense toDelete);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Adds the given fixed expense."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code toAdd} must not already exist in the FixedExpenseManager."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param toAdd the given fixed expense."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void addFixedExpense(FixedExpense toAdd);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces the given fixed expense {@code target} with {@code edited}."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code target} must exist in the FixedExpenseManager."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code edited} must not be the same as another existing fixed expense in the address book."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param target the given target fixed expense."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param edited the given edited fixed expense."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void setFixedExpense(FixedExpense target, FixedExpense edited);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * Sorts the given fixed expense list."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * @param cmp the given target fixed expense."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    void sortFixedExpenseList(Comparator\u003cFixedExpense\u003e cmp);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns an unmodifiable view of the filtered fixed expense list"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    ObservableList\u003cFixedExpense\u003e getFilteredFixedExpenseList();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Updates the filter of the filtered fixed expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param predicate the given predicate."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void updateFilteredFixedExpenseList(Predicate\u003cFixedExpense\u003e predicate);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PackingListManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns the PackingListManager"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    ReadOnlyPackingListManager getPackingListManager();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces PackingListManager data with the data in {@code packingListManager}."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void setPackingListManager(ReadOnlyPackingListManager packingListManager);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if a packing list item that is the same as {@code target} exists in the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * PackingListManager."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param target the given packing list item."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @return true if the given packing list item already exist in the PackingListManager."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    boolean hasPackingListItem(PackingListItem target);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Deletes the given packing list item."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The packing list item must exist in the PackingListManager."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param toDelete the given packing list item."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void deletePackingListItem(PackingListItem toDelete);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Adds the given packing list item."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code toAdd} must not already exist in the PackingListManager."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param toAdd the given packing list item."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void addPackingListItem(PackingListItem toAdd);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces the given packing list item {@code target} with {@code edited}."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code target} must exist in the PackingListManager."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code edited} must not be the same as another existing packing list item in the address book."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param target the given target packing list item."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param edited the given edited packing list item."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void setPackingListItem(PackingListItem target, PackingListItem edited);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns an unmodifiable view of the filtered packing list item list"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    ObservableList\u003cPackingListItem\u003e getFilteredPackingList();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Updates the filter of the filtered packing list item list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param predicate the given predicate."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void updateFilteredPackingList(Predicate\u003cPackingListItem\u003e predicate);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ActivityManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns the activityManager"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    ReadOnlyActivityManager getActivityManager();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Replaces activityManagerv data with the data in {@code activityManager}."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    void setActivityManager(ReadOnlyActivityManager activityManager);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns true if a activity that is the same as {@code target} exists in the"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * ActivityManager."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @param target the given activity."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @return true if the given activity already exist in the ActivityManager."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    boolean hasActivity(Activity target);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Deletes the given activity."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * The activity must exist in the ActivityManager."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @param toDelete the given activity."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    void deleteActivity(Activity toDelete);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Adds the given activity."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * {@code toAdd} must not already exist in the ActivityManager."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @param toAdd the given activity."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    void addActivity(Activity toAdd);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Replaces the given activity {@code target} with {@code edited}."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * {@code target} must exist in the ActivityManager."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * {@code edited} must not be the same as another existing activity in the ActivityManager."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @param target the given target activity."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @param edited the given edited activity."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    void setActivity(Activity target, Activity edited);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns an unmodifiable view of the filtered activity list"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredActivityList();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Updates the filter of the filtered activity list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @param predicate the given predicate."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AccommodationBookingManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns the AccommodationBookingManager"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    ReadOnlyAccommodationBookingManager getAccommodationBookingManager();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Replaces AccommodationBookingManager data with the data in {@code accommodationBookingManager}."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    void setAccommodationBookingManager(ReadOnlyAccommodationBookingManager accommodationBookingManager);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns true if a accommodation booking that is the same as {@code target} exists in the"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * AccommodationBookingManager."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param target the given accommodation booking."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @return true if the given accommodation booking already exist in the AccommodationBookingManager."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    boolean hasAccommodationBooking(AccommodationBooking target);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Deletes the given accommodation booking."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * The accommodation booking must exist in the AccommodationBookingManager."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param toDelete the given accommodation booking."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    void deleteAccommodationBooking(AccommodationBooking toDelete);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Adds the given accommodation booking."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * {@code toAdd} must not already exist in the AccommodationBookingManager."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param toAdd the given accommodation booking."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    void addAccommodationBooking(AccommodationBooking toAdd);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Replaces the given accommodation booking {@code target} with {@code edited}."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * {@code target} must exist in the AccommodationBookingManager."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * {@code edited} must not be the same as another existing accommodation booking in the address book."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param target the given target accommodation booking."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param edited the given edited accommodation booking."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    void setAccommodationBooking(AccommodationBooking target, AccommodationBooking edited);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns an unmodifiable view of the filtered transport booking list"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    ObservableList\u003cAccommodationBooking\u003e getFilteredAccommodationBookingList();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Updates the filter of the filtered accommodation booking list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param predicate the given predicate."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    void updateFilteredAccommodationBookingList(Predicate\u003cAccommodationBooking\u003e predicate);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Trip Manager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns true if a trip that is the same as {@code target} exists in EzTravel."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @return true if the given fixed expense already exist in the FixedExpenseManager."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    boolean hasTrip();"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Replaces the current trip with {@code edited}."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * {@code target} must exist in ez travel"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @param edited the given edited trip"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    void setTrip(Trip edited);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Deletes the trip"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * The trip must exist."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    void deleteTrip();"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 83,
      "Deunitato": 93,
      "zenatrick": 199,
      "joshlay96": 10,
      "-": 84
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.AccommodationBookingManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ActivityManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.FixedExpenseManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.PackingListManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyAccommodationBookingManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyActivityManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyFixedExpenseManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyPackingListManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyTransportBookingManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.TransportBookingManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.trip.ReadOnlyTripManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.trip.TripManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final TransportBookingManager transportBookingManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final FixedExpenseManager fixedExpenseManager;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final PackingListManager packingListManager;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final ActivityManager activityManager;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final AccommodationBookingManager accommodationBookingManager;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final TripManager tripManager;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final FilteredList\u003cTransportBooking\u003e filteredTransportBookingList;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final FilteredList\u003cFixedExpense\u003e filteredFixedExpenseList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final FilteredList\u003cPackingListItem\u003e filteredPackingList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final FilteredList\u003cActivity\u003e filteredActivityList;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final FilteredList\u003cAccommodationBooking\u003e filteredAccommodationBookingList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Initializes a ModelManager with the given managers and userPrefs."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyTransportBookingManager transportBookingManager,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                        ReadOnlyFixedExpenseManager fixedExpenseManager, ReadOnlyPackingListManager packingListManager,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        ReadOnlyActivityManager activityManager,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                        ReadOnlyAccommodationBookingManager accommodationBookingManager,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                        ReadOnlyTripManager tripManager, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireAllNonNull(addressBook, transportBookingManager, fixedExpenseManager,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                packingListManager, activityManager, accommodationBookingManager, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.transportBookingManager \u003d new TransportBookingManager(transportBookingManager);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.fixedExpenseManager \u003d new FixedExpenseManager(fixedExpenseManager);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.packingListManager \u003d new PackingListManager(packingListManager);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.activityManager \u003d new ActivityManager(activityManager);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.accommodationBookingManager \u003d new AccommodationBookingManager(accommodationBookingManager);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.tripManager \u003d new TripManager();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        filteredTransportBookingList \u003d new FilteredList\u003c\u003e(this.transportBookingManager.getTransportBookings());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        filteredFixedExpenseList \u003d new FilteredList\u003c\u003e(this.fixedExpenseManager.getFixedExpenseList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        filteredPackingList \u003d new FilteredList\u003c\u003e(this.packingListManager.getPackingList());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        filteredActivityList \u003d new FilteredList\u003c\u003e(this.activityManager.getActivityList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        filteredAccommodationBookingList \u003d new FilteredList\u003c\u003e((this.accommodationBookingManager"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                .getAccommodationBookingList()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this(new AddressBook(), new TransportBookingManager(), new FixedExpenseManager(), new PackingListManager(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                new ActivityManager(), new AccommodationBookingManager(), new TripManager(), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // Temporary constructor"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyTransportBookingManager transportBookingManager,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        ReadOnlyFixedExpenseManager fixedExpenseManager,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                        ReadOnlyAccommodationBookingManager accommodationBookingManager,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                        ReadOnlyPackingListManager packingListManager, ReadOnlyTripManager tripManager,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this(addressBook, transportBookingManager, fixedExpenseManager, packingListManager,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                new ActivityManager(), accommodationBookingManager, tripManager, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // TODO: Implement the methods below"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TransportBookingManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public ReadOnlyTransportBookingManager getTransportBookingManager() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return transportBookingManager;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setTransportBookingManager(ReadOnlyTransportBookingManager transportBookingManager) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.transportBookingManager.resetData(transportBookingManager);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean hasTransportBooking(TransportBooking target) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return transportBookingManager.hasTransportBooking(target);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void deleteTransportBooking(TransportBooking toDelete) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        transportBookingManager.removeTransportBooking(toDelete);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void addTransportBooking(TransportBooking toAdd) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        transportBookingManager.addTransportBooking(toAdd);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        updateFilteredTransportBookingList(PREDICATE_SHOW_ALL_TRANSPORT_BOOKINGS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setTransportBooking(TransportBooking target, TransportBooking edited) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        transportBookingManager.setTransportBooking(target, edited);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public ObservableList\u003cTransportBooking\u003e getFilteredTransportBookingList() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return filteredTransportBookingList;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void updateFilteredTransportBookingList(Predicate\u003cTransportBooking\u003e predicate) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        filteredTransportBookingList.setPredicate(predicate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FixedExpenseManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public ReadOnlyFixedExpenseManager getFixedExpenseManager() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return fixedExpenseManager;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setFixedExpenseManager(ReadOnlyFixedExpenseManager fixedExpenseManager) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.fixedExpenseManager.resetData(fixedExpenseManager);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean hasFixedExpense(FixedExpense target) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return fixedExpenseManager.hasFixedExpense(target);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void deleteFixedExpense(FixedExpense toDelete) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        fixedExpenseManager.removeFixedExpense(toDelete);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void addFixedExpense(FixedExpense toAdd) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        fixedExpenseManager.addFixedExpense(toAdd);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        updateFilteredFixedExpenseList(PREDICATE_SHOW_ALL_FIXED_EXPENSES);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setFixedExpense(FixedExpense target, FixedExpense edited) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        fixedExpenseManager.setFixedExpense(target, edited);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void sortFixedExpenseList(Comparator\u003cFixedExpense\u003e cmp) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        requireNonNull(cmp);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        fixedExpenseManager.sortFixedExpenseList(cmp);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public ObservableList\u003cFixedExpense\u003e getFilteredFixedExpenseList() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return filteredFixedExpenseList;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void updateFilteredFixedExpenseList(Predicate\u003cFixedExpense\u003e predicate) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        filteredFixedExpenseList.setPredicate(predicate);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d PackingListManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public ReadOnlyPackingListManager getPackingListManager() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return packingListManager;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setPackingListManager(ReadOnlyPackingListManager packingListManager) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireAllNonNull(packingListManager);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.packingListManager.resetData(packingListManager);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean hasPackingListItem(PackingListItem target) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return packingListManager.hasPackingListItem(target);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void deletePackingListItem(PackingListItem toDelete) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        packingListManager.removePackingListItem(toDelete);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void addPackingListItem(PackingListItem toAdd) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        packingListManager.addPackingListItem(toAdd);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        updateFilteredPackingList(PREDICATE_SHOW_ALL_PACKING_LIST_ITEMS);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setPackingListItem(PackingListItem target, PackingListItem edited) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        packingListManager.setPackingListItem(target, edited);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public ObservableList\u003cPackingListItem\u003e getFilteredPackingList() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return filteredPackingList;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void updateFilteredPackingList(Predicate\u003cPackingListItem\u003e predicate) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        filteredPackingList.setPredicate(predicate);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ActivityManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ReadOnlyActivityManager getActivityManager() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return activityManager;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setActivityManager(ReadOnlyActivityManager activityManager) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.activityManager.resetData(activityManager);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean hasActivity(Activity target) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return activityManager.hasActivity(target);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void deleteActivity(Activity toDelete) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        activityManager.removeActivity(toDelete);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void addActivity(Activity toAdd) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        activityManager.addActivity(toAdd);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        updateFilteredActivityList(PREDICATE_SHOW_ALL_ACTIVITIES);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setActivity(Activity target, Activity edited) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        activityManager.setActivity(target, edited);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return filteredActivityList;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        filteredActivityList.setPredicate(predicate);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AccommodationBookingManager \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public ReadOnlyAccommodationBookingManager getAccommodationBookingManager() {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return accommodationBookingManager;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void setAccommodationBookingManager(ReadOnlyAccommodationBookingManager accommodationBookingManager) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.accommodationBookingManager.resetData(accommodationBookingManager);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public boolean hasAccommodationBooking(AccommodationBooking target) {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(target);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return accommodationBookingManager.hasAccommodationBooking(target);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void deleteAccommodationBooking(AccommodationBooking toDelete) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        accommodationBookingManager.removeAccommodationBooking(toDelete);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void addAccommodationBooking(AccommodationBooking toAdd) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        accommodationBookingManager.addAccommodationBooking(toAdd);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        updateFilteredAccommodationBookingList(PREDICATE_SHOW_ALL_ACCOMMODATION_BOOKINGS);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void setAccommodationBooking(AccommodationBooking target, AccommodationBooking edited) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        accommodationBookingManager.setAccommodationBooking(target, edited);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public ObservableList\u003cAccommodationBooking\u003e getFilteredAccommodationBookingList() {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return filteredAccommodationBookingList;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void updateFilteredAccommodationBookingList(Predicate\u003cAccommodationBooking\u003e predicate) {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        filteredAccommodationBookingList.setPredicate(predicate);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    // --- Trip --  //"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean hasTrip() {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return tripManager.hasTrip();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setTrip(Trip toAdd) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        tripManager.setTrip(toAdd);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void deleteTrip() {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        tripManager.removeTrip();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u0026\u0026 transportBookingManager.equals(other.transportBookingManager)"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u0026\u0026 fixedExpenseManager.equals(other.fixedExpenseManager)"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u0026\u0026 packingListManager.equals(other.packingListManager)"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u0026\u0026 activityManager.equals(other.activityManager)"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u0026\u0026 accommodationBookingManager.equals(other.accommodationBookingManager);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 13,
      "jwee97": 76,
      "Deunitato": 79,
      "zenatrick": 149,
      "joshlay96": 8,
      "-": 147
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/AccommodationBookingManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.uniquelist.UniqueList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Wraps all data at the AccommodationBookingManager level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class AccommodationBookingManager implements ReadOnlyAccommodationBookingManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final UniqueList\u003cAccommodationBooking\u003e accommodationBookings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Instantiates a new AccommodationBookingManager."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public AccommodationBookingManager() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        accommodationBookings \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Creates an AccommodationBookingManager using the AccommodationBookings in the {@code toBeCopied}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public AccommodationBookingManager(ReadOnlyAccommodationBookingManager toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        accommodationBookings \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // List overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces the contents of the accommodation booking list with {@code accommodation bookings}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * {@code accommodationBookings} must not contain duplicate accommodation bookings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void setAccommodationBookings(List\u003cAccommodationBooking\u003e accommodationBookings) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.accommodationBookings.setElements(accommodationBookings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Resets the existing data of this {@code AccommodationBookingManager} with {@code newData}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void resetData(ReadOnlyAccommodationBookingManager newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        setAccommodationBookings(newData.getAccommodationBookingList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // AccommodationBooking-level operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns true if a accommodation booking with the same identity as {@code accommodationBooking} exists in the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * AccommodationBookingManager."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public boolean hasAccommodationBooking(AccommodationBooking accommodationBooking) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(accommodationBooking);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return accommodationBookings.contains(accommodationBooking);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Adds a accommodation booking to the AccommodationBookingManager."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * The accommodation booking must not already exist in the AccommodationBookingManager."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void addAccommodationBooking(AccommodationBooking accommodationBooking) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        accommodationBookings.add(accommodationBooking);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Replaces the given accommodation booking {@code target} in the list with {@code editedAccommodationBooking}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * {@code target} must exist in the AccommodationBookingManager."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * The accommodation booking identity of {@code editedAccommodationBooking} must not be the same as another existing"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * accommodation booking in the AccommodationBookingManager."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void setAccommodationBooking(AccommodationBooking target, AccommodationBooking editedAccommodationBooking) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(editedAccommodationBooking);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        accommodationBookings.setElement(target, editedAccommodationBooking);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Removes {@code key} from this {@code AccommodationBookingManager}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * {@code key} must exist in the AccommodationBookingManager."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void removeAccommodationBooking(AccommodationBooking key) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        accommodationBookings.remove(key);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // Util methods"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return accommodationBookings.asUnmodifiableObservableList().size() + \" accommodation bookings\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public ObservableList\u003cAccommodationBooking\u003e getAccommodationBookingList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return accommodationBookings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                || (other instanceof AccommodationBookingManager // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u0026\u0026 accommodationBookings.equals(((AccommodationBookingManager) other).accommodationBookings));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return accommodationBookings.hashCode();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 99,
      "zenatrick": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/ActivityManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.uniquelist.UniqueList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Wraps all data at the ActivityManager level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Duplicates are not allowed (by.equals comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class ActivityManager implements ReadOnlyActivityManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final UniqueList\u003cActivity\u003e activities;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Instantiates a new ActivityManager."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ActivityManager() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        activities \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Creates an ActivityManager using the Activities in the {@code} toBeCopied}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ActivityManager(ReadOnlyActivityManager toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        activities \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // List overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces the contents of the activity list with {@code activities}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setActivities(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.activities.setElements(activities);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Resets the existing data of this {@code ActivityManager} with {@code newData}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void resetData(ReadOnlyActivityManager newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        setActivities(newData.getActivityList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // Activity-level operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if an activity with the same identity as {@code activity} exists in the ActivityManager."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return activities.contains(activity);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Adds an activity to the ActivityManager."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The activity must not already exist in the ActivityManager."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        activities.add(activity);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces the given activity {@code target} in the list with {@code editedActivity}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code target} must exist in the ActivityManager."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity in the"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * ActivityManager."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(editedActivity);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        activities.setElement(target, editedActivity);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Removes {@code key} from this {@code ActivityManager}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * {@code key} must exist in the ActivityManager."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void removeActivity(Activity key) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        activities.remove(key);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // Util methods"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return activities.asUnmodifiableObservableList().size() + \"  activities\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ObservableList\u003cActivity\u003e getActivityList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return activities.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                || (other instanceof ActivityManager // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 activities.equals(((ActivityManager) other).activities));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return activities.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 70,
      "zenatrick": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/FixedExpenseManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.uniquelist.UniqueList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Wraps all data at the FixedExpenseManager level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Duplicates are not allowed (by.equals comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class FixedExpenseManager implements ReadOnlyFixedExpenseManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final UniqueList\u003cFixedExpense\u003e uniqueFixedExpenseLists;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Instantiates a new FixedExpenseManager."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public FixedExpenseManager() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        uniqueFixedExpenseLists \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Creates an FixedExpenseManager using the FixedExpenses in the {@code} toBeCopied}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public FixedExpenseManager(ReadOnlyFixedExpenseManager toBeCopied) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        uniqueFixedExpenseLists \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces the contents of the fixed expense list with {@code fixedExpenses}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code fixedExpenses} must not contain duplicate fixed expenses."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setFixedExpenses(List\u003cFixedExpense\u003e fixedExpenses) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.uniqueFixedExpenseLists.setElements(fixedExpenses);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // List overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Resets the existing data of this {@code FixedExpenseManager} with {@code newData}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void resetData(ReadOnlyFixedExpenseManager newData) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        setFixedExpenses(newData.getFixedExpenseList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // FixedExpense-level operations"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if a fixedExpense with the same identity as {@code fixedExpense} exists in the FixedExpenseManager."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean hasFixedExpense(FixedExpense fixedExpense) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(fixedExpense);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return uniqueFixedExpenseLists.contains(fixedExpense);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Adds a fixed expense to the FixedExpenseManager."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The fixed expense must not already exist in the FixedExpenseManager."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void addFixedExpense(FixedExpense f) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        uniqueFixedExpenseLists.add(f);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces the given fixed expense {@code target} in the list with {@code editedFixedExpense}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code target} must exist in the FixedExpenseManager."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The person identity of {@code editedFixedExpense} must not be the same as another existing fixed expense"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * in the FixedExpenseManager."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setFixedExpense(FixedExpense target, FixedExpense editedFixedExpense) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(editedFixedExpense);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        uniqueFixedExpenseLists.setElement(target, editedFixedExpense);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * Remove a single fixed expense from the fixed expense list"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Removes {@code key} from this {@code FixedExpenseManager}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code key} must exist in the FixedExpenseManager."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void removeFixedExpense(FixedExpense key) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        uniqueFixedExpenseLists.remove(key);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * Sorts the fixed expense list"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * @param cmp"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * @return the sorted fixedexpense list"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public ObservableList\u003cFixedExpense\u003e sortFixedExpenseList(Comparator\u003cFixedExpense\u003e cmp) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseLists.sort(cmp);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        return uniqueFixedExpenseLists.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // Util methods"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return uniqueFixedExpenseLists.asUnmodifiableObservableList().size() + \" fixed expenses\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public ObservableList\u003cFixedExpense\u003e getFixedExpenseList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return uniqueFixedExpenseLists.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || (other instanceof FixedExpenseManager // instanceof handles nulls"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 uniqueFixedExpenseLists.equals(((FixedExpenseManager) other).uniqueFixedExpenseLists));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return uniqueFixedExpenseLists.hashCode();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 115,
      "joshlay96": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/PackingListManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.uniquelist.UniqueList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * The type Packing list manager."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * @author loycatherine"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class PackingListManager implements ReadOnlyPackingListManager {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final UniqueList\u003cPackingListItem\u003e packingList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Instantiates a new PackingListManager."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public PackingListManager() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        packingList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Creates an PackingListManager using the Items in the {@code toBeCopied}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param toBeCopied the to be copied"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public PackingListManager(ReadOnlyPackingListManager toBeCopied) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        packingList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // List overwrite operations"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces the contents of the packing list with {@code packingListItems}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code packingListItems} must not contain duplicate persons."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setPackingListItems(List\u003cPackingListItem\u003e packingListItems) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.packingList.setElements(packingListItems);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Resets the existing data of this {@code PackingManager} with {@code newData}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void resetData(ReadOnlyPackingListManager newData) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        setPackingListItems(newData.getPackingList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // PackingListItem-level operations"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Returns true if a contacts with the same identity as {@code contacts} exists in the address book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean hasPackingListItem(PackingListItem packingListItem) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(packingListItem);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return packingList.contains(packingListItem);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Adds a packing list item to the PackingListManager."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The packing list item must not already exist in the PackingListManager."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void addPackingListItem(PackingListItem packingListItem) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        packingList.add(packingListItem);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces the given packing list item {@code target} in the list with {@code editedPackingListItem}."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code target} must exist in the PackingListManager."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The packing list item identity of {@code editedPackingListItem} must not be the same as another existing"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * packing list item in the PackingListManager."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setPackingListItem(PackingListItem target, PackingListItem editedPackingListItem) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(editedPackingListItem);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        packingList.setElement(target, editedPackingListItem);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Removes {@code key} from this {@code PackingListManager}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code key} must exist in the PackingListManager."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void removePackingListItem(PackingListItem key) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        packingList.remove(key);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // Util methods"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return packingList.asUnmodifiableObservableList().size() + \" packing list items\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public ObservableList\u003cPackingListItem\u003e getPackingList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return packingList.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                || (other instanceof PackingListManager // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                \u0026\u0026 packingList.equals(((PackingListManager) other).packingList));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return packingList.hashCode();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 71,
      "zenatrick": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/ReadOnlyAccommodationBookingManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Unmodifiable view of a TransportBookingManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public interface ReadOnlyAccommodationBookingManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns an unmodifiable view of the accommodation bookings list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * This list will not contain any duplicate accommodation bookings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    ObservableList\u003cAccommodationBooking\u003e getAccommodationBookingList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 15,
      "zenatrick": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/ReadOnlyActivityManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Unmodifiable view of an ActivityManager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public interface ReadOnlyActivityManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns an unmodifiable view of the activity list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * This list will not contain any duplicate activity."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    ObservableList\u003cActivity\u003e getActivityList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 13,
      "zenatrick": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/ReadOnlyFixedExpenseManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Unmodifiable view of a FixedExpenseManager"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public interface ReadOnlyFixedExpenseManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns an unmodifiable view of the fixed expenses list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * This list will not contain any duplicate fixed expenses."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    ObservableList\u003cFixedExpense\u003e getFixedExpenseList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/ReadOnlyPackingListManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * Unmodifiable view of a Packing List"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public interface ReadOnlyPackingListManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Returns an unmodifiable view of the packing list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * This list will not contain any duplicate items."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    ObservableList\u003cPackingListItem\u003e getPackingList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 11,
      "zenatrick": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/ReadOnlyTransportBookingManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Unmodifiable view of a TransportBookingManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public interface ReadOnlyTransportBookingManager {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns an unmodifiable view of the transport bookings list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * This list will not contain any duplicate transport bookings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    ObservableList\u003cTransportBooking\u003e getTransportBookings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Path getTransportBookingStorageFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    Path getActivityManagerStorageFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    Path getFixedExpenseStorageFilePath();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    Path getAccommodationBookingStorageFilePath();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    Path getPackingListStorageFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 2,
      "jwee97": 5,
      "Deunitato": 2,
      "zenatrick": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/TransportBookingManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.uniquelist.UniqueList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Wraps all data at the TransportBookingManager level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class TransportBookingManager implements ReadOnlyTransportBookingManager {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final UniqueList\u003cTransportBooking\u003e transportBookings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Instantiates a new TransportBookingManager."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public TransportBookingManager() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        transportBookings \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Creates a TransportBookingManager using the TransportBookings in the {@code toBeCopied}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public TransportBookingManager(ReadOnlyTransportBookingManager toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        transportBookings \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // List overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces the contents of the transport booking list with {@code transportBookings}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code transportBookings} must not contain duplicate transport bookings."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setTransportBookings(List\u003cTransportBooking\u003e transportBookings) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.transportBookings.setElements(transportBookings);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Resets the existing data of this {@code TransportBookingManager} with {@code newData}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void resetData(ReadOnlyTransportBookingManager newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        setTransportBookings(newData.getTransportBookings());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // TransportBooking-level operations"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if a transport booking with the same identity as {@code transportBooking} exists in the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * TransportBookingManager."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean hasTransportBooking(TransportBooking transportBooking) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(transportBooking);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return transportBookings.contains(transportBooking);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Adds a transport booking to the TransportBookingManager."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The transport booking must not already exist in the TransportBookingManager."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void addTransportBooking(TransportBooking transportBooking) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        transportBookings.add(transportBooking);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces the given transport booking {@code target} in the list with {@code editedTransportBooking}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code target} must exist in the TransportBookingManager."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The transport booking identity of {@code editedTransportBooking} must not be the same as another existing"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * transport booking in the TransportBookingManager."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setTransportBooking(TransportBooking target, TransportBooking editedTransportBooking) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(editedTransportBooking);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        transportBookings.setElement(target, editedTransportBooking);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Removes {@code key} from this {@code TransportBookingManager}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code key} must exist in the TransportBookingManager."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void removeTransportBooking(TransportBooking key) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        transportBookings.remove(key);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // Util methods"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return transportBookings.asUnmodifiableObservableList().size() + \" transport bookings\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public ObservableList\u003cTransportBooking\u003e getTransportBookings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return transportBookings.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || (other instanceof TransportBookingManager // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 transportBookings.equals(((TransportBookingManager) other).transportBookings));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return transportBookings.hashCode();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 114
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static final Path DEFAULT_FOLDER_PATH \u003d Path.of(\"data\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private Path addressBookFilePath \u003d DEFAULT_FOLDER_PATH.resolve(\"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private Path transportBookingStorageFilePath \u003d DEFAULT_FOLDER_PATH.resolve(\"transportation.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private Path fixedExpenseStorageFilePath \u003d DEFAULT_FOLDER_PATH.resolve(\"expense.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private Path activityManagerStorageFilePath \u003d DEFAULT_FOLDER_PATH.resolve(\"activity.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private Path accommodationBookingStorageFilePath \u003d DEFAULT_FOLDER_PATH.resolve(\"accommodation.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private Path packingListStorageFilePath \u003d DEFAULT_FOLDER_PATH.resolve(\"packinglist.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        setActivityManagerStorageFilePath(newUserPrefs.getActivityManagerStorageFilePath());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        setAccommodationBookingStorageFilePath(newUserPrefs.getAccommodationBookingStorageFilePath());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        setTransportBookingStorageFilePath(newUserPrefs.getTransportBookingStorageFilePath());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        setFixedExpenseStorageFilePath(newUserPrefs.getFixedExpenseStorageFilePath());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        setPackingListStorageFilePath(newUserPrefs.getPackingListStorageFilePath());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Path getTransportBookingStorageFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return transportBookingStorageFilePath;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setTransportBookingStorageFilePath(Path transportBookingStorageFilePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(transportBookingStorageFilePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.transportBookingStorageFilePath \u003d transportBookingStorageFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Path getFixedExpenseStorageFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return fixedExpenseStorageFilePath;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void setFixedExpenseStorageFilePath (Path fixedExpenseStorageFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(fixedExpenseStorageFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.fixedExpenseStorageFilePath \u003d fixedExpenseStorageFilePath;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Path getActivityManagerStorageFilePath() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return activityManagerStorageFilePath;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setActivityManagerStorageFilePath (Path activityManagerStorageFilePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(activityManagerStorageFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.activityManagerStorageFilePath \u003d activityManagerStorageFilePath;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Path getAccommodationBookingStorageFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return accommodationBookingStorageFilePath;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void setAccommodationBookingStorageFilePath(Path accommodationBookingStorageFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(accommodationBookingStorageFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.accommodationBookingStorageFilePath \u003d accommodationBookingStorageFilePath;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public Path getPackingListStorageFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return packingListStorageFilePath;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public void setPackingListStorageFilePath(Path packingListStorageFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(packingListStorageFilePath);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.packingListStorageFilePath \u003d packingListStorageFilePath;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        UserPrefs otherUserPrefs \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return guiSettings.equals(otherUserPrefs.guiSettings)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(otherUserPrefs.addressBookFilePath)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 transportBookingStorageFilePath.equals(otherUserPrefs.transportBookingStorageFilePath)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 fixedExpenseStorageFilePath.equals(otherUserPrefs.fixedExpenseStorageFilePath)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 activityManagerStorageFilePath.equals(otherUserPrefs.activityManagerStorageFilePath)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 accommodationBookingStorageFilePath.equals(otherUserPrefs.accommodationBookingStorageFilePath);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, transportBookingStorageFilePath,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                fixedExpenseStorageFilePath, accommodationBookingStorageFilePath, activityManagerStorageFilePath);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return \"Gui Settings : \" + guiSettings"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"\\nLocal data file location : \" + addressBookFilePath"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                + \"\\nTransport Bookings data file location : \" + transportBookingStorageFilePath"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"\\nFixed Expenses data file location : \" + fixedExpenseStorageFilePath"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"\\nAccommodation Bookings data file location : \" + accommodationBookingStorageFilePath"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"\\nActivities data file location: \" + activityManagerStorageFilePath;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 12,
      "jwee97": 21,
      "Deunitato": 10,
      "zenatrick": 39,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/accommodationbooking/AccommodationBooking.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.uniquelist.UniqueListElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Represents an AccommodationBooking in the AccommodationBookingManager."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class AccommodationBooking implements UniqueListElement {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_DAY_CONSTRAINTS \u003d \"Start day must come before end day.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // Identity"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final AccommodationName accommodationName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final Day startDay;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final Day endDay;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // Data"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public AccommodationBooking(AccommodationName accommodationName, Location location, Day startDay, Day endDay,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                                Remark remark) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireAllNonNull(accommodationName, location, startDay, endDay, remark);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        checkArgument(isDayValid(startDay, endDay), MESSAGE_DAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.accommodationName \u003d accommodationName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.startDay \u003d startDay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.endDay \u003d endDay;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public AccommodationName getAccommodationName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return accommodationName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Day getStartDay() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return startDay;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Day getEndDay() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return endDay;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // TODO: May want to check if day is within the trip\u0027s day here"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns true if the specified start day is before the specified end day."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public boolean isDayValid(Day startDay, Day endDay) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return endDay.value - startDay.value \u003e\u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if both accommodation bookings has the same identity fields."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * This defines a weaker notion of equality between two accommodation bookings."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isSame(UniqueListElement other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!(other instanceof AccommodationBooking)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        AccommodationBooking otherAccommodationBooking \u003d (AccommodationBooking) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return accommodationName.equals(otherAccommodationBooking.accommodationName)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 location.equals(otherAccommodationBooking.location)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 startDay.equals(otherAccommodationBooking.startDay)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 endDay.equals(otherAccommodationBooking.endDay);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns true if both accommodation bookings have the same identity and data fields."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * This defines a stronger notion of equality between two items."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!(other instanceof AccommodationBooking)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        AccommodationBooking otherAccommodationBooking \u003d (AccommodationBooking) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return accommodationName.equals(otherAccommodationBooking.accommodationName)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 location.equals(otherAccommodationBooking.location)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 startDay.equals(otherAccommodationBooking.startDay)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 endDay.equals(otherAccommodationBooking.endDay)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 remark.equals(otherAccommodationBooking.remark);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return Objects.hash(accommodationName, location, startDay, endDay, remark);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return \"Accommodation Booking - Name: \" + accommodationName"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \" Location: \" + location"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \" Start Day: \" + startDay"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \" End Day: \" + endDay"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \" Remark: \" + remark;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 84,
      "zenatrick": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/accommodationbooking/AccommodationName.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Represents an Accommodation\u0027s name in the AccommodationBookingManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class AccommodationName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Name of accommodation must be made up of alphanumeric words \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"that is less than 50 characters long.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    // todo update regex to match constraints"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    // Allows for 50 alphanumeric characters."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$)[A-Za-z0-9\\\\s]{1,50}+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * The accommodation name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a {@code AccommodationName}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param name a valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public AccommodationName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        value \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                || (other instanceof AccommodationName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 value.equals(((AccommodationName) other)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                .value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 49,
      "zenatrick": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/accommodationbooking/Day.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a AccommodationBooking\u0027s day in the AccommodationBookingManager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDay(Integer)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Day should be a positive integer.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static final int MIN_VALUE \u003d 1;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final Predicate\u003cInteger\u003e VALIDATION_PREDICATE \u003d i -\u003e i \u003e\u003d MIN_VALUE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public final Integer value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Constructs an {@code Day}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param day A valid day within the length of the trip."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Day(Integer day) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(day);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        checkArgument(isValidDay(day), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        value \u003d day;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if a given string is a valid day."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static boolean isValidDay(Integer test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return VALIDATION_PREDICATE.test(test);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || (other instanceof Day // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 value.equals(((Day) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 35,
      "zenatrick": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/accommodationbooking/Remark.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents an Accommodation\u0027s remark in the AccommodationBookingManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRemark(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Remark must be made up of alphanumeric words that is less \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"than 150 characters long.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    // todo update regex to match constraints"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    // Allows for 150 characters long."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\W\\\\w\\\\s]{1,150}+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a {@code Remark}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param remark A valid remark."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        checkArgument(isValidRemark(remark), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if a given string is a valid remark."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static boolean isValidRemark(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 42,
      "zenatrick": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/activity/Activity.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.uniquelist.UniqueListElement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Represents a Activity in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class Activity implements UniqueListElement {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final Title title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final Duration duration;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Priority priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Activity(Title title, Priority priority, Duration duration, Location location, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireAllNonNull(title, priority, duration, location, tags);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Title getTitle() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Priority getPriority() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return priority;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Duration getDuration() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if both accommodation bookings has the same identity fields."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * This defines a weaker notion of equality between two accommodation bookings."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isSame(UniqueListElement other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!(other instanceof Activity)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Activity otherActivity \u003d (Activity) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return title.equals(otherActivity.title)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 duration.equals(otherActivity.duration)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 location.equals(otherActivity.location);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns true if both Activities have the same identity and data fields."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * This defines a stronger notion of equality between two Activities."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!(other instanceof Activity)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Activity otherActivity \u003d (Activity) other;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return title.equals(otherActivity.title)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 duration.equals(otherActivity.duration)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 location.equals(otherActivity.location)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 priority.equals(otherActivity.priority)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 getTags().equals(otherActivity.getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return Objects.hash(title, priority, duration, location, tags);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return \"Activity - Title: \" + title"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \" Priority: \" + priority"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \" Duration: \" + duration"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \" Tags: \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + getTags()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                .map(Tag::toString)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                .collect(Collectors.joining(\" \"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Deunitato": 82,
      "zenatrick": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/activity/Duration.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a Activity\u0027s duration in an ActivityManager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDuration(Integer)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class Duration {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Time (Hours) must be a valid number less than 24\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static final int MAX_VALUE \u003d 24;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static final int MIN_VALUE \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final Predicate\u003cInteger\u003e VALIDATION_PREDICATE \u003d i -\u003e i \u003e\u003d MIN_VALUE \u0026\u0026 i \u003c\u003d MAX_VALUE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public final Integer value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Duration(Integer duration) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(duration);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        checkArgument(isValidDuration(duration), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        value \u003d duration;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if a given string is a valid duration."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static boolean isValidDuration(Integer test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return VALIDATION_PREDICATE.test(test);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || (other instanceof Duration // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 value.equals(((Duration) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 34,
      "zenatrick": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/activity/Priority.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a Activity\u0027s priority in numbers in the ActivityManager."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriority(Integer)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class Priority {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Priority must be a valid integer from 0 to 3\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static final int MAX_VALUE \u003d 3;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static final int MIN_VALUE \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final Predicate\u003cInteger\u003e VALIDATION_PREDICATE \u003d i -\u003e i \u003e\u003d MIN_VALUE \u0026\u0026 i \u003c\u003d MAX_VALUE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public final Integer value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Priority(Integer priority) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(priority);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        checkArgument(isValidPriority(priority), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        value \u003d priority;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if a given string is a valid priority."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static boolean isValidPriority(Integer test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return VALIDATION_PREDICATE.test(test);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || (other instanceof Priority // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 value.equals(((Priority) other).value)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 33,
      "zenatrick": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/activity/Title.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents an Activity\u0027s title in the ActivityManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class Title {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * The constant MESSAGE_CONSTRAINTS."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Title must be made up of alphanumeric words that is less \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            + \"than 50 characters long.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    // todo update regex to match constraints"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    // Allows for 50 alphanumeric characters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$)[A-Za-z0-9\\\\s]{1,50}+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * The Value."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a {@code Title}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param title a valid title."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Title(String title) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        checkArgument(isValidTitle(title), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        value \u003d title;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if a given string is a valid title."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || (other instanceof Title // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 value.equals(((Title) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Deunitato": 48,
      "zenatrick": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/fixedexpense/Amount.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a FixedExpense\u0027s amount in the FixedExpenseManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class Amount {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Amount must be a valid number with at most 2 decimal places.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // todo update regex"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    // Done already, allows 10 digits, and at most 2 decimal places."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([\\\\d]{1,30})(\\\\.[\\\\d]{1,2})?$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Amount(String amount) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        value \u003d amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if a given string is a valid amount."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 value.equals(((Amount) other).value)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 18,
      "zenatrick": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/fixedexpense/Category.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a FixedExpense\u0027s category in the FixedExpenseManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCategory(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Category must be made up of a single alphanumeric word that is \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"less than 30 characters long.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // todo update regex to match constraints"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$)[A-Za-z0-9\\\\s]{1,50}+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Category(String category) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        checkArgument(isValidCategory(category), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        value \u003d category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static boolean isValidCategory(String test) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 value.equals(((Category) other).value)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 45,
      "joshlay96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/fixedexpense/Description.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a FixedExpense\u0027s description in the FixedExpenseManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Description must be made up of alphanumeric words that is less \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"than 50 characters long.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // todo update regex to match constraints"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    // Done description now allows for 1-50 characters long."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    // Spaces does not count."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$)[A-Za-z0-9\\\\s]{1,50}+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 27,
      "zenatrick": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/fixedexpense/FixedExpense.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.uniquelist.UniqueListElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represent a FixedExpense in the FixedExpenseManager."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class FixedExpense implements UniqueListElement {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public FixedExpense(Amount amount, Description description, Category category) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if this fixed expense is equal to {@code other} as per {@link #equals(Object)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * This defines an equality between two fixed expenses."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isSame(UniqueListElement other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return equals(other);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if both persons have the same data fields."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * This defines a notion of equality between two fixed expenses."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!(other instanceof FixedExpense)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        FixedExpense otherFixedExpense \u003d (FixedExpense) other;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return amount.equals(otherFixedExpense.amount)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 description.equals(otherFixedExpense.description)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 category.equals(otherFixedExpense.category);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return Objects.hash(amount, description, category);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return \"Fixed Expense Entry - Description: \" + description"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \" Amount: \" + amount"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \" Category: \" + category;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/packinglistitem/ItemCategory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "package seedu.address.model.listmanagers.packinglistitem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * The type Item category."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class ItemCategory {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_CONSTRAINTS."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Category must be made up of a single alphanumeric word that is \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"less than 30 characters long.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant VALIDATION_REGEX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    // todo update regex to match constraints"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}{1,30}+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Instantiates a new Item category."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param category the category"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public ItemCategory(String category) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        checkArgument(isValidItemCategory(category), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        value \u003d category;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Is valid item category boolean."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param test the test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static boolean isValidItemCategory(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                || (other instanceof ItemCategory // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                \u0026\u0026 value.equals(((ItemCategory) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/packinglistitem/ItemName.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.packinglistitem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents an PackingListItem\u0027s quantity in the packing list."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class ItemName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_CONSTRAINTS."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Name must be made up of alphanumeric words that is less \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"than 50 characters long.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // todo update regex to match constraints"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    // Allows for 50 alphanumeric characters."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(?!\\\\s*$)[A-Za-z0-9\\\\s]{1,50}+\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a {@code ItemName}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param name a valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public ItemName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        value \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || (other instanceof ItemName // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 value.equals(((ItemName) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 42,
      "jwee97": 2,
      "zenatrick": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/packinglistitem/PackingListItem.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.packinglistitem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.uniquelist.UniqueListElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a PackingListItem in the PackingListManager."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class PackingListItem implements UniqueListElement {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final ItemName itemName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final boolean isChecked;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Quantity quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private final ItemCategory itemCategory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param itemName     the item name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param quantity     the quantity"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param itemCategory the item category"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param isChecked    the is checked"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public PackingListItem(ItemName itemName, Quantity quantity, ItemCategory itemCategory, boolean isChecked) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireAllNonNull(itemName, quantity, itemCategory);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.itemName \u003d itemName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.itemCategory \u003d itemCategory;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.isChecked \u003d isChecked;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Gets item name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the item name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public ItemName getItemName() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return itemName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Gets quantity."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the quantity"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public Quantity getQuantity() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return quantity;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Gets item category."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the item category"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public ItemCategory getItemCategory() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return itemCategory;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true of the packing list item is checked."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the boolean"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public boolean getChecked() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return isChecked;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if both packing list items has the same identity fields."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * This defines a weaker notion of equality between two packing list items."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isSame(UniqueListElement other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!(other instanceof PackingListItem)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return itemName.equals(((PackingListItem) other).itemName);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if both packing list items have the same identity and data fields."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * This defines a stronger notion of equality between two packing list items."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!(other instanceof PackingListItem)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        PackingListItem otherItem \u003d (PackingListItem) other;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return itemName.equals(otherItem.itemName)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 quantity.equals(otherItem.quantity)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                \u0026\u0026 itemCategory.equals(otherItem.itemCategory)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 isChecked \u003d\u003d otherItem.isChecked;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return Objects.hash(itemName, quantity, itemCategory, isChecked);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return \"Packing list item - Item Name: \" + itemName"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \" Quantity: \" + quantity"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                + \" Category: \" + itemCategory"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \" Is Checked: \" + isChecked;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 90,
      "zenatrick": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/packinglistitem/Quantity.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.packinglistitem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents an PackingListItem\u0027s quantity in the packing list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class Quantity {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_CONSTRAINTS."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            \"Quantity should only be a positive integer, from 1 onwards\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static final int MAX_VALUE \u003d 100;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static final int MIN_VALUE \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final Predicate\u003cInteger\u003e VALIDATION_PREDICATE \u003d i -\u003e i \u003e\u003d MIN_VALUE \u0026\u0026 i \u003c\u003d MAX_VALUE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public final Integer value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a {@code Quantity}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param quantity a valid quantity."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Quantity(Integer quantity) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(quantity);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        checkArgument(isValidQuantity(quantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.value \u003d quantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Returns true if a given integer is a valid quantity number."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static boolean isValidQuantity(Integer test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return VALIDATION_PREDICATE.test(test);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value.toString();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || (other instanceof Quantity // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 value.equals(((Quantity) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 29,
      "zenatrick": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/transportbooking/Mode.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.transportbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a TransportBooking\u0027s mode in the TransportBookingManager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMode(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class Mode {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Mode should take one of the following words: \\\"plane\\\", \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"\\\"train\\\", \\\"bus\\\", \\\"car\\\" or \\\"others\\\"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Mode should be one of the following words: \"plane\", \"train\", \"bus\", \"car\" or \"others\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(plane|train|bus|car|others)$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a {@code Mode}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param mode A valid mode."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Mode(String mode) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(mode);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        checkArgument(isValidMode(mode), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        value \u003d mode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if a given string is a valid mode."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static boolean isValidMode(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return test.toLowerCase().matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || (other instanceof Mode // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 value.equals(((Mode) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/listmanagers/transportbooking/TransportBooking.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.transportbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.core.time.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.uniquelist.UniqueListElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a TransportBooking in the TransportBookingManager."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class TransportBooking implements UniqueListElement {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_LOCATION_CONSTRAINTS \u003d \"Start location cannot be equal to end location.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d \"Start time must come before end time.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Mode mode;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Location startLocation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Location endLocation;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final DateTime startDateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final DateTime endDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public TransportBooking(Mode mode, Location startLocation, Location endLocation, DateTime startDateTime,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                            DateTime endDateTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireAllNonNull(mode, startLocation, endLocation, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        checkArgument(areLocationsValid(startLocation, endLocation), MESSAGE_LOCATION_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        checkArgument(isTimeValid(startDateTime, endDateTime), MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.startLocation \u003d startLocation;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.endLocation \u003d endLocation;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Mode getMode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return mode;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Location getStartLocation() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return startLocation;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Location getEndLocation() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return endLocation;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public DateTime getStartDateTime() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return startDateTime;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public DateTime getEndDateTime() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return endDateTime;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if the specified start and end location are different."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean areLocationsValid(Location startLocation, Location endLocation) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return !startLocation.equals(endLocation);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if the specified start time is before the specified end time.."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isTimeValid(DateTime startDateTime, DateTime endDateTime) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return startDateTime.compareTo(endDateTime) \u003c 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if this transport booking is equal to {@code other} as per {@link #equals(Object)}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * This defines an equality between two transport bookings."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean isSame(UniqueListElement other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return equals(other);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if both transport bookings have the same data fields."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * This defines an equality between two transport bookings."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!(other instanceof TransportBooking)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        TransportBooking otherTransportBooking \u003d (TransportBooking) other;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return mode.equals(otherTransportBooking.mode)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 startLocation.equals(otherTransportBooking.startLocation)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 endLocation.equals(otherTransportBooking.endLocation)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 startDateTime.equals(otherTransportBooking.startDateTime)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 endDateTime.equals(otherTransportBooking.endDateTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return Objects.hash(mode, startLocation, endLocation, startDateTime, endDateTime);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return \"TransportBooking - Mode: \" + mode"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \" Start Location: \" + startLocation"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \" End Location: \" + endLocation"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \" Start Date-Time: \" + startDateTime"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \" End Date-Time: \" + endDateTime;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 120
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 1,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/model/trip/Budget.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Represent a Budget in the Trip."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            \"Budget should be a whole number greater than 0\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final Integer amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Budget(Integer amount) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireAllNonNull(amount);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        checkArgument(isValidBudget(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Integer getBudget() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns true if a given Integer is a valid budget number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static boolean isValidBudget(Integer test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return \" \" + amount;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/model/trip/ReadOnlyTripManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.beans.value.ObservableObjectValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Unmodifiable view of a Packing List"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public interface ReadOnlyTripManager {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns an unmodifiable view of the Trip."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * This list will not contain any duplicate items."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    ObservableObjectValue\u003cTrip\u003e getTrip();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/model/trip/Schedulee.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Represents a Schedulee Object in the Trip"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class Schedulee {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/trip/Scheduler.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Represents a Scheduler in the Trip"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class Scheduler {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/trip/Trip.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Represents a Trip in the EasyTravel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class Trip {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    // Needed Fields"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final Date startDay;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final Date endDay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final Scheduler scheduler;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final float duration;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final TripTitle title;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Trip(TripTitle title, Date start, Date end, Budget budget) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireAllNonNull(title, start, end, budget);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.startDay \u003d start;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.endDay \u003d end;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.scheduler \u003d new Scheduler(); //replaced with stubed"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        long difference \u003d endDay.getTime() - startDay.getTime();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.duration \u003d (difference / (1000 * 60 * 60 * 24));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public TripTitle getTitle() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public float getDuration() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return duration;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Scheduler getScheduler() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return scheduler;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Budget getBudget() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Date getStartDay() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return startDay;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Date getEndDay() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return endDay;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        builder.append(getTitle())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                .append(\" Duration: \")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                .append(getDuration())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                .append(\" Start day: \")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                .append(getStartDay())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                .append(\" End day: \")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                .append(getEndDay())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                .append(\" Budget: \")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                .append(getBudget())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                .append(getBudget());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/trip/TripManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.beans.value.ObservableObjectValue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Wraps all data at the Trip level"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Duplicates are not allowed (by.equals comparison)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class TripManager implements ReadOnlyTripManager {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private static boolean tripExist;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private static ObservableObjectValue\u003cTrip\u003e trip \u003d new SimpleObjectProperty\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Instantiates a new trip."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public TripManager() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Creates an TripManager using the Trip in the {@code} toBeCopied}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public TripManager(ReadOnlyTripManager toBeCopied) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Replaces the current trip with {@code trip}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setTrip(Trip trip) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        tripExist \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.trip \u003d new SimpleObjectProperty\u003c\u003e(trip);;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Resets the existing data of this {@code TripManager} with {@code newData}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void resetData(ReadOnlyTripManager newData) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(newData.getTrip());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        setTrip(newData.getTrip().get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    // Trip-level operations"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns true if there exist a trip"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean hasTrip() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return tripExist;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Remove a the trip from the entire program"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * trip must exist in the program."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void removeTrip() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.trip \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.tripExist \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    // Util methods"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return trip.get().toString();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return trip.hashCode();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ObservableObjectValue\u003cTrip\u003e getTrip() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return this.trip;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Deunitato": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/trip/TripTitle.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Represents a Trip\u0027s name in the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidTitle(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class TripTitle {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public TripTitle(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        checkArgument(isValidTitle(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        title \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static boolean isValidTitle(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return title;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                || (other instanceof TripTitle // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                \u0026\u0026 title.equals(((TripTitle) other).title)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return title.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/attributes/Location.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.util.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a location attribute in a list manager."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Location must be alphanumeric words not more than 50 \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"characters long\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Location must be made up of alphanumeric words not more than 50 characters long."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^[^\\\\s][\\\\w\\\\s]{1,50}\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a {@code Location}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if a given string is a valid start location."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/attributes/tag/Tag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.util.attributes.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 1,
      "-": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/sampledata/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.util.sampledata;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.core.time.DateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.AccommodationBookingManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ActivityManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.FixedExpenseManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.PackingListManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyAccommodationBookingManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyActivityManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyFixedExpenseManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyPackingListManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyTransportBookingManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.TransportBookingManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.Day;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.Remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.activity.Duration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.activity.Priority;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.activity.Title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.Amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.Category;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.Description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.ItemCategory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.ItemName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.Quantity;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.Mode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Get sample persons person [ ]."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the person [ ]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Geylang Street 29, #06-40\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"family\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 47 Tampines Street 20, #17-35\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Address(\"Blk 45 Aljunied Street 85, #11-31\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                    getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Gets sample address book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the sample address book"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param strings the strings"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the tag set"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Get sample transport bookings transport booking [ ]."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the transport booking [ ]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static TransportBooking[] getSampleTransportBookings() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new TransportBooking[]{"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            new TransportBooking(new Mode(\"plane\"), new Location(\"Singapore\"), new Location(\"Japan\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    DateTime.fromString(\"10-01-2020 10:15\"), DateTime.fromString(\"20-01-2020 22:00\"))"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        };"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Gets sample transport booking manager."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the sample transport booking manager"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static ReadOnlyTransportBookingManager getSampleTransportBookingManager() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        TransportBookingManager sampleTransportBookingManager \u003d new TransportBookingManager();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        for (TransportBooking sampleTransportBooking : getSampleTransportBookings()) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            sampleTransportBookingManager.addTransportBooking(sampleTransportBooking);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return sampleTransportBookingManager;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Get sample fixed expenses fixed expense [ ]."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the fixed expense [ ]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static FixedExpense[] getSampleFixedExpenses() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new FixedExpense[]{"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            new FixedExpense(new Amount(\"1000\"), new Description(\"TestDescription\"),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    new Category(\"TestCategory\")),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            new FixedExpense(new Amount(\"2000\"), new Description(\"TestDescription\"),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    new Category(\"TestCategory\")),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            new FixedExpense(new Amount(\"3000\"), new Description(\"TestDescription\"),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    new Category(\"TestCategory\")),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            new FixedExpense(new Amount(\"4000\"), new Description(\"TestDescription\"),"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    new Category(\"TestCategory\"))"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Gets sample fixed expense manager."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the sample fixed expense manager"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static ReadOnlyFixedExpenseManager getSampleFixedExpenseManager() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        FixedExpenseManager sampleFixedExpenseManager \u003d new FixedExpenseManager();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        for (FixedExpense sampleFixedExpense : getSampleFixedExpenses()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            sampleFixedExpenseManager.addFixedExpense(sampleFixedExpense);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return sampleFixedExpenseManager;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Get sample activity activity [ ]."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the activity [ ]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static Activity[] getSampleActivity() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new Activity[]{"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            new Activity(new Title(\"Hot Spring\"), new Priority(1), new Duration(3), new Location(\"Hokkaido\"),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    new HashSet\u003c\u003e())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        };"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Gets sample activity manager."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the sample activity manager"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static ReadOnlyActivityManager getSampleActivityManager() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        ActivityManager sampleActivityManager \u003d new ActivityManager();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        for (Activity sampleActivity : getSampleActivity()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            sampleActivityManager.addActivity(sampleActivity);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return sampleActivityManager;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Get sample accommodation bookings accommodation booking [ ]."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the accommodation booking [ ]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static AccommodationBooking[] getSampleAccommodationBookings() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new AccommodationBooking[]{"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            new AccommodationBooking(new AccommodationName(\"Hyatt Regency\"), new Location(\"Kyoto\"), new Day(1),"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    new Day(3), new Remark(\"Checkin at 3pm\"))"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        };"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Gets sample accommodation booking manager."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the sample accommodation booking manager"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static ReadOnlyAccommodationBookingManager getSampleAccommodationBookingManager() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        AccommodationBookingManager sampleAccommodationBookingManager \u003d new AccommodationBookingManager();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        for (AccommodationBooking sampleAccommodationBooking : getSampleAccommodationBookings()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            sampleAccommodationBookingManager.addAccommodationBooking(sampleAccommodationBooking);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return sampleAccommodationBookingManager;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Get sample packing list items [ ]."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the packing list items [ ]"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static PackingListItem[] getSamplePackingListItems() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return new PackingListItem[] {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            new PackingListItem(new ItemName(\"Tshirt\"), new Quantity(7), new ItemCategory(\"basics\"), false),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            new PackingListItem(new ItemName(\"Jeans\"), new Quantity(5), new ItemCategory(\"basics\"), false),"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            new PackingListItem(new ItemName(\"Underwear\"), new Quantity(7), new ItemCategory(\"essentials\"), false),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            new PackingListItem(new ItemName(\"Shampoo\"), new Quantity(1), new ItemCategory(\"toiletries\"), false),"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            new PackingListItem(new ItemName(\"Conditioner\"), new Quantity(1), new ItemCategory(\"toiletries\"), false)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        };"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Gets sample packing list manager."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the sample packing list manager"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static ReadOnlyPackingListManager getSamplePackingListManager() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        PackingListManager samplePackingListManager \u003d new PackingListManager();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        for (PackingListItem samplePackingListItem : getSamplePackingListItems()) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            samplePackingListManager.addPackingListItem(samplePackingListItem);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return samplePackingListManager;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "loycatherine": 86,
      "jwee97": 36,
      "Deunitato": 14,
      "zenatrick": 44,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/uniquelist/UniqueList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.util.uniquelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.uniquelist.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.uniquelist.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * A list that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * An element is considered unique by comparing using {@code T.isSame(T)}. As such, adding and updating of the list uses"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * T#isSame(T) for equality so as to ensure that the element being added or updated is unique in terms of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * identity in the UniqueList. However, the removal of an element uses T#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * as to ensure that the element with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class UniqueList\u003cT extends UniqueListElement\u003e implements Iterable\u003cT\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final ObservableList\u003cT\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final ObservableList\u003cT\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if the list contains an equivalent element as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean contains(T toCheck) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSame);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void sort(Comparator\u003cT\u003e cmp) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        internalList.sort(cmp);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Adds an element to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The element must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void add(T toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            throw new DuplicateElementException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces the element {@code target} in the list with {@code edited}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The element identity of {@code edited} must not be the same as another existing element in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setElement(T target, T edited) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireAllNonNull(target, edited);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new ElementNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!target.isSame(edited) \u0026\u0026 contains(edited)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new DuplicateElementException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        internalList.set(index, edited);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Removes the equivalent element from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * The element must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void remove(T toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new ElementNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setElements(UniqueList\u003cT\u003e replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Replaces the contents of this list with {@code elements}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * {@code elements} must not contain duplicate elements."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void setElements(List\u003cT\u003e elements) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireAllNonNull(elements);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!elementsAreUnique(elements)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new DuplicateElementException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        internalList.setAll(elements);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public ObservableList\u003cT\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Iterator\u003cT\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!(other instanceof UniqueList)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        @SuppressWarnings(\"unchecked\") UniqueList\u003cT\u003e otherList \u003d (UniqueList\u003cT\u003e) other;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return internalList.equals(otherList.internalList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns true if {@code elements} contains only unique elements."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private boolean elementsAreUnique(List\u003cT\u003e elements) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        for (int i \u003d 0; i \u003c elements.size() - 1; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            for (int j \u003d i + 1; j \u003c elements.size(); j++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                if (elements.get(i).isSame(elements.get(j))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 143,
      "joshlay96": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/uniquelist/UniqueListElement.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.util.uniquelist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * API of an element of a UniqueList."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * {@link UniqueList}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public interface UniqueListElement {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    boolean isSame(UniqueListElement other);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/uniquelist/exceptions/DuplicateElementException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.util.uniquelist.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Signals that the operation will result in duplicate element."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Elements are considered duplicates if they are equal."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class DuplicateElementException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public DuplicateElementException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        super(\"Operation would result in duplicate elements.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/uniquelist/exceptions/ElementNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.util.uniquelist.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Signals that the operation is unable to find the specified element."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class ElementNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 2,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name, @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"email\") String email, @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelAddress, modelTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 1,
      "-": 108
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedTag.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 1,
      "zenatrick": 1,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonUserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 2,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.storage.accommodationbooking.AccommodationBookingStorage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.storage.activity.ActivityManagerStorage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.storage.fixedexpense.FixedExpenseStorage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.storage.packinglist.PackingListStorage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.storage.transportbooking.TransportBookingStorage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.storage.trip.TripStorage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public interface Storage extends AddressBookStorage, TransportBookingStorage,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        FixedExpenseStorage, ActivityManagerStorage, AccommodationBookingStorage, PackingListStorage, TripStorage,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 1,
      "jwee97": 3,
      "Deunitato": 4,
      "zenatrick": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyAccommodationBookingManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyActivityManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyFixedExpenseManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyPackingListManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyTransportBookingManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.trip.ReadOnlyTripManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.storage.accommodationbooking.AccommodationBookingStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.storage.activity.ActivityManagerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.storage.fixedexpense.FixedExpenseStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.storage.packinglist.PackingListStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.storage.transportbooking.TransportBookingStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.storage.trip.TripStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private TransportBookingStorage transportBookingStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private FixedExpenseStorage fixedExpenseStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private AccommodationBookingStorage accommodationBookingStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private ActivityManagerStorage activityManagerStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private PackingListStorage packingListStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private TripStorage tripStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Instantiates a new Storage manager."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param addressBookStorage          the address book storage"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param transportBookingStorage     the transport booking storage"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param fixedExpenseStorage         the fixed expense storage"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param activityManagerStorage      the activity manager storage"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param accommodationBookingStorage the accommodation booking storage"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param packingListStorage          the packing list storage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param userPrefsStorage            the user prefs storage"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                          TransportBookingStorage transportBookingStorage,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                          FixedExpenseStorage fixedExpenseStorage,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                          ActivityManagerStorage activityManagerStorage,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                          AccommodationBookingStorage accommodationBookingStorage,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                          PackingListStorage packingListStorage, TripStorage tripStorage,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.transportBookingStorage \u003d transportBookingStorage;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.fixedExpenseStorage \u003d fixedExpenseStorage;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.activityManagerStorage \u003d activityManagerStorage;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.accommodationBookingStorage \u003d accommodationBookingStorage;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.packingListStorage \u003d packingListStorage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.tripStorage \u003d tripStorage;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TransportBookingManager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Path getTransportBookingStorageFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return transportBookingStorage.getTransportBookingStorageFilePath();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Optional\u003cReadOnlyTransportBookingManager\u003e readTransportBookings() throws DataConversionException,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return readTransportBookings(transportBookingStorage.getTransportBookingStorageFilePath());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Optional\u003cReadOnlyTransportBookingManager\u003e readTransportBookings("
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return transportBookingStorage.readTransportBookings(filePath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void saveTransportBookings(ReadOnlyTransportBookingManager transportBookingManager) throws IOException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        saveTransportBookings(transportBookingManager, transportBookingStorage.getTransportBookingStorageFilePath());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void saveTransportBookings("
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            ReadOnlyTransportBookingManager transportBookingManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        transportBookingStorage.saveTransportBookings(transportBookingManager, filePath);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d FixedExpenseManager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Path getFixedExpenseStorageFilePath() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return fixedExpenseStorage.getFixedExpenseStorageFilePath();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Optional\u003cReadOnlyFixedExpenseManager\u003e readFixedExpenses() throws DataConversionException,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return readFixedExpenses(fixedExpenseStorage.getFixedExpenseStorageFilePath());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Optional\u003cReadOnlyFixedExpenseManager\u003e readFixedExpenses("
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return fixedExpenseStorage.readFixedExpenses(filePath);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void saveFixedExpenses(ReadOnlyFixedExpenseManager fixedExpenseManager) throws IOException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        saveFixedExpenses(fixedExpenseManager, fixedExpenseStorage.getFixedExpenseStorageFilePath());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void saveFixedExpenses("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            ReadOnlyFixedExpenseManager fixedExpenseManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        fixedExpenseStorage.saveFixedExpenses(fixedExpenseManager, filePath);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ActivityManager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Path getActivityManagerStorageFilePath() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return activityManagerStorage.getActivityManagerStorageFilePath();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Optional\u003cReadOnlyActivityManager\u003e readActivityManager() throws DataConversionException,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return readActivityManager(activityManagerStorage.getActivityManagerStorageFilePath());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Optional\u003cReadOnlyActivityManager\u003e readActivityManager("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return activityManagerStorage.readActivityManager(filePath);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void saveActivityManager(ReadOnlyActivityManager activityManager) throws IOException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        saveActivityManager(activityManager, activityManagerStorage.getActivityManagerStorageFilePath());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void saveActivityManager("
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            ReadOnlyActivityManager activityManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        activityManagerStorage.saveActivityManager(activityManager, filePath);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AccommodationBookingManager methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Path getAccommodationBookingStorageFilePath() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return accommodationBookingStorage.getAccommodationBookingStorageFilePath();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Optional\u003cReadOnlyAccommodationBookingManager\u003e readAccommodationBookings() throws DataConversionException,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return readAccommodationBookings(accommodationBookingStorage.getAccommodationBookingStorageFilePath());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Optional\u003cReadOnlyAccommodationBookingManager\u003e readAccommodationBookings("
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return accommodationBookingStorage.readAccommodationBookings(filePath);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void saveAccommodationBookings(ReadOnlyAccommodationBookingManager accommodationBookingManager)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        saveAccommodationBookings(accommodationBookingManager,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                accommodationBookingStorage.getAccommodationBookingStorageFilePath());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void saveAccommodationBookings("
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            ReadOnlyAccommodationBookingManager accommodationBookingManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        accommodationBookingStorage.saveAccommodationBookings(accommodationBookingManager, filePath);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Packing List methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public Path getPackingListStorageFilePath() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return packingListStorage.getPackingListStorageFilePath();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public Optional\u003cReadOnlyPackingListManager\u003e readPackingList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return readPackingList(packingListStorage.getPackingListStorageFilePath());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public Optional\u003cReadOnlyPackingListManager\u003e readPackingList(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return packingListStorage.readPackingList(filePath);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public void savePackingList(ReadOnlyPackingListManager packingList) throws IOException {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        savePackingList(packingList, packingListStorage.getPackingListStorageFilePath());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public void savePackingList(ReadOnlyPackingListManager packingList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        packingListStorage.savePackingList(packingList, filePath);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Path getTripStorageFilePath() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Optional\u003cReadOnlyTripManager\u003e readTrip() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Optional\u003cReadOnlyTripManager\u003e readTripManager(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void saveTrip(ReadOnlyTripManager tripManager) throws IOException {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void saveTrip(ReadOnlyTripManager tripManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 43,
      "jwee97": 74,
      "Deunitato": 66,
      "zenatrick": 44,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/UserPrefsStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 4,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/accommodationbooking/AccommodationBookingStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.storage.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.AccommodationBookingManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyAccommodationBookingManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Represents a storage for {@link AccommodationBookingManager}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public interface AccommodationBookingStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    Path getAccommodationBookingStorageFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns AccommodationBookingManager data as a {@link ReadOnlyAccommodationBookingManager}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    Optional\u003cReadOnlyAccommodationBookingManager\u003e readAccommodationBookings()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @see #getAccommodationBookingStorageFilePath()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    Optional\u003cReadOnlyAccommodationBookingManager\u003e readAccommodationBookings(Path filePath)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Saves the given {@link ReadOnlyAccommodationBookingManager} to the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param accommodationBookingManager cannot be null."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    void saveAccommodationBookings(ReadOnlyAccommodationBookingManager accommodationBookingManager) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @see #saveAccommodationBookings(ReadOnlyAccommodationBookingManager)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    void saveAccommodationBookings("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            ReadOnlyAccommodationBookingManager accommodationBookingManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 49,
      "zenatrick": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/accommodationbooking/JsonAccommodationBookingStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.storage.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyAccommodationBookingManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * A class to access AccommodationBookingManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class JsonAccommodationBookingStorage implements AccommodationBookingStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAccommodationBookingStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public JsonAccommodationBookingStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Path getAccommodationBookingStorageFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Optional\u003cReadOnlyAccommodationBookingManager\u003e readAccommodationBookings() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return readAccommodationBookings(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Similar to {@link #readAccommodationBookings()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Optional\u003cReadOnlyAccommodationBookingManager\u003e readAccommodationBookings("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        Optional\u003cJsonSerializableAccommodationBookingManager\u003e jsonAccommodationBookingManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                filePath, JsonSerializableAccommodationBookingManager.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (jsonAccommodationBookingManager.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return Optional.of(jsonAccommodationBookingManager.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void saveAccommodationBookings(ReadOnlyAccommodationBookingManager accommodationBookingManager)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        saveAccommodationBookings(accommodationBookingManager, filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Similar to {@link #saveAccommodationBookings(ReadOnlyAccommodationBookingManager)}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void saveAccommodationBookings("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            ReadOnlyAccommodationBookingManager accommodationBookingManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(accommodationBookingManager);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAccommodationBookingManager(accommodationBookingManager), filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 82,
      "zenatrick": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/accommodationbooking/JsonAdaptedAccommodationBooking.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.storage.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.Day;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.Remark;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Jackson-friendly version of {@link AccommodationBooking}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class JsonAdaptedAccommodationBooking {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Accommodation Booking\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Integer startDay;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Integer endDay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Constructs a {@code JsonAdaptedAccommodationBooking} with the given details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public JsonAdaptedAccommodationBooking(@JsonProperty(\"name\") String name, @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                             @JsonProperty(\"startDay\") Integer startDay, @JsonProperty(\"endDay\") Integer endDay,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                             @JsonProperty(\"remark\") String remark) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.startDay \u003d startDay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.endDay \u003d endDay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Converts a given {@code AccommodationBooking} into this class for Jackson use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public JsonAdaptedAccommodationBooking(AccommodationBooking source) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        name \u003d source.getAccommodationName().value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        startDay \u003d source.getStartDay().value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        endDay \u003d source.getEndDay().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Converts this Jackson-friendly adapted accommodation booking object into the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * model\u0027s {@code AccommodationBooking} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public AccommodationBooking toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    AccommodationName.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!AccommodationName.isValidName(name)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new IllegalValueException(AccommodationName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        final AccommodationName modelAccommodationName \u003d new AccommodationName(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (startDay \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!Day.isValidDay(startDay)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        final Day modelStartDay \u003d new Day(startDay);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (endDay \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Day.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!Day.isValidDay(endDay)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        final Day modelEndDay \u003d new Day(endDay);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!Remark.isValidRemark(remark)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new IllegalValueException(Remark.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new AccommodationBooking(modelAccommodationName, modelLocation, modelStartDay, modelEndDay, modelRemark);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 91,
      "zenatrick": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/accommodationbooking/JsonSerializableAccommodationBookingManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.storage.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.AccommodationBookingManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyAccommodationBookingManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * An Immutable AddressBook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "@JsonRootName(value \u003d \"accommodationBookingManager\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class JsonSerializableAccommodationBookingManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACCOMMODATION_BOOKING \u003d \"Accommodation booking list contains \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"duplicate accommodation(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final List\u003cJsonAdaptedAccommodationBooking\u003e accommodationBookings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Constructs a {@code JsonSerializableAccommodationBookingManager} with the given accommodation bookings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public JsonSerializableAccommodationBookingManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            @JsonProperty(\"accommodationBookings\") List\u003cJsonAdaptedAccommodationBooking\u003e accommodationBookings) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.accommodationBookings.addAll(accommodationBookings);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Converts a given {@code ReadOnlyAccommodationBookingManager} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param source future changes to this will not affect the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *               created {@code JsonSerializableAccommodationBookingManager}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public JsonSerializableAccommodationBookingManager(ReadOnlyAccommodationBookingManager source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        accommodationBookings.addAll("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                source.getAccommodationBookingList()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        .map(JsonAdaptedAccommodationBooking::new)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Converts this accommodation booking manager into the model\u0027s {@code AccommodationBookingManager} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public AccommodationBookingManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        AccommodationBookingManager accommodationBookingManager \u003d new AccommodationBookingManager();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        for (JsonAdaptedAccommodationBooking jsonAdaptedAccommodationBooking : accommodationBookings) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            AccommodationBooking accommodationBooking \u003d jsonAdaptedAccommodationBooking.toModelType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            if (accommodationBookingManager.hasAccommodationBooking(accommodationBooking)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ACCOMMODATION_BOOKING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            accommodationBookingManager.addAccommodationBooking(accommodationBooking);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return accommodationBookingManager;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 64,
      "zenatrick": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/activity/ActivityManagerStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.storage.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ActivityManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyActivityManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a storage for {@link ActivityManager}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public interface ActivityManagerStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    Path getActivityManagerStorageFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns activity data as a {@link ReadOnlyActivityManager}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    Optional\u003cReadOnlyActivityManager\u003e readActivityManager() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @see #getActivityManagerStorageFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    Optional\u003cReadOnlyActivityManager\u003e readActivityManager(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Saves the given {@link ReadOnlyActivityManager} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @param activityManager cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    void saveActivityManager(ReadOnlyActivityManager activityManager) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @see #saveActivityManager(ReadOnlyActivityManager)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    void saveActivityManager(ReadOnlyActivityManager activityManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 42,
      "zenatrick": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/activity/JsonActivityManagerStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.storage.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyActivityManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * A class to access ActivityManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class JsonActivityManagerStorage implements ActivityManagerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonActivityManagerStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public JsonActivityManagerStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Path getActivityManagerStorageFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Optional\u003cReadOnlyActivityManager\u003e readActivityManager() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return readActivityManager(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Similar to {@link #readActivityManager()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Optional\u003cReadOnlyActivityManager\u003e readActivityManager(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Optional\u003cJsonSerializableActivityManager\u003e jsonActivityManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                filePath, JsonSerializableActivityManager.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (jsonActivityManager.isEmpty()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            return Optional.of(jsonActivityManager.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void saveActivityManager(ReadOnlyActivityManager activityManager) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        saveActivityManager(activityManager, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Similar to {@link #saveActivityManager(ReadOnlyActivityManager)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void saveActivityManager(ReadOnlyActivityManager activityManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(activityManager);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableActivityManager(activityManager), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 78,
      "zenatrick": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/activity/JsonAdaptedActivityManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.storage.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.activity.Duration;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.activity.Priority;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.activity.Title;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.storage.JsonAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Jackson-friendly version of {@link Activity}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "class JsonAdaptedActivityManager {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Integer duration;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Integer priority;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public JsonAdaptedActivityManager(@JsonProperty(\"title\") String title,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                                      @JsonProperty(\"duration\") Integer duration,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                                      @JsonProperty(\"priority\") Integer priority,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                                      @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                                      @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.duration \u003d duration;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.priority \u003d priority;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public JsonAdaptedActivityManager(Activity source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        title \u003d source.getTitle().value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        duration \u003d source.getDuration().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        priority \u003d source.getPriority().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Activity toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        final List\u003cTag\u003e activityTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            activityTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (title \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Title.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (!Title.isValidTitle(title)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new IllegalValueException(Title.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        final Title modelTitle \u003d new Title(title);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (duration \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    Duration.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (!Duration.isValidDuration(duration)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new IllegalValueException(Duration.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        final Duration modelDuration \u003d new Duration(duration);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (priority \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    Priority.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (!Priority.isValidPriority(priority)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new IllegalValueException(Priority.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        final Priority modelPriority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(activityTags);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return new Activity(modelTitle, modelPriority, modelDuration, modelLocation, modelTags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 103,
      "zenatrick": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/activity/JsonSerializableActivityManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.storage.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ActivityManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyActivityManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * An Immutable activityManager that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "@JsonRootName(value \u003d \"activityManager\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "class JsonSerializableActivityManager {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"Persons list contains duplicate person(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final List\u003cJsonAdaptedActivityManager\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Constructs a {@code JsonSerializableActivityManager} with the given activities."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public JsonSerializableActivityManager(@JsonProperty(\"activities\") List\u003cJsonAdaptedActivityManager\u003e activities) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.activities.addAll(activities);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Converts a given {@code ReadOnlyActivityManager} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableActivityManager}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public JsonSerializableActivityManager(ReadOnlyActivityManager source) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        activities.addAll(source.getActivityList().stream().map(JsonAdaptedActivityManager::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Converts this activityManager into the model\u0027s {@code ActivityManager} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ActivityManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        ActivityManager activityManager \u003d new ActivityManager();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        for (JsonAdaptedActivityManager jsonAdaptedActivityManager : activities) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            Activity activity \u003d jsonAdaptedActivityManager.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            if (activityManager.hasActivity(activity)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            activityManager.addActivity(activity);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return activityManager;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 57,
      "zenatrick": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/fixedexpense/FixedExpenseStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.storage.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.FixedExpenseManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyFixedExpenseManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Represents a storage for {@link FixedExpenseManager}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public interface FixedExpenseStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    Path getFixedExpenseStorageFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns FixedExpenseManager data as a {@link ReadOnlyFixedExpenseManager}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    Optional\u003cReadOnlyFixedExpenseManager\u003e readFixedExpenses() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @see #getFixedExpenseStorageFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    Optional\u003cReadOnlyFixedExpenseManager\u003e readFixedExpenses(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Saves the given {@link ReadOnlyFixedExpenseManager} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param fixedExpenseManager cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    void saveFixedExpenses(ReadOnlyFixedExpenseManager fixedExpenseManager) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @see #saveFixedExpenses(ReadOnlyFixedExpenseManager)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    void saveFixedExpenses("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            ReadOnlyFixedExpenseManager fixedExpenseManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 48,
      "zenatrick": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/fixedexpense/JsonAdaptedFixedExpense.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.storage.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.Category;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Jackson-friendly version of {@link FixedExpense}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "class JsonAdaptedFixedExpense {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"FixedExpense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Constructs a {@code JsonAdaptedTransportBooking} with the given details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public JsonAdaptedFixedExpense(@JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                                   @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                                   @JsonProperty(\"category\") String category) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Converts a given {@code FixedExpense} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public JsonAdaptedFixedExpense(FixedExpense source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        description \u003d source.getDescription().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        category \u003d source.getCategory().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Converts this Jackson-friendly adapted fixed expense object into the model\u0027s {@code FixedExpense} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public FixedExpense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (category \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Category.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!Category.isValidCategory(category)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        final Category modelCategory \u003d new Category(category);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return new FixedExpense(modelAmount, modelDescription, modelCategory);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 74,
      "zenatrick": 4,
      "joshlay96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/fixedexpense/JsonFixedExpenseStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.storage.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyFixedExpenseManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * A class to access FixedExpenseManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class JsonFixedExpenseStorage implements FixedExpenseStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonFixedExpenseStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public JsonFixedExpenseStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Path getFixedExpenseStorageFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Optional\u003cReadOnlyFixedExpenseManager\u003e readFixedExpenses() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return readFixedExpenses(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Similar to {@link #readFixedExpenses()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public Optional\u003cReadOnlyFixedExpenseManager\u003e readFixedExpenses("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Optional\u003cJsonSerializableFixedExpenseManager\u003e jsonFixedExpenseManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                filePath, JsonSerializableFixedExpenseManager.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (jsonFixedExpenseManager.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return Optional.of(jsonFixedExpenseManager.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void saveFixedExpenses(ReadOnlyFixedExpenseManager fixedExpenseManager) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        saveFixedExpenses(fixedExpenseManager, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Similar to {@link #saveFixedExpenses(ReadOnlyFixedExpenseManager)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void saveFixedExpenses("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            ReadOnlyFixedExpenseManager fixedExpenseManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(fixedExpenseManager);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableFixedExpenseManager(fixedExpenseManager), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 78,
      "zenatrick": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/fixedexpense/JsonSerializableFixedExpenseManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.storage.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.FixedExpenseManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyFixedExpenseManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * An Immutable FixedExpenseManager that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "@JsonRootName(value \u003d \"fixedExpenseManager\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "class JsonSerializableFixedExpenseManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRANSPORT_BOOKING \u003d \"Fixed Expense list contains duplicate \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            + \"Fixed Expense(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final List\u003cJsonAdaptedFixedExpense\u003e fixedExpenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Constructs a {@code JsonSerializableFixedExpenseManager} with the given fixed expenses."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public JsonSerializableFixedExpenseManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            @JsonProperty(\"fixedExpenses\") List\u003cJsonAdaptedFixedExpense\u003e fixedExpenses) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.fixedExpenses.addAll(fixedExpenses);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Converts a given {@code ReadOnlyFixedExpenseManager} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableFixedExpenseManager}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public JsonSerializableFixedExpenseManager(ReadOnlyFixedExpenseManager source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        fixedExpenses.addAll("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                source.getFixedExpenseList()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                .map(JsonAdaptedFixedExpense::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Converts this JsonSerializableFixedExpenseManager into the model\u0027s {@code FixedExpenseManager} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public FixedExpenseManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        FixedExpenseManager fixedExpenseManager \u003d new FixedExpenseManager();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        for (JsonAdaptedFixedExpense jsonAdaptedFixedExpense : fixedExpenses) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            FixedExpense fixedExpense \u003d jsonAdaptedFixedExpense.toModelType();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            if (fixedExpenseManager.hasFixedExpense(fixedExpense)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TRANSPORT_BOOKING);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            fixedExpenseManager.addFixedExpense(fixedExpense);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return fixedExpenseManager;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 62,
      "zenatrick": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/packinglist/JsonAdaptedItem.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "package seedu.address.storage.packinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.ItemCategory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.ItemName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.Quantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * The type Json adapted item."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class JsonAdaptedItem {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MISSING_FIELD_MESSAGE_FORMAT."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Item\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private final Integer quantity;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private final String category;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private final boolean isCheck;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Instantiates a new Json adapted item."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param name     the name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param quantity the quantity"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param isCheck  the is check"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public JsonAdaptedItem(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                           @JsonProperty(\"quantity\") Integer quantity,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                           @JsonProperty(\"category\") String category,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                           @JsonProperty(\"isCheck\") boolean isCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.isCheck \u003d isCheck;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Instantiates a new Json adapted item."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param source the source"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public JsonAdaptedItem(PackingListItem source) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        name \u003d source.getItemName().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        quantity \u003d source.getQuantity().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        category \u003d source.getItemCategory().value;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        isCheck \u003d source.getChecked();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * To model type packing list item."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the packing list item"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @throws IllegalValueException the illegal value exception"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public PackingListItem toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                    ItemName.class.getSimpleName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (!ItemName.isValidName(name)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new IllegalValueException(ItemName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        final ItemName modelItemName \u003d new ItemName(name);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                    Quantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (!Quantity.isValidQuantity(quantity)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        final Quantity modelQuantity \u003d new Quantity(quantity);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (!ItemCategory.isValidItemCategory(category)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new IllegalValueException(Quantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        final ItemCategory modelCategory \u003d new ItemCategory(category);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return new PackingListItem(modelItemName, modelQuantity, modelCategory, isCheck);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/packinglist/JsonPackingListStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "package seedu.address.storage.packinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyPackingListManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * The type Json packing list storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class JsonPackingListStorage implements PackingListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonPackingListStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Instantiates a new Json packing list storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param filePath the file path"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public JsonPackingListStorage(Path filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Gets packing list storage file path."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the packing list storage file path"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public Path getPackingListStorageFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public Optional\u003cReadOnlyPackingListManager\u003e readPackingList() throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return readPackingList(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public Optional\u003cReadOnlyPackingListManager\u003e readPackingList("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        Optional\u003cJsonSerializablePackingListManager\u003e jsonPackingListManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                filePath, JsonSerializablePackingListManager.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        if (jsonPackingListManager.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            return Optional.of(jsonPackingListManager.get().toModelType());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public void savePackingList(ReadOnlyPackingListManager packingListManager) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        savePackingList(packingListManager, filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public void savePackingList("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            ReadOnlyPackingListManager packingListManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(packingListManager);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializablePackingListManager(packingListManager), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/packinglist/JsonSerializablePackingListManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "package seedu.address.storage.packinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.PackingListManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyPackingListManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * The type Json serializable packing list manager."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "@JsonRootName(value \u003d \"packingListManager\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class JsonSerializablePackingListManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * The constant MESSAGE_DUPLICATE_ITEM."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITEM \u003d \"Packing list contains duplicate \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            + \"item(s).\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private final List\u003cJsonAdaptedItem\u003e packingList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Instantiates a new Json serializable packing list manager."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param packingList the packing list"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public JsonSerializablePackingListManager("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            @JsonProperty(\"packingList\") List\u003cJsonAdaptedItem\u003e packingList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        this.packingList.addAll(packingList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Instantiates a new Json serializable packing list manager."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param source the source"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public JsonSerializablePackingListManager(ReadOnlyPackingListManager source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        packingList.addAll("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                source.getPackingList()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                        .map(JsonAdaptedItem::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                        .collect(Collectors.toList())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Converts this JsonSerializablePackingListManager into the model\u0027s {@code PackingListManager} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the packing list manager"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    public PackingListManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        PackingListManager packingListManager \u003d new PackingListManager();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        for (JsonAdaptedItem jsonAdaptedItem : packingList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            PackingListItem item \u003d jsonAdaptedItem.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            if (packingListManager.hasPackingListItem(item)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ITEM);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            packingListManager.addPackingListItem(item);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        return packingListManager;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/packinglist/PackingListStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "package seedu.address.storage.packinglist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyPackingListManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " * The interface Packing list storage."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "loycatherine"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public interface PackingListStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    Path getPackingListStorageFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Read packing list optional."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the optional"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @throws DataConversionException the data conversion exception"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    Optional\u003cReadOnlyPackingListManager\u003e readPackingList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Read packing list optional."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param filePath the file path"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @return the optional"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @throws DataConversionException the data conversion exception"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    Optional\u003cReadOnlyPackingListManager\u003e readPackingList("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "            Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    void savePackingList(ReadOnlyPackingListManager packingListManager) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "loycatherine"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * Save items."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param packingListManager the packing list manager"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @param filePath           the file path"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     * @throws IOException the io exception"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    void savePackingList(ReadOnlyPackingListManager packingListManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/transportbooking/JsonAdaptedTransportBooking.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.storage.transportbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.core.time.DateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.Mode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Jackson-friendly version of {@link TransportBooking}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "class JsonAdaptedTransportBooking {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"TransportBooking\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final String mode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final String startLocation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final String endLocation;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final String startDateTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final String endDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a {@code JsonAdaptedTransportBooking} with the given details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public JsonAdaptedTransportBooking(@JsonProperty(\"mode\") String mode,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                                       @JsonProperty(\"startLocation\") String startLocation,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                                       @JsonProperty(\"endLocation\") String endLocation,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                                       @JsonProperty(\"startDateTime\") String startDateTime,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                                       @JsonProperty(\"endDateTime\") String endDateTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.mode \u003d mode;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.startLocation \u003d startLocation;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.endLocation \u003d endLocation;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.startDateTime \u003d startDateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.endDateTime \u003d endDateTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Converts a given {@code TransportBooking} into this class for Jackson use."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public JsonAdaptedTransportBooking(TransportBooking source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        mode \u003d source.getMode().value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        startLocation \u003d source.getStartLocation().value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        endLocation \u003d source.getEndLocation().value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        startDateTime \u003d source.getStartDateTime().getStorageFormat();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        endDateTime \u003d source.getEndDateTime().getStorageFormat();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Converts this Jackson-friendly adapted transport booking object into the model\u0027s {@code TransportBooking} object."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public TransportBooking toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (mode \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Mode.class.getSimpleName()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!Mode.isValidMode(mode)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new IllegalValueException(Mode.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        final Mode modelMode \u003d new Mode(mode);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (startLocation \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!Location.isValidLocation(startLocation)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        final Location modelStartLocation \u003d new Location(startLocation);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (endLocation \u003d\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!Location.isValidLocation(endLocation)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        final Location modelEndLocation \u003d new Location(endLocation);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (startDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!DateTime.isValidDateTime(startDateTime)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        DateTime modelStartDateTime \u003d DateTime.fromString(startDateTime);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (endDateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new IllegalValueException("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    String.format(MISSING_FIELD_MESSAGE_FORMAT, DateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (!DateTime.isValidDateTime(endDateTime)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new IllegalValueException(DateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        DateTime modelEndDateTime \u003d DateTime.fromString(endDateTime);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return new TransportBooking("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                modelMode, modelStartLocation, modelEndLocation, modelStartDateTime, modelEndDateTime);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/transportbooking/JsonSerializableTransportBookingManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.storage.transportbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyTransportBookingManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.TransportBookingManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * An Immutable TransportBookingManager that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "@JsonRootName(value \u003d \"transportBookingManager\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "class JsonSerializableTransportBookingManager {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRANSPORT_BOOKING \u003d \"Transport booking list contains duplicate \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            + \"transport booking(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final List\u003cJsonAdaptedTransportBooking\u003e transportBookings \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Constructs a {@code JsonSerializableTransportBookingManager} with the given transport bookings."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public JsonSerializableTransportBookingManager("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            @JsonProperty(\"transportBookings\") List\u003cJsonAdaptedTransportBooking\u003e transportBookings) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.transportBookings.addAll(transportBookings);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Converts a given {@code ReadOnlyTransportBookingManager} into this class for Jackson use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTransportBookingManager}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public JsonSerializableTransportBookingManager(ReadOnlyTransportBookingManager source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        transportBookings.addAll("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                source.getTransportBookings()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                        .stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                        .map(JsonAdaptedTransportBooking::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                        .collect(Collectors.toList())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        );"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Converts this JsonSerializableTransportBookingManager into the model\u0027s {@code TransportBookingManager} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public TransportBookingManager toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        TransportBookingManager transportBookingManager \u003d new TransportBookingManager();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        for (JsonAdaptedTransportBooking jsonAdaptedTransportBooking : transportBookings) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            TransportBooking transportBooking \u003d jsonAdaptedTransportBooking.toModelType();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            if (transportBookingManager.hasTransportBooking(transportBooking)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TRANSPORT_BOOKING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            transportBookingManager.addTransportBooking(transportBooking);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return transportBookingManager;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/transportbooking/JsonTransportBookingStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.storage.transportbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyTransportBookingManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * A class to access TransportBookingManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class JsonTransportBookingStorage implements TransportBookingStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTransportBookingStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public JsonTransportBookingStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Path getTransportBookingStorageFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Optional\u003cReadOnlyTransportBookingManager\u003e readTransportBookings() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return readTransportBookings(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Similar to {@link #readTransportBookings()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public Optional\u003cReadOnlyTransportBookingManager\u003e readTransportBookings("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Optional\u003cJsonSerializableTransportBookingManager\u003e jsonTransportBookingManager \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                filePath, JsonSerializableTransportBookingManager.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        if (jsonTransportBookingManager.isEmpty()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            return Optional.of(jsonTransportBookingManager.get().toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void saveTransportBookings(ReadOnlyTransportBookingManager transportBookingManager) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        saveTransportBookings(transportBookingManager, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Similar to {@link #saveTransportBookings(ReadOnlyTransportBookingManager)}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void saveTransportBookings("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            ReadOnlyTransportBookingManager transportBookingManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(transportBookingManager);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTransportBookingManager(transportBookingManager), filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/transportbooking/TransportBookingStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.storage.transportbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyTransportBookingManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.TransportBookingManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Represents a storage for {@link TransportBookingManager}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public interface TransportBookingStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Path getTransportBookingStorageFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns TransportBookingManager data as a {@link ReadOnlyTransportBookingManager}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Optional\u003cReadOnlyTransportBookingManager\u003e readTransportBookings() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @see #getTransportBookingStorageFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    Optional\u003cReadOnlyTransportBookingManager\u003e readTransportBookings(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * Saves the given {@link ReadOnlyTransportBookingManager} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @param transportBookingManager cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void saveTransportBookings(ReadOnlyTransportBookingManager transportBookingManager) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     * @see #saveTransportBookings(ReadOnlyTransportBookingManager)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    void saveTransportBookings("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            ReadOnlyTransportBookingManager transportBookingManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/trip/JsonAdaptedTrip.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.storage.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Jackson-friendly version of {@link Trip}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class JsonAdaptedTrip {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/trip/JsonSerializableTrip.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.storage.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * An Immutable TripManager that is serializable to JSON format."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class JsonSerializableTrip {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/trip/JsonTripStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.storage.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.trip.ReadOnlyTripManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * A class to access TripManager data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class JsonTripStorage implements TripStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Path getTripStorageFilePath() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Optional\u003cReadOnlyTripManager\u003e readTrip() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Optional\u003cReadOnlyTripManager\u003e readTripManager(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void saveTrip(ReadOnlyTripManager tripManager) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void saveTrip(ReadOnlyTripManager tripManager, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/trip/TripStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.storage.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.trip.ReadOnlyTripManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.trip.TripManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Represents a storage for {@link TripManager}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public interface TripStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    Path getTripStorageFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns TripManager data as a {@link ReadOnlyTripManager}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    Optional\u003cReadOnlyTripManager\u003e readTrip() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @see #getTripStorageFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    Optional\u003cReadOnlyTripManager\u003e readTripManager(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Saves the given {@link ReadOnlyTripManager} to the storage."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @param tripManager cannot be null."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    void saveTrip(ReadOnlyTripManager tripManager) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @see #saveTrip(ReadOnlyTripManager)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    void saveTrip("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            ReadOnlyTripManager tripManager, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AccommodationBookingCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " * An UI component that displays information of a {@code Accommodation}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "public class AccommodationBookingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private static final String FXML \u003d \"AccommodationBookingCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public final AccommodationBooking item;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private Label accommodationName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private Label startDay;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private Label endDay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private Label accommodationLocation;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public AccommodationBookingCard(AccommodationBooking item, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        accommodationName.setText(item.getAccommodationName().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        startDay.setText(\"Start Day: \" + item.getStartDay().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        endDay.setText(\"End Day: \" + item.getEndDay().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Called accommodationLocation because location is a reserved word in javafx."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Cannot create variable name called location/Location."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        accommodationLocation.setText(\"Location: \" + item.getLocation().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        remark.setText(\"Remark: \" + item.getRemark().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        if (!(other instanceof AccommodationBookingCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        AccommodationBookingCard card \u003d (AccommodationBookingCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AccommodationBookingPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " * Panel containing the list of accommodations."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "public class AccommodationBookingPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private static final String FXML \u003d \"AccommodationBookingPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AccommodationBookingPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private ListView\u003cAccommodationBooking\u003e accommodationBookingListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public AccommodationBookingPanel(ObservableList\u003cAccommodationBooking\u003e accommodationBookingList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        accommodationBookingListView.setItems(accommodationBookingList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        accommodationBookingListView.setCellFactory(listView -\u003e new AccommodationBookingListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Accommodation} using a"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     * {@code AccommodationListCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    class AccommodationBookingListViewCell extends ListCell\u003cAccommodationBooking\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        protected void updateItem(AccommodationBooking accommodationBooking, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            super.updateItem(accommodationBooking, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            if (empty || accommodationBooking \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                setGraphic(new AccommodationBookingCard(accommodationBooking, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ActivityCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * An UI component that displays information of a {@code Activity}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class ActivityCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private static final String FXML \u003d \"ActivityCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public final Activity activity;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private Label duration;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private Label title;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private Label priority;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private Label activityLocation;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ActivityCard(Activity activity, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        title.setText(\"Title: \" + activity.getTitle().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        priority.setText(\"Priority: \" + activity.getPriority().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        duration.setText(\"Duration: \" + activity.getDuration().toString() + \" hours\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        activityLocation.setText(\"Location: \" + activity.getLocation().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        activity.getTags().stream()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        if (!(other instanceof ActivityCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        ActivityCard card \u003d (ActivityCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                \u0026\u0026 activity.equals(card.activity);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ActivityPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Panel containing the list of activityPanel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class ActivityPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private static final String FXML \u003d \"ActivityPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ActivityPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private ListView\u003cActivity\u003e activityListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ActivityPanel(ObservableList\u003cActivity\u003e activityList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        activityListView.setItems(activityList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        activityListView.setCellFactory(listView -\u003e new ActivityListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Activity} using a {@code ActivityCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    class ActivityListViewCell extends ListCell\u003cActivity\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        protected void updateItem(Activity activity, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            super.updateItem(activity, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            if (empty || activity \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                setGraphic(new ActivityCard(activity, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 45,
      "joshlay96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FixedExpenseCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * An UI component that displays information of a {@code FixedExpense}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class FixedExpenseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private static final String FXML \u003d \"FixedExpenseCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public final FixedExpense fixedExpense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public FixedExpenseCard(FixedExpense fixedExpense, int displayedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.fixedExpense \u003d fixedExpense;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        description.setText(fixedExpense.getDescription().toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        amount.setText(\"Amount: $\" + fixedExpense.getAmount().toString());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        category.setText(\"Category: \" + fixedExpense.getCategory().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!(other instanceof FixedExpenseCard)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        FixedExpenseCard card \u003d (FixedExpenseCard) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u0026\u0026 fixedExpense.equals(card.fixedExpense);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 61,
      "zenatrick": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/FixedExpensePanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Panel containing the list of fixedExpense."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class FixedExpensePanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private static final String FXML \u003d \"FixedExpensePanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(FixedExpensePanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private ListView\u003cFixedExpense\u003e fixedExpenseListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public FixedExpensePanel(ObservableList\u003cFixedExpense\u003e fixedExpensesList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        fixedExpenseListView.setItems(fixedExpensesList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        fixedExpenseListView.setCellFactory(listView -\u003e new FixedListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code FixedExpense} using a {@code FixedExpenseCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    class FixedListViewCell extends ListCell\u003cFixedExpense\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        protected void updateItem(FixedExpense fixedExpense, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            super.updateItem(fixedExpense, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            if (empty || fixedExpense \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                setGraphic(new FixedExpenseCard(fixedExpense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 44,
      "zenatrick": 1,
      "joshlay96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private TabPanel tabPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private StackPane tabPanelPlaceholder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        tabPanel \u003d new TabPanel(logic.getFilteredPersonList(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                logic.getFilteredTransportBookingList(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                logic.getFilteredFixedExpenseList(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                logic.getFilteredPackingList(),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                logic.getFilteredAccommodationBookingList(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                logic.getFilteredActivityList()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                );"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        tabPanelPlaceholder.getChildren().add(tabPanel.getRoot());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public TabPanel getTabPanel() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        return tabPanel;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 2,
      "zenatrick": 6,
      "joshlay96": 5,
      "-": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PackingListCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * An UI component that displays information of a {@code Item}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class PackingListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private static final String FXML \u003d \"PackingListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public final PackingListItem item;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private Label itemName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private Label isChecked;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private Label itemCategory;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public PackingListCard(PackingListItem item, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.item \u003d item;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        itemName.setText(item.getItemName().toString());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        quantity.setText(\"Quantity: \" + item.getQuantity().toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        itemCategory.setText(\"Category: \" + item.getItemCategory().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "        isChecked.setText(\"Packed: \" + item.getChecked());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!(other instanceof PackingListCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        PackingListCard card \u003d (PackingListCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u0026\u0026 item.equals(card.item);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 1,
      "jwee97": 56,
      "zenatrick": 6,
      "joshlay96": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PackingListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Panel containing the list of items."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class PackingListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private static final String FXML \u003d \"PackingListPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PackingListPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private ListView\u003cPackingListItem\u003e packingListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public PackingListPanel(ObservableList\u003cPackingListItem\u003e packingList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        packingListView.setItems(packingList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        packingListView.setCellFactory(listView -\u003e new PackingListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Item} using a {@code PackingListCard}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    class PackingListViewCell extends ListCell\u003cPackingListItem\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        protected void updateItem(PackingListItem item, boolean empty) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            super.updateItem(item, empty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            if (empty || item \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                setGraphic(new PackingListCard(item, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 40,
      "zenatrick": 5,
      "joshlay96": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TabPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "public class TabPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private static final String FXML \u003d \"TabPanel.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TabPanel.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private StackPane transportBookingPanelPlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private StackPane fixedExpensePanelPlaceholder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private StackPane packingListPanelPlaceholder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private StackPane accommodationListPanelPlaceholder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private StackPane activityPanelPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public TabPanel(ObservableList\u003cPerson\u003e personList,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    ObservableList\u003cTransportBooking\u003e transportList,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    ObservableList\u003cFixedExpense\u003efixedExpenseList,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    ObservableList\u003cPackingListItem\u003e packingList,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    ObservableList\u003cAccommodationBooking\u003e accommodationList,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    ObservableList\u003cActivity\u003e activityList"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    ) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(new PersonListPanel(personList).getRoot());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        transportBookingPanelPlaceholder.getChildren().add(new TransportBookingPanel(transportList).getRoot());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        fixedExpensePanelPlaceholder.getChildren().add(new FixedExpensePanel(fixedExpenseList).getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        packingListPanelPlaceholder.getChildren().add(new PackingListPanel(packingList).getRoot());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        accommodationListPanelPlaceholder.getChildren().add(new AccommodationBookingPanel(accommodationList).getRoot());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        activityPanelPlaceholder.getChildren().add(new ActivityPanel(activityList).getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 6,
      "Deunitato": 7,
      "zenatrick": 31,
      "joshlay96": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TransportBookingCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class TransportBookingCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private static final String FXML \u003d \"TransportBookingCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public final TransportBooking transportBooking;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private Label mode;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private Label startLocation;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private Label endLocation;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private Label startDateTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    private Label endDateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public TransportBookingCard(TransportBooking transportBooking, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        this.transportBooking \u003d transportBooking;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        mode.setText(transportBooking.getMode().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        startLocation.setText(\"Start location is: \" + transportBooking.getStartLocation().value);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        endLocation.setText(\"End location is: \" + transportBooking.getEndLocation().value);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        startDateTime.setText(\"Start time is: \" + transportBooking.getStartDateTime().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        endDateTime.setText(\"End time is: \" + transportBooking.getEndDateTime().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        if (!(other instanceof TransportBookingCard)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        TransportBookingCard card \u003d (TransportBookingCard) other;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u0026\u0026 transportBooking.equals(card.transportBooking);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 63,
      "zenatrick": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TransportBookingPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": " * Panel containing the list of transportBookings."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "public class TransportBookingPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private static final String FXML \u003d \"TransportBookingPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TransportBookingPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    private ListView\u003cTransportBooking\u003e transportBookingListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public TransportBookingPanel(ObservableList\u003cTransportBooking\u003e transportBookingList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        transportBookingListView.setItems(transportBookingList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        transportBookingListView.setCellFactory(listView -\u003e new TransportListViewCell());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     * {@code TransportList} using a {@code TransportBookingCard}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    class TransportListViewCell extends ListCell\u003cTransportBooking\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        protected void updateItem(TransportBooking transportBooking, boolean empty) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            super.updateItem(transportBooking, empty);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            if (empty || transportBooking \u003d\u003d null) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                setGraphic(new TransportBookingCard(transportBooking, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 46,
      "zenatrick": 1,
      "joshlay96": 1
    }
  },
  {
    "path": "src/main/resources/view/AccommodationBookingCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                \u003cLabel fx:id\u003d\"accommodationName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$accommodationName\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            \u003cLabel fx:id\u003d\"startDay\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDay\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            \u003cLabel fx:id\u003d\"endDay\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDay\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            \u003cLabel fx:id\u003d\"accommodationLocation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$accommodationLocation\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            \u003cLabel fx:id\u003d\"remark\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$remark\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 40
    }
  },
  {
    "path": "src/main/resources/view/AccommodationBookingPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    \u003cListView fx:id\u003d\"accommodationBookingListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 7
    }
  },
  {
    "path": "src/main/resources/view/ActivityCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                \u003cLabel fx:id\u003d\"title\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            \u003cLabel fx:id\u003d\"priority\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            \u003cLabel fx:id\u003d\"duration\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            \u003cLabel fx:id\u003d\"activityLocation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 41
    }
  },
  {
    "path": "src/main/resources/view/ActivityPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    \u003cListView fx:id\u003d\"activityListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 7
    }
  },
  {
    "path": "src/main/resources/view/FixedExpenseCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003cLabel fx:id\u003d\"amount\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jwee97": 26,
      "zenatrick": 11
    }
  },
  {
    "path": "src/main/resources/view/FixedExpensePanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    \u003cListView fx:id\u003d\"fixedExpenseListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jwee97": 5,
      "zenatrick": 2
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/help_icon.png\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets right\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cInsets left\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 3,
      "-": 34
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"Address App\" type\u003d\"javafx.stage.Stage\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "         xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cImage url\u003d\"@/images/address_book_32.png\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100\" minHeight\u003d\"100\" prefHeight\u003d\"100\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                           styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                        \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                        \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"tabPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/VBox\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 12,
      "-": 47
    }
  },
  {
    "path": "src/main/resources/view/PackingListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                \u003cLabel fx:id\u003d\"itemName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            \u003cLabel fx:id\u003d\"isChecked\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            \u003cLabel fx:id\u003d\"itemCategory\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$itemCategory\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jwee97": 25,
      "zenatrick": 12,
      "joshlay96": 1
    }
  },
  {
    "path": "src/main/resources/view/PackingListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    \u003cListView fx:id\u003d\"packingListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jwee97": 5,
      "zenatrick": 2
    }
  },
  {
    "path": "src/main/resources/view/TabPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003cTabPane tabClosingPolicy\u003d\"UNAVAILABLE\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003cTab text\u003d\"AB3\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    \u003cTab text\u003d\"My Activities\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        \u003cStackPane fx:id\u003d\"activityPanelPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    \u003cTab text\u003d\"Transport Booking\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        \u003cStackPane fx:id\u003d\"transportBookingPanelPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    \u003cTab text\u003d\"Fixed Expenses\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003cStackPane fx:id\u003d\"fixedExpensePanelPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    \u003cTab text \u003d \"Packing List\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        \u003cStackPane fx:id\u003d\"packingListPanelPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    \u003cTab text \u003d \"Accommodations\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        \u003cStackPane fx:id\u003d\"accommodationListPanelPlaceholder\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    \u003c/Tab\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c/TabPane\u003e"
      }
    ],
    "authorContributionMap": {
      "jwee97": 4,
      "Deunitato": 3,
      "zenatrick": 13,
      "joshlay96": 7
    }
  },
  {
    "path": "src/main/resources/view/TransportBookingCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \u003cLabel fx:id\u003d\"mode\" styleClass\u003d\"cell_big_label\" text\u003d\"\\\\$mode\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            \u003cLabel fx:id\u003d\"startLocation\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$startlocation\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            \u003cLabel fx:id\u003d\"endLocation\" layoutX\u003d\"25.0\" layoutY\u003d\"54.0\" styleClass\u003d\"cell_small_label\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                   text\u003d\"\\\\$endlocation\"/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            \u003cLabel fx:id\u003d\"startDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$starttime\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "            \u003cLabel fx:id\u003d\"endDateTime\" layoutX\u003d\"25.0\" layoutY\u003d\"80.0\" styleClass\u003d\"cell_small_label\" text\u003d\"\\\\$endtime\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jwee97": 25,
      "zenatrick": 15
    }
  },
  {
    "path": "src/main/resources/view/TransportBookingPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/10.0.2-internal\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    \u003cListView fx:id\u003d\"transportBookingListView\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jwee97": 5,
      "zenatrick": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.trip.TripManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.storage.accommodationbooking.JsonAccommodationBookingStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.storage.activity.JsonActivityManagerStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.storage.fixedexpense.JsonFixedExpenseStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.storage.packinglist.JsonPackingListStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.storage.transportbooking.JsonTransportBookingStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.storage.trip.JsonTripStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //TODO Improve this!"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        JsonTransportBookingStorage transportBookingStorage \u003d new JsonTransportBookingStorage(temporaryFolder"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .resolve(\"transport.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        JsonFixedExpenseStorage fixedExpenseStorage \u003d new JsonFixedExpenseStorage(temporaryFolder"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .resolve(\"fixedexpense.json\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        JsonActivityManagerStorage activityManagerStorage \u003d new JsonActivityManagerStorage(temporaryFolder"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .resolve(\"activity.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        JsonPackingListStorage packingListStorage \u003d new JsonPackingListStorage(temporaryFolder"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .resolve(\"packinglist.json\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        JsonAccommodationBookingStorage accommodationBookingStorage \u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new JsonAccommodationBookingStorage(temporaryFolder"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .resolve(\"accommodationbooking.json\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        JsonTripStorage tripStorage \u003d new JsonTripStorage();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                transportBookingStorage,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                fixedExpenseStorage,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                activityManagerStorage,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                accommodationBookingStorage,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                packingListStorage, tripStorage,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                userPrefsStorage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //TODO Temporary backstop"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        JsonTransportBookingStorage transportBookingStorage \u003d"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new JsonTransportBookingStorage(temporaryFolder.resolve(\"ioExceptionTransportBooking.json\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        JsonFixedExpenseStorage fixedExpenseStorage \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new JsonFixedExpenseStorage(temporaryFolder.resolve(\"ioExceptionFixedExpense.json\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        JsonActivityManagerStorage activityManagerStorage \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new JsonActivityManagerStorage(temporaryFolder.resolve(\"ioExceptionActivity.json\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        JsonAccommodationBookingStorage accommodationBookingStorage \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new JsonAccommodationBookingStorage(temporaryFolder.resolve(\"ioExceptionAccommodationBooking.json\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        JsonPackingListStorage packingListStorage \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new JsonPackingListStorage(temporaryFolder.resolve(\"ioPackingListStorage.json\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        JsonTripStorage tripStorage \u003d new JsonTripStorage();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                transportBookingStorage,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                fixedExpenseStorage,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                activityManagerStorage,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                accommodationBookingStorage,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                packingListStorage, tripStorage,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                userPrefsStorage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                                      Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                                      String expectedMessage) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                model.getTransportBookingManager(), model.getFixedExpenseManager(),"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                model.getPackingListManager(), model.getActivityManager(),"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                model.getAccommodationBookingManager(), new TripManager(), model.getUserPrefs());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                                      String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 7,
      "joshlay96": 55,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//import seedu.address.model.listmanagers.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "///**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "// * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "// */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 44,
      "zenatrick": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//import seedu.address.model.listmanagers.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        private final Person person;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            this.person \u003d person;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            requireNonNull(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            personsAdded.add(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            return new AddressBook();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 194,
      "zenatrick": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//import seedu.address.model.listmanagers.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.ActivityManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.AccommodationBookingManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.FixedExpenseManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.PackingListManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.TransportBookingManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//public class ClearCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Model model \u003d new ModelManager(getTypicalAddressBook(), new TransportBookingManager(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new FixedExpenseManager(), new PackingListManager(), new ActivityManager(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new TransportBookingManager(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new FixedExpenseManager(), new PackingListManager(), new ActivityManager(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new FixedExpenseManager(), new PackingListManager(), new AccommodationBookingManager(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new TransportBookingManager(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new FixedExpenseManager(), new PackingListManager(), new AccommodationBookingManager(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 49,
      "zenatrick": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //    public static void showActivityAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredActivityList().size());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        Activity activity \u003d model.getFilteredActivityList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 10,
      "-": 128
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//import seedu.address.model.listmanagers.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.ActivityManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.AccommodationBookingManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.FixedExpenseManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.PackingListManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.TransportBookingManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "///**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "// * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "// * {@code DeleteCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "// */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//public class DeleteCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            new TransportBookingManager(), new FixedExpenseManager(), new PackingListManager(), new ActivityManager(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            new TransportBookingManager(), new FixedExpenseManager(), new PackingListManager(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            new AccommodationBookingManager(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new TransportBookingManager(), new FixedExpenseManager(),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new PackingListManager(), new ActivityManager(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new PackingListManager(), new AccommodationBookingManager(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new TransportBookingManager(),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new FixedExpenseManager(), new PackingListManager(), new ActivityManager(), new UserPrefs());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new FixedExpenseManager(), new PackingListManager(), new AccommodationBookingManager(),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 135,
      "zenatrick": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//import seedu.address.model.listmanagers.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.ActivityManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.AccommodationBookingManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.FixedExpenseManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.PackingListManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.TransportBookingManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "///**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "// * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "// * and unit tests for EditCommand."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "// */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//public class EditCommandTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            new TransportBookingManager(), new FixedExpenseManager(), new PackingListManager(), new ActivityManager(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            new TransportBookingManager(), new FixedExpenseManager(), new PackingListManager(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            new AccommodationBookingManager(), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new TransportBookingManager(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new FixedExpenseManager(), new PackingListManager(), new ActivityManager(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new FixedExpenseManager(), new PackingListManager(), new AccommodationBookingManager(),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new TransportBookingManager(), new FixedExpenseManager(),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new PackingListManager(), new ActivityManager(), new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new PackingListManager(), new AccommodationBookingManager(), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new TransportBookingManager(), new FixedExpenseManager(),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new PackingListManager(), new ActivityManager(), new UserPrefs());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new PackingListManager(), new AccommodationBookingManager(), new UserPrefs());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new TransportBookingManager(), new FixedExpenseManager(),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new PackingListManager(), new ActivityManager(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new PackingListManager(), new AccommodationBookingManager(), new UserPrefs());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//     * but smaller than size of address book"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // different index -\u003e returns false"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 212,
      "zenatrick": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//    public void execute_exit_success() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 8,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//import seedu.address.model.listmanagers.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.ActivityManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.AccommodationBookingManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.FixedExpenseManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.PackingListManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.TransportBookingManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "///**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "// * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "// */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//public class FindCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    private Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            new TransportBookingManager(), new FixedExpenseManager(), new PackingListManager(), new ActivityManager(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            new TransportBookingManager(), new FixedExpenseManager(), new PackingListManager(), new ActivityManager(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            new TransportBookingManager(), new FixedExpenseManager(), new PackingListManager(),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            new AccommodationBookingManager(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            new TransportBookingManager(), new FixedExpenseManager(), new PackingListManager(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//            new AccommodationBookingManager(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 102,
      "zenatrick": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//    public void execute_help_success() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 8,
      "-": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//import seedu.address.model.listmanagers.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.ActivityManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.AccommodationBookingManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.FixedExpenseManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.PackingListManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.listmanager.TransportBookingManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "///**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "// * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "// */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//public class ListCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    private Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    private Model expectedModel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new TransportBookingManager(), new FixedExpenseManager(), new PackingListManager(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new ActivityManager(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new TransportBookingManager(), new FixedExpenseManager(), new PackingListManager(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new ActivityManager(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new AccommodationBookingManager(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        expectedModel \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new TransportBookingManager(), new FixedExpenseManager(), new PackingListManager(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                new AccommodationBookingManager(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 59,
      "zenatrick": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/activitytest/AddActivityTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.logic.commands.activitytest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.activity.AddActivityCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.util.attributes.ModelStub;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.testutil.ActivityBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class AddActivityTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddActivityCommand(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        ModelStubAcceptingActivityAdded modelStub \u003d new ModelStubAcceptingActivityAdded();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Activity validActivity \u003d new ActivityBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        CommandResult commandResult \u003d new AddActivityCommand(validActivity).execute(modelStub);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertEquals(String.format(AddActivityCommand.MESSAGE_SUCCESS, validActivity),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertEquals(Arrays.asList(validActivity), modelStub.activitiesAdded);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Activity validPerson \u003d new ActivityBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        AddActivityCommand addCommand \u003d new AddActivityCommand(validPerson);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithActivity(validPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                AddActivityCommand.MESSAGE_DUPLICATE_ACTIVITY, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Activity eggHouse \u003d new ActivityBuilder().withTitle(\"Egg house\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Activity osaka \u003d new ActivityBuilder().withTitle(\"Osaka\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        AddActivityCommand addEggCommand \u003d new AddActivityCommand(eggHouse);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        AddActivityCommand addOsakaCommand \u003d new AddActivityCommand(osaka);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(addEggCommand.equals(addEggCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        AddActivityCommand addEggCommandCopy \u003d new AddActivityCommand(eggHouse);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(addEggCommand.equals(addEggCommandCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(addEggCommand.equals(1));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(addEggCommand.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // different activity -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(addEggCommand.equals(addOsakaCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/activitytest/DeleteActivityTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.logic.commands.activitytest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.logic.commands.activity.DeleteActivityCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.AccommodationBookingManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.ActivityManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.FixedExpenseManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.PackingListManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.TransportBookingManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.trip.TripManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.showActivityAtIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class DeleteActivityTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            new TransportBookingManager(), new FixedExpenseManager(), new PackingListManager(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            new ActivityManager(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            new AccommodationBookingManager(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            new TripManager(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        Activity activityToDelete \u003d model.getFilteredActivityList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        DeleteActivityCommand deleteCommand \u003d new DeleteActivityCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        String expectedMessage \u003d String.format(DeleteActivityCommand.MESSAGE_DELETE_ACTIVITY_SUCCESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //                activityToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //                model.getTransportBookingManager(), model.getFixedExpenseManager(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //                model.getPackingListManager(), new ActivityManager(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //                model.getAccommodationBookingManager(), new UserPrefs());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        expectedModel.deleteActivity(activityToDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredActivityList().size() + 1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        DeleteActivityCommand deleteCommand \u003d new DeleteActivityCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        //showActivityAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        Activity activityToDelete \u003d model.getFilteredActivityList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        DeleteActivityCommand deleteCommand \u003d new DeleteActivityCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        String expectedMessage \u003d String.format(DeleteActivityCommand.MESSAGE_DELETE_ACTIVITY_SUCCESS,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        activityToDelete);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //                model.getTransportBookingManager(), model.getFixedExpenseManager(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //                model.getPackingListManager(), new ActivityManager(),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //                model.getAccommodationBookingManager(), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        expectedModel.deleteActivity(activityToDelete);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        //showActivityAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getActivityManager().getActivityList().size());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        DeleteActivityCommand deleteCommand \u003d new DeleteActivityCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    //    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        DeleteActivityCommand deleteFirstCommand \u003d new DeleteActivityCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        DeleteActivityCommand deleteSecondCommand \u003d new DeleteActivityCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        DeleteActivityCommand deleteFirstCommandCopy \u003d new DeleteActivityCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        model.updateFilteredActivityList(p -\u003e false);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(model.getFilteredActivityList().isEmpty());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Deunitato": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/activitytest/ModelStubAcceptingActivityAdded.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.logic.commands.activitytest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.ActivityManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyActivityManager;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.util.attributes.ModelStub;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class ModelStubAcceptingActivityAdded extends ModelStub {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    final ArrayList\u003cActivity\u003e activitiesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return activitiesAdded.stream().anyMatch(activity::isSame);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        activitiesAdded.add(activity);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ReadOnlyActivityManager getActivityManager() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return new ActivityManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/activitytest/ModelStubWithActivity.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.logic.commands.activitytest;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.util.attributes.ModelStub;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * A Model stub that contains a single person."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class ModelStubWithActivity extends ModelStub {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private final Activity activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    ModelStubWithActivity(Activity activity) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return this.activity.isSame(activity);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 1,
      "-": 140
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 2,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EasyTravelParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class EasyTravelParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "    private final EasyTravelParser parser \u003d new EasyTravelParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                + INDEX_FIRST.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 2,
      "Deunitato": 5,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 9,
      "zenatrick": 1,
      "-": 201
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003c\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 3,
      "zenatrick": 2,
      "-": 191
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "// TODO: Fix ModelManagerTest"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //public void equals() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    // same values -\u003e returns true"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    // same object -\u003e returns true"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    // null -\u003e returns false"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    // different types -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 38,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.UserPrefs;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/accommodationbooking/AccommodationBookingTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.model.listmanagers.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "class AccommodationBookingTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private final AccommodationBooking accommodationBooking \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            new AccommodationBooking(new AccommodationName(\"RitzCarlton\"),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new Location(\"Marina Bay\"), new Day(1), new Day(5), new Remark(\"Expensive Hotel\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void constructorInvalidNameThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Integer invalidStartDay \u003d -100;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Integer invalidEndDay \u003d -200;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        String invalidRemark \u003d \"\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new AccommodationBooking(new AccommodationName(invalidName),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(invalidLocation), new Day(invalidStartDay), new Day(invalidEndDay),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Remark(invalidRemark)));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void getName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Correct case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new AccommodationName(\"RitzCarlton\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new AccommodationBooking(new AccommodationName(\"RitzCarlton\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Location(\"Marina Bay\"), new Day(1), new Day(5), new Remark(\"Expensive Hotel\"))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        .getAccommodationName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new AccommodationName(\"MBS\"), new AccommodationBooking(new AccommodationName(\"RitzCarlton\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(\"Marina Bay\"), new Day(1), new Day(5), new Remark(\"Expensive Hotel\"))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .getAccommodationName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void getLocation() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Correct case"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Location(\"Marina Bay\"), accommodationBooking.getLocation());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Location(\"Jurong\"), accommodationBooking.getLocation());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void getStartDay() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Correct case"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Day(1), accommodationBooking.getStartDay());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Day(10), accommodationBooking.getStartDay());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void getEndDay() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Correct case"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Day(5), accommodationBooking.getEndDay());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Day(200), accommodationBooking.getEndDay());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void getRemark() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Correct case"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Remark(\"Expensive Hotel\"), accommodationBooking.getRemark());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Remark(\"Cheap Hotel\"), accommodationBooking.getRemark());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void isDayValid() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(accommodationBooking.isDayValid(accommodationBooking.getStartDay(),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                accommodationBooking.getEndDay()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //TODO Come out with the false method"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        AccommodationBooking identicalBooking \u003d new AccommodationBooking(new AccommodationName(\"RitzCarlton\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(\"Marina Bay\"), new Day(1), new Day(5), new Remark(\"Expensive Hotel\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        AccommodationBooking differentBooking \u003d new AccommodationBooking(new AccommodationName(\"RitzCarlton\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(\"Marina Bay\"), new Day(3), new Day(10), new Remark(\"Expensive Hotel\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Correct case"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(identicalBooking, accommodationBooking);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(accommodationBooking, differentBooking);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        AccommodationBooking identicalBooking \u003d new AccommodationBooking(new AccommodationName(\"RitzCarlton\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(\"Marina Bay\"), new Day(1), new Day(5), new Remark(\"Expensive Hotel\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Same case"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(identicalBooking.hashCode(), accommodationBooking.hashCode());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        AccommodationBooking differentBooking \u003d new AccommodationBooking(new AccommodationName(\"RitzCarlton\"),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(\"Marina Bay\"), new Day(3), new Day(10), new Remark(\"Expensive Hotel\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(accommodationBooking.hashCode(), differentBooking.hashCode());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        AccommodationBooking identicalBooking \u003d new AccommodationBooking(new AccommodationName(\"RitzCarlton\"),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(\"Marina Bay\"), new Day(1), new Day(5), new Remark(\"Expensive Hotel\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Same case"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(identicalBooking.toString(), accommodationBooking.toString());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        AccommodationBooking differentBooking \u003d new AccommodationBooking(new AccommodationName(\"RitzCarlton\"),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(\"Marina Bay\"), new Day(1), new Day(10), new Remark(\"Expensive Hotel\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(accommodationBooking.toString(), differentBooking.toString());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/accommodationbooking/AccommodationNameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.model.listmanagers.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "class AccommodationNameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AccommodationName(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void constructorInvalidAccommodationNameThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new AccommodationName(invalidName));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AccommodationName.isValidName(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // blank name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(AccommodationName.isValidName(\"\")); // Empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(AccommodationName.isValidName(\"   \")); // Multiple Spaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(AccommodationName.isValidName(\" \")); // Single space"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(AccommodationName.isValidName(\"^\")); // Non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(AccommodationName.isValidName(\"Dog*\")); // Contains non-alphanumeric characters."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(AccommodationName.isValidName(\"yoursystemrunsf1234anyhowjustpresswhymylifesobadnow\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                + \"IwanttowithdrawfromNUS\")); // Contains 74 characters."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Valid name"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(AccommodationName.isValidName(\"Jeffry \")); //Normal case"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(AccommodationName.isValidName(\"Hello1234\")); // Contains alphanumeric characters."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(AccommodationName.isValidName(\"hellomynameisJ ohn123an dIamA\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                + \"Dog\")); //Contains 30 alphanumeric char with spaces."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(AccommodationName.isValidName(\"yoursystemrunsf1234anyhow\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                + \"justpress\")); // Contains 34 characters."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(\"Joshua\", new AccommodationName(\"Joshua\").toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(\"Kenny\", new AccommodationName(\"Kenny\").toString()); //Caps and non caps characters"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(\"Lum123\", new AccommodationName(\"Lum123\").toString()); //Alphanumeric"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Wrong toString"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(\"Big Boss\", new AccommodationName(\"Boss\").toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Equal Name Object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new AccommodationName(\"Henry\"), new AccommodationName(\"Henry\")); // When two names are the same."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Non Equal Name Object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new AccommodationName(\"Wolfy\"), new AccommodationName(\"Harry\")); // When two names are diff"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Equal Hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new AccommodationName(\"Hashcode\").hashCode(), new AccommodationName(\"Hashcode\").hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Non Equal Hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new AccommodationName(\"hashcode\").hashCode(), new AccommodationName(\"HashCode\").hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/accommodationbooking/DayTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.model.listmanagers.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "class DayTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Day(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void constructorInvalidDayThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Integer invalidDay \u003d -100;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Day(invalidDay));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void isValidDay() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // null Day"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Day.isValidDay(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Invalid Day"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(Day.isValidDay(0)); // zero day"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(Day.isValidDay(-100)); // negative day"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //TODO After Wee finds a way to check for overlap"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //assertFalse(Day.isAmount.isValidAmount(\"1000.000\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Valid Day"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Day.isValidDay(10)); // With 2 digits."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Day.isValidDay(1)); // normal test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(\"10\", new Day(10).toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Day(10), new Day(10)); // WHen 2 days are the same"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Day(15), new Day(5)); // WHen 2 days are different."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Equal Hashcode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Day(1).hashCode(), new Day(1).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Non Equal Hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Day(1).hashCode(), new Day(2).hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 64
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/accommodationbooking/RemarkTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.model.listmanagers.accommodationbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "class RemarkTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Remark(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void constructorInvalidRemarkThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        String invalidRemark \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Remark(invalidRemark));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void isValidRemark() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // null remark"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Remark.isValidRemark(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // blank remark"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(Remark.isValidRemark(\"\")); // Empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // assertFalse(Remark.isValidRemark(\"  \")); // Multiple Spaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // assertFalse(Remark.isValidRemark(\" \")); // Single space"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // invalid remark"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(Remark.isValidRemark(\"yoursystemrunsf1234anyhowjustpresswhymylifesobadnow\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                + \"IwanttowithdrawfromNUSWhyYouwanttoputupto150characters\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                + \"MakemylifesodifficultwhydidijoinnusSPwassomuchfun\")); // Contains 154 characters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Valid remark"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"Hello \")); //Normal case"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"^\")); // Non-alphanumeric characters"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"Dog*\")); // Contains non-alphanumeric characters."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"Hello1234\")); // Contains alphanumeric characters."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"hellomynameisJ ohn123an dIamA\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                + \"Dog\")); //Contains 30 alphanumeric char with spaces."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Remark.isValidRemark(\"yoursystemrunsf1234anyhow\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                + \"justpress\")); // Contains 34 characters."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(\"1000\", new Remark(\"1000\").toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(\"HelloImaDog\", new Remark(\"HelloImaDog\").toString()); //Caps and non caps characters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(\"1000Money\", new Remark(\"1000Money\").toString()); //Alphanumeric"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Wrong toString"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(\"Wrong\", new Remark(\"Hello\").toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Equal Remark Object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Remark(\"Food\"), new Remark(\"Food\")); // When two remark are the same."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Non Equal Remark Object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Remark(\"Foody\"), new Remark(\"Food\")); // When two remark are different."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Equal Hashcode"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Remark(\"Hashcode\").hashCode(), new Remark(\"Hashcode\").hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Non Equal Hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Remark(\"hashcode\").hashCode(), new Remark(\"HashCode\").hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 4,
      "joshlay96": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/activity/ActivityTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.model.listmanagers.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "class ActivityTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private final Activity activity \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            new Activity(new Title(\"Hot Spring\"),"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new Priority(1),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new Duration(3),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new Location(\"Hokkaido\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void constructorInvalidTitleThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        String invalidTitle \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Integer invalidPriority \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Integer invalidDuration \u003d 0;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Activity(new Title(invalidTitle),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Priority(invalidPriority),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Duration(invalidDuration),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(null),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new HashSet\u003c\u003e()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void getTitle() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Correct case"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Title(\"Hot Spring\"), new Activity("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Title(\"Hot Spring\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Priority(1),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Duration(3),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(\"Hokkaido\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new HashSet\u003c\u003e()).getTitle());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Title(\"Hot Hot\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Activity(new Title(\"Hot Spring\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Priority(1),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Duration(3),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Location(\"Hokkaido\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new HashSet\u003c\u003e()).getTitle());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void getDuration() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Correct case"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Duration(3),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Activity(new Title(\"Hot Spring\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Priority(1),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Duration(3),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Location(\"Hokkaido\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new HashSet\u003c\u003e()).getDuration());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Duration(2),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Activity(new Title(\"Hot Spring\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Priority(1),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Duration(3),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Location(\"Hokkaido\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new HashSet\u003c\u003e()).getDuration());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void getPriority() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Correct case"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Priority(3),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Activity(new Title(\"Hot Spring\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Priority(3),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Duration(3),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Location(\"Hokkaido\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new HashSet\u003c\u003e()).getPriority());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Priority(3),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Activity(new Title(\"Hot Spring\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Priority(1),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Duration(3),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Location(\"Hokkaido\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new HashSet\u003c\u003e()).getPriority());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void isSame() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(activity.isSame(activity));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(activity.isSame(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // different name and quantity -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Activity editedActivity \u003d new Activity(new Title(\"See Deers\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Priority(1),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Duration(1),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(\"Nara\"),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(editedActivity.isSame(activity));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Activity secondEditedActivity \u003d new Activity(new Title(\"Spring\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Priority(1),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Duration(3),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(\"Hokkaido\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(editedActivity.isSame(secondEditedActivity));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Same case"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Activity editedActivity \u003d new Activity(new Title(\"Hot Spring\"),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Priority(1),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Duration(3),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(\"Hokkaido\"),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(activity, editedActivity);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        editedActivity \u003d new Activity(new Title(\"See Deers\"),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Priority(1),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Duration(1),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(\"Nara\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(editedActivity, activity);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Same case"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Activity editedActivity \u003d new Activity(new Title(\"Hot Spring\"),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Priority(1),"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Duration(3),"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(\"Hokkaido\"),"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(editedActivity.hashCode(), activity.hashCode());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        editedActivity \u003d new Activity(new Title(\"See Deers\"),"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Priority(1),"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Duration(1),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(\"Nara\"),"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(editedActivity.hashCode(), activity.hashCode());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Activity editedActivity \u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Activity(new Title(\"Hot Spring\"),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Priority(1),"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Duration(3),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Location(\"Hokkaido\"),"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(activity.toString(), editedActivity.toString());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        editedActivity \u003d"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Activity(new Title(\"See Deers\"),"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Priority(1),"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Duration(1),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new Location(\"Nara\"),"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(editedActivity.toString(), activity.toString());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 183
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/activity/DurationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.model.listmanagers.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "class DurationTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Duration(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void constructorInvalidDurationThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Integer invalidDuration \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Duration(invalidDuration));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void isValidDuration() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // null Duration"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Duration.isValidDuration(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Invalid Duration"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(Duration.isValidDuration(0)); // Zero duration"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(Duration.isValidDuration(-10)); // Negative Duration"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(Duration.isValidDuration(1000));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Valid Duration"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Duration.isValidDuration(23)); // Normal case"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Duration.isValidDuration(1)); // Only 1 digit"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Duration.isValidDuration(023)); //When a 0 is placed in front"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Duration.isValidDuration(0000000000000001)); // Trailing 0s"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(\"2\", new Duration(2).toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Duration(2), new Duration(2)); // When two duration are the same."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Duration(2), new Duration(3)); // When two durations are different."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Equal Hashcode"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Duration(20).hashCode(), new Duration(20).hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Non Equal Hashcode"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Duration(13).hashCode(), new Duration(15).hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/activity/PriorityTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.model.listmanagers.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "class PriorityTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Priority(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void constructorInvalidPriorityThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Integer invalidPriority \u003d -100;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Priority(invalidPriority));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void isValidPriority() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // null priority"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Priority.isValidPriority(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Invalid priority"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(Priority.isValidPriority(1000));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(Priority.isValidPriority(4)); // Out of bounds"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(Priority.isValidPriority(-1)); // Negative value"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Valid priority"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Priority.isValidPriority(1)); // Only 1 digit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Priority.isValidPriority(0)); // 0 included"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Priority.isValidPriority(01)); //When a 0 is placed in front"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(\"1\", new Priority(1).toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Priority(1), new Priority(1)); // When two priorities are the same."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Priority(1), new Priority(2)); // When two priorities are different."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Equal Hashcode"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Priority(1).hashCode(), new Priority(1).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Non Equal Hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Priority(1).hashCode(), new Priority(3).hashCode());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/activity/TitleTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "class TitleTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Title(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void constructorInvalidTitleThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        String invalidTitle \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Title(invalidTitle));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void isValidTitle() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // null title"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Title.isValidTitle(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // blank title"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(Title.isValidTitle(\"\")); // Empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(Title.isValidTitle(\" \")); // Spaces only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(Title.isValidTitle(\"  \")); // Multiple spaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // invalid title"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(Title.isValidTitle(\"^\")); // Non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(Title.isValidTitle(\"Dog*\")); // Contains non-alphanumeric characters."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(Title.isValidTitle(\"yoursystemrunsf1234anyhowjustpresswhymylifesobadnow\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                + \"IwanttowithdrawfromNUSIstolethisfromCATHAHAHAHHAH\")); // Contains 74 characters."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // Valid title"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(Title.isValidTitle(\"someTitle \")); //Normal case"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(Title.isValidTitle(\"title1234\")); // Contains alphanumeric characters."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(Title.isValidTitle(\"hellomynameisJ ohnCE\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                + \"NA hahahahahhacsgohehelaaldota\")); //Contains 50 alphanumeric char with spaces."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(Title.isValidTitle(\"yoursystemrunsf1234anyhow\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "                + \"justpress\")); // Contains 34 characters."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertEquals(\"1000\", new Title(\"1000\").toString());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertEquals(\"DogLand\", new Title(\"DogLand\").toString()); //Caps and non caps characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertEquals(\"1000MoneyGimme\", new Title(\"1000MoneyGimme\").toString()); //Alphanumeric"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        //Wrong toString"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertNotEquals(\"Wrong\", new Title(\"Stupid\").toString());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        //Equal Description Object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertEquals(new Title(\"10Nights\"), new Title(\"10Nights\")); // When two titles are the same."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        //Non Equal Description Object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertNotEquals(new Title(\"10Nights\"), new Title(\"20Nights\")); // When two titles are different."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // Equal Hashcode"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertEquals(new Title(\"Hashcode\").hashCode(), new Title(\"Hashcode\").hashCode());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        //Non Equal Hashcode"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertNotEquals(new Title(\"hashcode\").hashCode(), new Title(\"HashCode\").hashCode());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 86,
      "zenatrick": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/activity/UniqueActivityListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.model.listmanagers.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.util.uniquelist.UniqueList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.util.uniquelist.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.util.uniquelist.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "class UniqueActivityListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final Activity FIXED_ACTIVITY_1 \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            new Activity(new Title(\"Hot Spring\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new Priority(1),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new Duration(3),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new Location(\"Hokkaido\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final Activity FIXED_ACTIVITY_2 \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            new Activity(new Title(\"See Deers\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new Priority(1),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new Duration(1),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new Location(\"Nara\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private static final Activity FIXED_ACTIVITY_3 \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            new Activity(new Title(\"Eat Mochi\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new Priority(2),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new Duration(1),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new Location(\"Dazaifu\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private final UniqueList\u003cActivity\u003e uniqueActivityList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void containsNullActivityListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.contains(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void containsActivityListNotInListReturnsFalse() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(uniqueActivityList.contains(FIXED_ACTIVITY_1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void containsActivityListInListReturnsTrue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.add(FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(uniqueActivityList.contains(FIXED_ACTIVITY_1));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void containsActivityListWithSameIdentifyFieldsInListReturnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Slightly different from UniquePersonListTest, due to different"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //contains convention used for AB3 and for ours."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.add(FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Activity activity \u003d new Activity(new Title(\"Hot Spring\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Priority(1),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Duration(3),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(\"Hokkaido\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(uniqueActivityList.contains(activity));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void addNullActivityListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.add(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void addDuplicateActivityListThrowsDuplicateActivityListException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.add(FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e uniqueActivityList.add(FIXED_ACTIVITY_1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setActivityListNullTargetActivityListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.setElement(null,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                FIXED_ACTIVITY_1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setActivityListNullActivityListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .setElement(FIXED_ACTIVITY_1,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setActivityListTargetActivityListNotInListThrowsActivityListNotFoundException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(ElementNotFoundException.class, () -\u003e uniqueActivityList.setElement("
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                FIXED_ACTIVITY_1, FIXED_ACTIVITY_1));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setActivityListEditedActivityListIsSameActivityListSuccess() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.add(FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.setElement(FIXED_ACTIVITY_1, FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cActivity\u003e expectedActivityList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        expectedActivityList.add(FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setActivityListHasSameIdentitySuccess() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.add(FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Activity activity \u003d new Activity(new Title(\"Hot Spring\"),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Priority(1),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Duration(3),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Location(\"Hokkaido\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.setElement(FIXED_ACTIVITY_1, activity);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cActivity\u003e expectedUniqueActivityList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        expectedUniqueActivityList.add(activity);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedUniqueActivityList, this.uniqueActivityList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setActivityListEditedActivityListHasDifferentActivityListSuccess() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.add(FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.setElement(FIXED_ACTIVITY_1, FIXED_ACTIVITY_2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cActivity\u003e expectedUniqueActivityList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        expectedUniqueActivityList.add(FIXED_ACTIVITY_2);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedUniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setActivityListEditedActivityListHasNonUniqueIdentityThrowsDuplicateActivityListException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.add(FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.add(FIXED_ACTIVITY_2);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e uniqueActivityList.setElement("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                FIXED_ACTIVITY_1, FIXED_ACTIVITY_2));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void removeNullActivityListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.remove(null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void removeActivityListDoesNotExistThrowsActivityListNotFoundException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(ElementNotFoundException.class, () -\u003e uniqueActivityList"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .remove(FIXED_ACTIVITY_3));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void removeExistingActivityListRemovesActivityList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.add(FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.remove(FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cActivity\u003e expectedActivityList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setActivityListNullUniqueActivityListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .setElements((UniqueList\u003cActivity\u003e) null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setActivityListUniqueActivityListReplacesOwnListWithProvidedUniqueActivityList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.add(FIXED_ACTIVITY_3);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cActivity\u003e expectedUniqueActivityList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.add(FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.setElements(expectedUniqueActivityList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedUniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setUniqueActivityListNullListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .setElements((List\u003cActivity\u003e) null));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setUniqueActivityListListReplacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.add(FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        List\u003cActivity\u003e activityLists \u003d Collections.singletonList(FIXED_ACTIVITY_3);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.setElements(activityLists);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cActivity\u003e expectedUniqueActivityList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        expectedUniqueActivityList.add(FIXED_ACTIVITY_3);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedUniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setActivityListWithDuplicateActivityThrowsDuplicateActivityException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        List\u003cActivity\u003e listWithDuplicateActivity \u003d Arrays"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .asList(FIXED_ACTIVITY_1, FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                uniqueActivityList.setElements(listWithDuplicateActivity));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void asUnmodifiableObservableListModifyListThrowsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                uniqueActivityList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cActivity\u003e expectedUniqueActivityList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        expectedUniqueActivityList.add(FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.add(FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(uniqueActivityList, expectedUniqueActivityList);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Same Hash Code"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueActivityList.add(FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cActivity\u003e list \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        list.add(FIXED_ACTIVITY_1);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(list.hashCode(), uniqueActivityList.hashCode());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different Hash code"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cActivity\u003e diffPl \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        diffPl.add(FIXED_ACTIVITY_3);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(diffPl.hashCode(), uniqueActivityList.hashCode());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 231
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/fixedexpense/AmountTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "class AmountTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Amount(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void constructorInvalidAmountThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // null Amount"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // Blank Amount"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\")); // empty amount"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" \")); // just spaces."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // Amount with \"$/¥\" in front"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"$3000\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"¥3000\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Not valid amount"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"1000.000\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Valid amount"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1000\")); // Normal case"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"1\")); // Only 1 digit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"0\")); // 0 included"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"0123\")); //When a 0 is placed in front"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"10000000000000000000000\")); // Very large number"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(\"1000.00\", new Amount(\"1000.00\").toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new Amount(\"1000\"), new Amount(\"1000\")); // When two amounts are the same."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new Amount(\"1000.00\"), new Amount(\"2000.00\")); // When two amounts are different."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // Equal Hashcode"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new Amount(\"1000.00\").hashCode(), new Amount(\"1000.00\").hashCode());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Non Equal Hashcode"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new Amount(\"1\").hashCode(), new Amount(\"0\").hashCode());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 69,
      "zenatrick": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/fixedexpense/CategoryTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "class CategoryTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void constructorInvalidCategoryThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        String invalidCategory \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidCategory));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void isValidCategory() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // null category"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Category.isValidCategory(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // blank category"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Category.isValidCategory(\"\")); // Empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Category.isValidCategory(\" \")); // Spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Category.isValidCategory(\"^\")); // Non-alphanumeric characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Category.isValidCategory(\"Dog*\")); // Contains non-alphanumeric characters."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // valid category"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Category.isValidCategory(\"Hello\")); //Normal case"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Category.isValidCategory(\"Hello1234\")); // Contains alphanumeric characters."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Category.isValidCategory(\"hellomynameisJohn123andIamADog\")); //Contains 30 alphanumeric char."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Category.isValidCategory(\"yoursystemrunsf1234anyhowjustpress\")); // Contains 34 characters."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(\"1000\", new Category(\"1000\").toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(\"HelloImaDog\", new Category(\"HelloImaDog\").toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(\"1000Money\", new Category(\"1000Money\").toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Wrong toString"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(\"Wrong\", new Category(\"Hello\").toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Equal Category Object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new Category(\"1000Hello\"), new Category(\"1000Hello\")); // When two categories are the same."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Non Equal Category Object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new Category(\"1000Bye\"), new Category(\"2000Hehe\")); // When two categories are different."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // Equal Hashcode"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new Category(\"Hashcode\").hashCode(), new Category(\"Hashcode\").hashCode());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Non Equal Hashcode"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new Category(\"hashcode\").hashCode(), new Category(\"HashCode\").hashCode());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 70,
      "zenatrick": 1,
      "joshlay96": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/fixedexpense/DescriptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "class DescriptionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void constructorInvalidDescriptionThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidDescription));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // blank description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // Empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Description.isValidDescription(\"  \")); // Multiple Spaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // Single space"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Description.isValidDescription(\"^\")); // Non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Description.isValidDescription(\"Dog*\")); // Contains non-alphanumeric characters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Description.isValidDescription(\"yoursystemrunsf1234anyhowjustpresswhymylifesobadnow\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                + \"IwanttowithdrawfromNUS\")); // Contains 74 characters."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // Valid description"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Hello \")); //Normal case"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Hello1234\")); // Contains alphanumeric characters."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Description.isValidDescription(\"hellomynameisJ ohn123an dIamA\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                + \"Dog\")); //Contains 30 alphanumeric char with spaces."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Description.isValidDescription(\"yoursystemrunsf1234anyhow\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                + \"justpress\")); // Contains 34 characters."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(\"1000\", new Description(\"1000\").toString());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(\"HelloImaDog\", new Description(\"HelloImaDog\").toString()); //Caps and non caps characters"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(\"1000Money\", new Description(\"1000Money\").toString()); //Alphanumeric"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Wrong toString"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(\"Wrong\", new Description(\"Hello\").toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Equal Description Object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new Description(\"Food\"), new Description(\"Food\")); // When two description are the same."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Non Equal Description Object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new Description(\"Foody\"), new Description(\"Food\")); // When two description are different."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // Equal Hashcode"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new Description(\"Hashcode\").hashCode(), new Description(\"Hashcode\").hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Non Equal Hashcode"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new Description(\"hashcode\").hashCode(), new Description(\"HashCode\").hashCode());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 82,
      "zenatrick": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/fixedexpense/FixedExpenseTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "class FixedExpenseTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void constructorInvalidNameThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        String invalidDescription \u003d \"\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        String invalidCategory \u003d \"\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new FixedExpense(new Amount(invalidAmount),"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new Description(invalidDescription), new Category(invalidCategory)));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void getAmount() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // Correct case"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new Amount(\"100\"), new FixedExpense(new Amount(\"100\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new Description(\"Test\"), new Category(\"Food\")).getAmount());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new Amount(\"500\"), new FixedExpense(new Amount(\"100\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new Description(\"Test\"), new Category(\"Food\")).getAmount());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void getDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // Correct case"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new Description(\"Test\"), new FixedExpense(new Amount(\"100\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new Description(\"Test\"), new Category(\"Food\")).getDescription());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new Description(\"50p\"), new FixedExpense(new Amount(\"100\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new Description(\"Test\"), new Category(\"Food\")).getDescription());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void getCategory() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // Correct case"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new Category(\"Food\"), new FixedExpense(new Amount(\"100\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new Description(\"Test\"), new Category(\"Food\")).getCategory());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new Category(\"Lala\"), new FixedExpense(new Amount(\"100\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new Description(\"Test\"), new Category(\"Food\")).getCategory());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Same case"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new FixedExpense(new Amount(\"100\"), new Description(\"Test\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new Category(\"Food\")), new FixedExpense(new Amount(\"100\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new Description(\"Test\"), new Category(\"Food\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new FixedExpense(new Amount(\"200\"), new Description(\"Testy\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new Category(\"Foody\")), new FixedExpense(new Amount(\"100\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new Description(\"Test\"), new Category(\"Food\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Same case"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new FixedExpense(new Amount(\"12345\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new Description(\"Foody\"), new Category(\"Haha\")).hashCode(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new FixedExpense(new Amount(\"12345\"), new Description(\"Foody\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        new Category(\"Haha\")).hashCode());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Different Case"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new FixedExpense(new Amount(\"123456\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        new Description(\"Food\"), new Category(\"Hahas\")).hashCode(),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new FixedExpense(new Amount(\"12345\"), new Description(\"Foody\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        new Category(\"Haha\")).hashCode());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Same case"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        FixedExpense fixedExpense \u003d new FixedExpense(new Amount(\"100\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                new Description(\"Food\"), new Category(\"Eating\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(\"Fixed Expense Entry - Description: \" + fixedExpense.getDescription().toString()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                + \" Amount: \" + fixedExpense.getAmount().toString()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                + \" Category: \" + fixedExpense.getCategory().toString(),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \"Fixed Expense Entry - Description: \" + fixedExpense.getDescription().toString()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        + \" Amount: \" + fixedExpense.getAmount().toString()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        + \" Category: \" + fixedExpense.getCategory().toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(\"Fixed Expense Entry - Description: \" + fixedExpense.getAmount().toString()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        + \" Amount: \" + fixedExpense.getDescription().toString()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        + \" Category: \" + fixedExpense.getCategory().toString(),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                \"Fixed Expense Entry - Description: \" + fixedExpense.getDescription().toString()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        + \" Amount: \" + fixedExpense.getAmount().toString()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                        + \" Category: \" + fixedExpense.getCategory().toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 101,
      "zenatrick": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/fixedexpense/UniqueFixedExpenseListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.model.listmanagers.fixedexpense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.util.uniquelist.UniqueList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.util.uniquelist.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.util.uniquelist.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "class UniqueFixedExpenseListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    // Temporary fields that will be replaced by FixedExpenses made using a FixedExpenseBuilder."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final FixedExpense FIXED_ACCOMMODATION_EXPENSE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            new FixedExpense(new Amount(\"500.00\"), new Description(\"Hotel\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new Category(\"Accommodation\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final FixedExpense FIXED_ACTIVITY_EXPENSE \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            new FixedExpense(new Amount(\"100\"), new Description(\"Disneyland\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new Category(\"Activity\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private static final FixedExpense FIXED_TRANSPORTATION_EXPENSE \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            new FixedExpense(new Amount(\"1000\"), new Description(\"Airplane\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new Category(\"Transportation\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private final UniqueList\u003cFixedExpense\u003e uniqueFixedExpenseList \u003d new UniqueList\u003cFixedExpense\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void containsNullFixedExpenseThrowsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFixedExpenseList.contains(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void containsExpenseNotInListReturnsFalse() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(uniqueFixedExpenseList.contains(FIXED_ACCOMMODATION_EXPENSE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void containsExpenseInListReturnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.add(FIXED_ACCOMMODATION_EXPENSE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(uniqueFixedExpenseList.contains(FIXED_ACCOMMODATION_EXPENSE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void containsExpenseWithSameIdentifyFieldsInListReturnsTrue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Slightly different from UniquePersonListTest, due to different"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //contains convention used for AB3 and for ours."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.add(FIXED_ACCOMMODATION_EXPENSE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        FixedExpense editedExpense \u003d new FixedExpense(new Amount(\"500.00\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Description(\"hotel\"), new Category(\"Accommodation\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(uniqueFixedExpenseList.contains(editedExpense));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void addNullFixedExpenseThrowsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFixedExpenseList.add(null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void addDuplicateFixedExpenseThrowsDuplicateFixedExpenseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.add(FIXED_ACTIVITY_EXPENSE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e uniqueFixedExpenseList.add(FIXED_ACTIVITY_EXPENSE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setFixedExpenseNullTargetFixedExpenseThrowsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFixedExpenseList.setElement(null,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                FIXED_ACTIVITY_EXPENSE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setFixedExpenseNullFixedExpenseThrowsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFixedExpenseList"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .setElement(FIXED_ACCOMMODATION_EXPENSE,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setFixedExpenseTargetFixedExpenseNotInListThrowsFixedExpenseNotFoundException() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(ElementNotFoundException.class, () -\u003e uniqueFixedExpenseList.setElement("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                FIXED_ACCOMMODATION_EXPENSE, FIXED_ACCOMMODATION_EXPENSE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setFixedExpenseEditedFixedExpenseIsSameFixedExpenseSuccess() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.add(FIXED_ACTIVITY_EXPENSE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.setElement(FIXED_ACTIVITY_EXPENSE, FIXED_ACTIVITY_EXPENSE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cFixedExpense\u003e expectedFixedExpenseList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        expectedFixedExpenseList.add(FIXED_ACTIVITY_EXPENSE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedFixedExpenseList, uniqueFixedExpenseList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setFixedExpenseHasSameIdentitySuccess() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.add(FIXED_ACTIVITY_EXPENSE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        FixedExpense editedExpense \u003d new FixedExpense(new Amount(\"100\"), new Description(\"Disneyland\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Category(\"Activity\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.setElement(FIXED_ACTIVITY_EXPENSE, editedExpense);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cFixedExpense\u003e expectedUniqueFixedExpenseList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        expectedUniqueFixedExpenseList.add(editedExpense);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedUniqueFixedExpenseList, uniqueFixedExpenseList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setFixedExpenseEditedFixedExpenseHasDifferentFixedExpenseSuccess() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.add(FIXED_ACTIVITY_EXPENSE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.setElement(FIXED_ACTIVITY_EXPENSE, FIXED_ACCOMMODATION_EXPENSE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cFixedExpense\u003e expectedFixedExpenseList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        expectedFixedExpenseList.add(FIXED_ACCOMMODATION_EXPENSE);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedFixedExpenseList, uniqueFixedExpenseList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setFixedExpenseEditedFixedExpenseHasNonUniqueIdentityThrowsDuplicateFixedExpenseException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.add(FIXED_ACCOMMODATION_EXPENSE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.add(FIXED_TRANSPORTATION_EXPENSE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e uniqueFixedExpenseList.setElement"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                (FIXED_ACCOMMODATION_EXPENSE, FIXED_TRANSPORTATION_EXPENSE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void removeNullFixedExpenseThrowsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFixedExpenseList.remove(null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void removeFixedExpenseDoesNotExistThrowsFixedExpenseNotFoundException() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(ElementNotFoundException.class, () -\u003e uniqueFixedExpenseList"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .remove(FIXED_ACCOMMODATION_EXPENSE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void removeExistingFixedExpenseRemovesFixedExpense() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.add(FIXED_TRANSPORTATION_EXPENSE);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.remove(FIXED_TRANSPORTATION_EXPENSE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cFixedExpense\u003e expectedUniquePersonList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueFixedExpenseList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setFixedExpenseNullUniqueFixedExpenseListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFixedExpenseList"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .setElements((UniqueList\u003cFixedExpense\u003e) null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setFixedExpenseUniqueFixedExpenseReplacesOwnListWithProvidedUniqueFixedExpenseList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.add(FIXED_TRANSPORTATION_EXPENSE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cFixedExpense\u003e expectedFixedExpenseList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.add(FIXED_ACCOMMODATION_EXPENSE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.setElements(expectedFixedExpenseList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedFixedExpenseList, uniqueFixedExpenseList);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setFixedExpenseNullListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueFixedExpenseList"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .setElements((List\u003cFixedExpense\u003e) null));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setFixedExpenseListReplacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.add(FIXED_TRANSPORTATION_EXPENSE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        List\u003cFixedExpense\u003e fixedExpenseLists \u003d Collections.singletonList(FIXED_ACCOMMODATION_EXPENSE);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.setElements(fixedExpenseLists);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cFixedExpense\u003e expectedUniqueFixedExpenseList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        expectedUniqueFixedExpenseList.add(FIXED_ACCOMMODATION_EXPENSE);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedUniqueFixedExpenseList, uniqueFixedExpenseList);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setFixedExpenseListWithDuplicateFixedExpenseThrowsDuplicateFixedExpenseException() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        List\u003cFixedExpense\u003e listWithDuplicateFixedExpenses \u003d Arrays"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .asList(FIXED_ACCOMMODATION_EXPENSE, FIXED_ACCOMMODATION_EXPENSE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(DuplicateElementException.class, ()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            -\u003e uniqueFixedExpenseList.setElements(listWithDuplicateFixedExpenses));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void asUnmodifiableObservableListModifyListThrowsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            -\u003e uniqueFixedExpenseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cFixedExpense\u003e expectedUniqueFixedExpenseLists \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        expectedUniqueFixedExpenseLists.add(FIXED_ACCOMMODATION_EXPENSE);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.add(FIXED_ACCOMMODATION_EXPENSE);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(uniqueFixedExpenseList, expectedUniqueFixedExpenseLists);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Same Hash Code"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniqueFixedExpenseList.add(FIXED_ACCOMMODATION_EXPENSE);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cFixedExpense\u003e ue \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        ue.add(FIXED_ACCOMMODATION_EXPENSE);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(uniqueFixedExpenseList.hashCode() , ue.hashCode());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different Hash code"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cFixedExpense\u003e diffUe \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        diffUe.add(FIXED_ACTIVITY_EXPENSE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(diffUe.hashCode(), uniqueFixedExpenseList.hashCode());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 216
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/packinglistitem/ItemNameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.packinglistitem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "class ItemNameTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ItemName(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void constructorInvalidNameThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ItemName(invalidName));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ItemName.isValidName(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        // blank name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertFalse(ItemName.isValidName(\"\")); // Empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertFalse(ItemName.isValidName(\" \")); // Spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertFalse(ItemName.isValidName(\"  \")); // Multiple spaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertFalse(ItemName.isValidName(\"^\")); // Non-alphanumeric characters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertFalse(ItemName.isValidName(\"Dog*\")); // Contains non-alphanumeric characters."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertFalse(ItemName.isValidName(\"yoursystemrunsf1234anyhowjustpresswhymylifesobadnow\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"IwanttowithdrawfromNUS\")); // Contains 74 characters."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        // Valid name"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertTrue(ItemName.isValidName(\"Hello \")); //Normal case"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertTrue(ItemName.isValidName(\"Hello1234\")); // Contains alphanumeric characters."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertTrue(ItemName.isValidName(\"hellomynameisJ ohn12\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"Doghahahahahhacsgohehelaaldota\")); //Contains 50 alphanumeric char with spaces."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertTrue(ItemName.isValidName(\"yoursystemrunsf1234anyhow\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "                + \"justpress\")); // Contains 34 characters."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(\"1000\", new ItemName(\"1000\").toString());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(\"HelloImaDog\", new ItemName(\"HelloImaDog\").toString()); //Caps and non caps characters"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(\"1000Money\", new ItemName(\"1000Money\").toString()); //Alphanumeric"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        //Wrong toString"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertNotEquals(\"Wrong\", new ItemName(\"Hello\").toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        //Equal Description Object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(new ItemName(\"10Shirt\"), new ItemName(\"10Shirt\")); // When two name are the same."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        //Non Equal Description Object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertNotEquals(new ItemName(\"10Pants\"), new ItemName(\"20Shirt\")); // When two name are different."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        // Equal Hashcode"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertEquals(new ItemName(\"Hashcode\").hashCode(), new ItemName(\"Hashcode\").hashCode());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        //Non Equal Hashcode"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "        assertNotEquals(new ItemName(\"hashcode\").hashCode(), new ItemName(\"HashCode\").hashCode());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/packinglistitem/PackingListItemTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.model.listmanagers.packinglistitem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "class PackingListItemTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private final PackingListItem packingListItem \u003d new PackingListItem(new ItemName(\"Shirt\"), new Quantity(10),"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            new ItemCategory(\"Clothing\"), false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void constructorInvalidNameThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        String invalidName \u003d \" \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        Integer invalidQuantity \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        boolean isChecked \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new PackingListItem(new ItemName(invalidName),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Quantity(invalidQuantity), new ItemCategory(null), isChecked));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void getItemName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Correct case"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new ItemName(\"Shirt\"), new PackingListItem(new ItemName(\"Shirt\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Quantity(10), new ItemCategory(\"Clothing\"), false).getItemName());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new ItemName(\"Shirt\"), new PackingListItem(new ItemName(\"Pants\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Quantity(10), new ItemCategory(\"Clothing\"), false).getItemName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void getQuantity() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Correct case"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Quantity(10), new PackingListItem(new ItemName(\"Shirt\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Quantity(10), new ItemCategory(\"Clothing\"), false).getQuantity());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Quantity(5), new PackingListItem(new ItemName(\"Pants\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Quantity(20), new ItemCategory(\"Clothing\"), false).getQuantity());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void isChecked() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Correct case"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(new PackingListItem(new ItemName(\"Shirt\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                new Quantity(10), new ItemCategory(\"Clothing\"), true).getChecked());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(new PackingListItem(new ItemName(\"Shirt\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "                new Quantity(10), new ItemCategory(\"Clothing\"), false).getChecked());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void isSameItem() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(packingListItem.isSame(packingListItem));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(packingListItem.isSame(null));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // different name and quantity -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        PackingListItem editedPackingListItem \u003d new PackingListItem(new ItemName(\"Raincoat\"), new Quantity(30),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new ItemCategory(\"Clothing\"), false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(editedPackingListItem.isSame(packingListItem));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        PackingListItem secondEditedPackingListItem \u003d new PackingListItem(new ItemName(\"Pants\"), new Quantity(10),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "               new ItemCategory(\"Clothing\"), false);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(editedPackingListItem.isSame(secondEditedPackingListItem));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Same case"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        PackingListItem editedPackingListItem \u003d new PackingListItem(new ItemName(\"Shirt\"), new Quantity(10),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new ItemCategory(\"Clothing\"), false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(packingListItem, editedPackingListItem);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        editedPackingListItem \u003d new PackingListItem(new ItemName(\"Pants\"), new Quantity(1),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new ItemCategory(\"Clothing\"), false);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(editedPackingListItem, packingListItem);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Same case"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        PackingListItem editedPackingListItem \u003d new PackingListItem(new ItemName(\"Shirt\"), new Quantity(10),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new ItemCategory(\"Clothing\"), false);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(editedPackingListItem.hashCode(), packingListItem.hashCode());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different case"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        editedPackingListItem \u003d new PackingListItem(new ItemName(\"Pants\"), new Quantity(1),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new ItemCategory(\"Clothing\"), false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(editedPackingListItem.hashCode(), packingListItem.hashCode());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        PackingListItem editedPackingListItem \u003d new PackingListItem(new ItemName(\"Shirt\"), new Quantity(10),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new ItemCategory(\"Clothing\"), false);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(packingListItem.toString(), editedPackingListItem.toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        editedPackingListItem \u003d new PackingListItem(new ItemName(\"Pants\"), new Quantity(1),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new ItemCategory(\"Clothing\"), false);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(editedPackingListItem.toString(), packingListItem.toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void getItemCategory() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        PackingListItem editedPackingListItem \u003d new PackingListItem(new ItemName(\"Shirt\"), new Quantity(10),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new ItemCategory(\"Clothing\"), false);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new ItemCategory(\"Clothing\"), editedPackingListItem.getItemCategory());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        editedPackingListItem \u003d new PackingListItem(new ItemName(\"Shirt\"), new Quantity(10),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new ItemCategory(\"Medicine\"), false);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(packingListItem, editedPackingListItem);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 2,
      "joshlay96": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/packinglistitem/QuantityTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.packinglistitem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "class QuantityTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Quantity(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void constructorInvalidQuantityThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        Integer integer \u003d (Integer) 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Quantity(integer));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void isValidQuantity() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // null quantity"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        Integer integer \u003d (Integer) null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Quantity.isValidQuantity(integer));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // invalid quantity"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(0)); // 0 quantity."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(-100)); //Negative quantity"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(3 / 4)); //Fraction Quantity"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Quantity.isValidQuantity(1000)); //More then 100 quantity."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // Valid quantity"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(4)); //Normal case"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Quantity.isValidQuantity(18)); //Normal case"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(\"10\", new Quantity(10).toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Wrong toString"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(\"10\", new Quantity(18).toString());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Equal Description Object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new Quantity(18), new Quantity(18)); // When two quantities are the same."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Non Equal Description Object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new Quantity(4), new Quantity(23)); // When two quantities are different."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // Equal Hashcode"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new Quantity(1).hashCode(), new Quantity(1).hashCode());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Non Equal Hashcode"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new Quantity(15).hashCode(), new Quantity(1).hashCode());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 73,
      "zenatrick": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/packinglistitem/UniquePackingListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.model.listmanagers.packinglistitem;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.util.uniquelist.UniqueList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.util.uniquelist.exceptions.DuplicateElementException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import seedu.address.model.util.uniquelist.exceptions.ElementNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "class UniquePackingListTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    //They have a personBuilder, but since we dont have, improvise by using this for now"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final PackingListItem FIXED_PACKING_LIST_ITEM_PANTS \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            new PackingListItem(new ItemName(\"Pants\"), new Quantity(5),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new ItemCategory(\"Clothing\"), false);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public static final PackingListItem FIXED_PACKING_LIST_ITEM_SHIRT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            new PackingListItem(new ItemName(\"Shirt\"), new Quantity(3),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new ItemCategory(\"Clothing\"), false);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private static final PackingListItem FIXED_PACKING_LIST_ITEM_JEANS \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "            new PackingListItem(new ItemName(\"Jeans\"), new Quantity(10),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                    new ItemCategory(\"Clothing\"), true);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    private final UniqueList\u003cPackingListItem\u003e uniquePackingList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void containsNullPackingListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePackingList.contains(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void containsPackingListNotInListReturnsFalse() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(uniquePackingList.contains(FIXED_PACKING_LIST_ITEM_JEANS));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void containsPackingListInListReturnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.add(FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(uniquePackingList.contains(FIXED_PACKING_LIST_ITEM_JEANS));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void containsPackingListWithSameIdentifyFieldsInListReturnsTrue() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Slightly different from UniquePersonListTest, due to different"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //contains convention used for AB3 and for ours."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.add(FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        PackingListItem packingListItem \u003d new PackingListItem(new ItemName(\"Jeans\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new Quantity(10), new ItemCategory(\"Clothing\"), false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(uniquePackingList.contains(packingListItem));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void addNullPackingListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePackingList.add(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void addDuplicatePackingListThrowsDuplicatePackingListException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.add(FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                DuplicateElementException.class, () -\u003e uniquePackingList.add(FIXED_PACKING_LIST_ITEM_JEANS));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setPackingListNullTargetPackingListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePackingList.setElement(null,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                FIXED_PACKING_LIST_ITEM_JEANS));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setPackingListNullPackingListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePackingList"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .setElement(FIXED_PACKING_LIST_ITEM_JEANS,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                        null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setPackingListTargetPackingListNotInListThrowsPackingListNotFoundException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(ElementNotFoundException.class, () -\u003e uniquePackingList.setElement("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                FIXED_PACKING_LIST_ITEM_JEANS, FIXED_PACKING_LIST_ITEM_JEANS));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setPackingListEditedPackingListIsSamePackingListSuccess() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.add(FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.setElement(FIXED_PACKING_LIST_ITEM_JEANS, FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cPackingListItem\u003e expectedPackingList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        expectedPackingList.add(FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedPackingList, uniquePackingList);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setPackingListHasSameIdentitySuccess() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.add(FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        PackingListItem packingListItem \u003d new PackingListItem(new ItemName(\"Jeans\"), new Quantity(10),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                new ItemCategory(\"Clothing\"), true);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.setElement(FIXED_PACKING_LIST_ITEM_JEANS, packingListItem);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cPackingListItem\u003e expectedUniquePackingList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        expectedUniquePackingList.add(packingListItem);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedUniquePackingList, uniquePackingList);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setPackingListEditedPackingListHasDifferentPackingListSuccess() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.add(FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.setElement(FIXED_PACKING_LIST_ITEM_JEANS, FIXED_PACKING_LIST_ITEM_PANTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cPackingListItem\u003e expectedPackingExpenseList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        expectedPackingExpenseList.add(FIXED_PACKING_LIST_ITEM_PANTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedPackingExpenseList, uniquePackingList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setPackingListEditedPackingListHasNonUniqueIdentityThrowsDuplicatePackingListException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.add(FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.add(FIXED_PACKING_LIST_ITEM_PANTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e uniquePackingList.setElement("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                FIXED_PACKING_LIST_ITEM_JEANS, FIXED_PACKING_LIST_ITEM_PANTS));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void removeNullPackingListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePackingList.remove(null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void removePackingListDoesNotExistThrowsPackingListNotFoundException() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(ElementNotFoundException.class, () -\u003e uniquePackingList"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .remove(FIXED_PACKING_LIST_ITEM_SHIRT));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void removeExistingPackingListRemovesPackingList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.add(FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.remove(FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cPackingListItem\u003e expectedPackingList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedPackingList, uniquePackingList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setPackingListNullUniquePackingListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePackingList"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .setElements((UniqueList\u003cPackingListItem\u003e) null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setPackingListUniquePackingListReplacesOwnListWithProvidedUniquePackingList() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.add(FIXED_PACKING_LIST_ITEM_SHIRT);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cPackingListItem\u003e expectedUniquePackingList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.add(FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.setElements(expectedUniquePackingList);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedUniquePackingList, uniquePackingList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setUniquePackingListNullListThrowsNullPointerException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePackingList"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .setElements((List\u003cPackingListItem\u003e) null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setUniquePackingListListReplacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.add(FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        List\u003cPackingListItem\u003e packingList \u003d Collections.singletonList(FIXED_PACKING_LIST_ITEM_SHIRT);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.setElements(packingList);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cPackingListItem\u003e expectedPackingList \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        expectedPackingList.add(FIXED_PACKING_LIST_ITEM_SHIRT);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(expectedPackingList, uniquePackingList);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void setPackingListListWithDuplicateFixedExpenseThrowsDuplicateItemException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        List\u003cPackingListItem\u003e listWithDuplicatePackingListItems \u003d Arrays"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                .asList(FIXED_PACKING_LIST_ITEM_JEANS, FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(DuplicateElementException.class, () -\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                uniquePackingList.setElements(listWithDuplicatePackingListItems));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void asUnmodifiableObservableListModifyListThrowsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                uniquePackingList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cPackingListItem\u003e expectedUniquePackingLists \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        expectedUniquePackingLists.add(FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.add(FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(uniquePackingList, expectedUniquePackingLists);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Same Hash Code"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        uniquePackingList.add(FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cPackingListItem\u003e pl \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        pl.add(FIXED_PACKING_LIST_ITEM_JEANS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(pl.hashCode(), uniquePackingList.hashCode());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Different Hash code"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        UniqueList\u003cPackingListItem\u003e diffPl \u003d new UniqueList\u003c\u003e();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        diffPl.add(FIXED_PACKING_LIST_ITEM_SHIRT);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(diffPl.hashCode(), uniquePackingList.hashCode());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 216
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/transportbooking/LocationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.transportbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "class LocationTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void constructorInvalidLocationThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // null location"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // blank location"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // Empty string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Location.isValidLocation(\"  \")); // Multiple Spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // Single space"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // invalid location"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Location.isValidLocation(\"^\")); // Non-alphanumeric characters"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Location.isValidLocation(\"Dog*\")); // Contains non-alphanumeric characters."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Location.isValidLocation(\"yoursystemrunsf1234anyhowjustpresswhymylifesobadnow\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                + \"IwanttowithdrawfromNUS\")); // Contains 74 characters."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // Valid location"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Hello \")); //Normal case"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Hello1234\")); // Contains alphanumeric characters."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Location.isValidLocation(\"hellomynameisJ ohn123an dIamA\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                + \"Dog\")); //Contains 30 alphanumeric char with spaces."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Location.isValidLocation(\"yoursystemrunsf1234anyhow\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                + \"justpress\")); // Contains 34 characters."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(\"Jurong\", new Location(\"Jurong\").toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(\"Changi Airport\", new Location(\"Changi Airport\").toString()); //Caps and non caps characters"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(\"GBTB\", new Location(\"GBTB\").toString()); //Alphanumeric"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Wrong toString"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(\"Wrong\", new Location(\"Hello\").toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Equal Location Object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new Location(\"Airport\"), new Location(\"Airport\")); // When two locations are the same."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Non Equal Description Object"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new Location(\"NTU\"), new Location(\"NUS\")); // When two locations are different."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // Equal Hashcode"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new Location(\"Hashcode\").hashCode(), new Location(\"Hashcode\").hashCode());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Non Equal Hashcode"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new Location(\"hashcode\").hashCode(), new Location(\"HashCode\").hashCode());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 82,
      "zenatrick": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/transportbooking/ModeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.transportbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "class ModeTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Mode(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void constructorInvalidModeThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        String invalidMode \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Mode(invalidMode));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void isValidMode() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // null mode"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Mode.isValidMode(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // blank mode"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Mode.isValidMode(\"\")); // Empty string"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Mode.isValidMode(\"  \")); // Multiple Spaces"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Mode.isValidMode(\" \")); // Single space"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // invalid mode"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Mode.isValidMode(\"^\")); // Non-alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Mode.isValidMode(\"Dog*\")); // Contains non-alphanumeric characters."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Mode.isValidMode(\"yoursystemrunsf1234anyhowjustpresswhymylifesobadnow\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "                + \"IwanttowithdrawfromNUS\")); // Contains 74 characters."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Mode.isValidMode(\"Rocket\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertFalse(Mode.isValidMode(\"SpaceShip\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // Valid mode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Mode.isValidMode(\"plane\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Mode.isValidMode(\"train\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Mode.isValidMode(\"bus\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Mode.isValidMode(\"car\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Mode.isValidMode(\"others\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Mode.isValidMode(\"PLane\")); //TODO Check with boss if he wants this format a not."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Mode.isValidMode(\"TRain\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertTrue(Mode.isValidMode(\"BUS\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(\"bus\", new Mode(\"bus\").toString());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(\"PLAne\", new Mode(\"PLAne\").toString()); //Caps and non caps characters"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Wrong toString"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(\"Wrong\", new Mode(\"Plane\").toString());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Equal Mode Object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new Mode(\"plane\"), new Mode(\"plane\")); // When two description are the same."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Non Equal Mode Object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new Mode(\"train\"), new Mode(\"plane\")); // When two description are different."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        // Equal Hashcode"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertEquals(new Mode(\"plane\").hashCode(), new Mode(\"plane\").hashCode());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        //Non Equal Hashcode"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwee97"
        },
        "content": "        assertNotEquals(new Mode(\"train\").hashCode(), new Mode(\"plane\").hashCode());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwee97"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 90,
      "zenatrick": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/listmanagers/transportbooking/TimeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.listmanagers.transportbooking;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "class TimeTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    // TODO: Redo test for Time"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    assertThrows(NullPointerException.class , () -\u003e new Time(null));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //public void constructorInvalidTimeThrowsDateTimeParseException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    // Dont have 2016, Month 13, Year 13"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    String now \u003d \"2016-13-13 10:30\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    assertThrows(DateTimeParseException.class , ()-\u003e LocalDateTime.parse(now));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //public void compareTo() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    String now \u003d \"2016-05-05 10:30\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    LocalDateTime localDateTime \u003d LocalDateTime.parse(now , formatter);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    Time time \u003d new Time(localDateTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    LocalDateTime comparedLocalDateTime \u003d LocalDateTime.parse(\"2016-05-05 10:30\", formatter);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    Time comparedTime \u003d new Time(comparedLocalDateTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    // If the times are the same"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    assertEquals(0 , time.compareTo(comparedTime));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    //Earlier time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    LocalDateTime earlierDateTime \u003d LocalDateTime.parse(\"2014-05-05 10:30\", formatter);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    Time earlierTime \u003d new Time(earlierDateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    // 2 years difference"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    assertEquals(2, time.compareTo(earlierTime));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    // 1 year later"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    LocalDateTime futureDateTime \u003d LocalDateTime.parse(\"2017-05-05 10:30\", formatter);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    Time futureTime \u003d new Time(futureDateTime);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    assertEquals(-1, time.compareTo(futureTime));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //public void testToString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    LocalDateTime futureDateTime \u003d LocalDateTime.parse(\"2017-05-05 10:30\", formatter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    Time futureTime \u003d new Time(futureDateTime);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    //TODO Ask boss how he want to do with this to string"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    assertEquals(\"2017-05-05T10:30\", futureTime.toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //public void testEquals() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    String now \u003d \"2016-05-05 10:30\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    LocalDateTime localDateTime \u003d LocalDateTime.parse(now, formatter);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    Time time \u003d new Time(localDateTime);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    LocalDateTime comparedLocalDateTime \u003d LocalDateTime.parse(\"2016-05-05 10:30\", formatter);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    Time comparedTime \u003d new Time(comparedLocalDateTime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    assertEquals(time, comparedTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //@Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //public void testHashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    String now \u003d \"2016-05-05 10:30\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    LocalDateTime localDateTime \u003d LocalDateTime.parse(now, formatter);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    Time time \u003d new Time(localDateTime);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    LocalDateTime comparedLocalDateTime \u003d LocalDateTime.parse(\"2016-05-05 10:30\", formatter);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    Time comparedTime \u003d new Time(comparedLocalDateTime);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //    assertEquals(time.hashCode(), comparedTime.hashCode());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "    //}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 4,
      "zenatrick": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ItemNameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class ItemNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 1,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/ItemNameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "loycatherine"
        },
        "content": "public class ItemNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "loycatherine": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/trip/BudgetTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Budget(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        Integer invalidBudget \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Budget(invalidBudget));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void isValidBudget() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Budget.isValidBudget(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(Budget.isValidBudget(-000000)); // negative 0s"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(Budget.isValidBudget(-2)); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(Budget.isValidBudget(911)); // exactly 3 numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(Budget.isValidBudget(000000001)); //extra 0s"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(Budget.isValidBudget(999999999)); // very big number"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/trip/ScheduleeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class ScheduleeTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/trip/SchedulerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class SchedulerTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/model/trip/TripTitleTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.model.trip;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class TripTitleTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TripTitle(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new TripTitle(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e TripTitle.isValidTitle(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(TripTitle.isValidTitle(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(TripTitle.isValidTitle(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(TripTitle.isValidTitle(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertFalse(TripTitle.isValidTitle(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(TripTitle.isValidTitle(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(TripTitle.isValidTitle(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(TripTitle.isValidTitle(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(TripTitle.isValidTitle(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        assertTrue(TripTitle.isValidTitle(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/attributes/LocationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "package seedu.address.model.util.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "class LocationTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void constructorNullThrowsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void constructorInvalidLocationThrowsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // null location"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // blank location"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // Empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(Location.isValidLocation(\"  \")); // Multiple Spaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // Single space"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // invalid location"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(Location.isValidLocation(\"^\")); // Non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(Location.isValidLocation(\"Dog*\")); // Contains non-alphanumeric characters."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertFalse(Location.isValidLocation(\"yoursystemrunsf1234anyhowjustpresswhymylifesobadnow\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                + \"IwanttowithdrawfromNUS\")); // Contains 74 characters."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Valid location"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Hello \")); //Normal case"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Hello1234\")); // Contains alphanumeric characters."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Location.isValidLocation(\"hellomynameisJ ohn123an dIamA\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                + \"Dog\")); //Contains 30 alphanumeric char with spaces."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertTrue(Location.isValidLocation(\"yoursystemrunsf1234anyhow\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "                + \"justpress\")); // Contains 34 characters."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testToString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(\"1000\", new Location(\"1000\").toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(\"JurongWest\", new Location(\"JurongWest\").toString()); //Caps and non caps characters"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(\"BishanPark\", new Location(\"BishanPark\").toString()); //Alphanumeric"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Wrong toString"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(\"Changi\", new Location(\"Hong Kong\").toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Equal Location Object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Location(\"Tampines\"), new Location(\"Tampines\")); // When two locations are the same."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Non Equal Location Object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Location(\"AMK\"), new Location(\"Dover\")); // When two locations are different."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        // Equal Hashcode"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertEquals(new Location(\"Hashcode\").hashCode(), new Location(\"Hashcode\").hashCode());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        //Non Equal Hashcode"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        assertNotEquals(new Location(\"hashcode\").hashCode(), new Location(\"HashCode\").hashCode());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "joshlay96": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/attributes/ModelStub.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.model.util.attributes;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyAccommodationBookingManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyActivityManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyFixedExpenseManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyPackingListManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyTransportBookingManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.accommodationbooking.AccommodationBooking;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.fixedexpense.FixedExpense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.packinglistitem.PackingListItem;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.transportbooking.TransportBooking;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.trip.Trip;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class ModelStub implements Model {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ReadOnlyTransportBookingManager getTransportBookingManager() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setTransportBookingManager(ReadOnlyTransportBookingManager transportBookingManager) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean hasTransportBooking(TransportBooking target) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void deleteTransportBooking(TransportBooking toDelete) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void addTransportBooking(TransportBooking toAdd) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setTransportBooking(TransportBooking target, TransportBooking edited) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ObservableList\u003cTransportBooking\u003e getFilteredTransportBookingList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void updateFilteredTransportBookingList(Predicate\u003cTransportBooking\u003e predicate) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ReadOnlyFixedExpenseManager getFixedExpenseManager() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setFixedExpenseManager(ReadOnlyFixedExpenseManager fixedExpenseManager) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean hasFixedExpense(FixedExpense target) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void deleteFixedExpense(FixedExpense toDelete) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void addFixedExpense(FixedExpense toAdd) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setFixedExpense(FixedExpense target, FixedExpense edited) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    public void sortFixedExpenseList(Comparator\u003cFixedExpense\u003e cmp) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "joshlay96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "joshlay96"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ObservableList\u003cFixedExpense\u003e getFilteredFixedExpenseList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void updateFilteredFixedExpenseList(Predicate\u003cFixedExpense\u003e predicate) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ReadOnlyPackingListManager getPackingListManager() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setPackingListManager(ReadOnlyPackingListManager packingListManager) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean hasPackingListItem(PackingListItem target) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void deletePackingListItem(PackingListItem toDelete) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void addPackingListItem(PackingListItem toAdd) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setPackingListItem(PackingListItem target, PackingListItem edited) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ObservableList\u003cPackingListItem\u003e getFilteredPackingList() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void updateFilteredPackingList(Predicate\u003cPackingListItem\u003e predicate) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setActivityManager(ReadOnlyActivityManager newData) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ReadOnlyActivityManager getActivityManager() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void deleteActivity(Activity target) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setActivity(Activity target, Activity editActivity) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ReadOnlyAccommodationBookingManager getAccommodationBookingManager() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setAccommodationBookingManager(ReadOnlyAccommodationBookingManager accommodationBookingManager) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean hasAccommodationBooking(AccommodationBooking target) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void deleteAccommodationBooking(AccommodationBooking toDelete) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void addAccommodationBooking(AccommodationBooking toAdd) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setAccommodationBooking(AccommodationBooking target, AccommodationBooking edited) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ObservableList\u003cAccommodationBooking\u003e getFilteredAccommodationBookingList() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void updateFilteredAccommodationBookingList(Predicate\u003cAccommodationBooking\u003e predicate) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public boolean hasTrip() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void setTrip(Trip edited) {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public void deleteTrip() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 313,
      "joshlay96": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/util/attributes/tag/TagTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "package seedu.address.model.util.attributes.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidTagName \u003d \"\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 1,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.listmanagers.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"addressbook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 1,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "//import seedu.address.model.listmanagers.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.storage.activity.JsonActivityManagerStorage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.storage.accommodationbooking.JsonAccommodationBookingStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.storage.fixedexpense.JsonFixedExpenseStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//import seedu.address.storage.transportbooking.JsonTransportBookingStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//public class StorageManagerTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @TempDir"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public Path testFolder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    private StorageManager storageManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @BeforeEach"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void setUp() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        //TODO Temporary backstop"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        JsonTransportBookingStorage transportBookingStorage \u003d new JsonTransportBookingStorage("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                getTempFilePath(\"tr\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        JsonFixedExpenseStorage fixedExpenseStorage \u003d new JsonFixedExpenseStorage("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                getTempFilePath(\"fe\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        JsonActivityManagerStorage activityStorage \u003d new JsonActivityManagerStorage("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                getTempFilePath(\"frre\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        );"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        storageManager \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                transportBookingStorage,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                fixedExpenseStorage,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                activityStorage,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                userPrefsStorage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        JsonAccommodationBookingStorage accommodationBookingStorage \u003d new JsonAccommodationBookingStorage("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                getTempFilePath(\"ac\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        );"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        storageManager \u003d new StorageManager(addressBookStorage,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//                transportBookingStorage, fixedExpenseStorage, accommodationBookingStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//\u003e\u003e\u003e\u003e\u003e\u003e\u003e Improve Code Quality"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        /*"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jwee97"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "jwee97": 95,
      "zenatrick": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ActivityBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Activity;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Duration;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Priority;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.listmanagers.activity.Title;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.util.attributes.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "import seedu.address.model.util.sampledata.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Deunitato"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "public class ActivityBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String DEFAULT_TITLE \u003d \"CHEESELAND OWO\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final Integer DEFAULT_PRIORITY \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final Integer DEFAULT_DURATION \u003d 2;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"LAND OF CHEESE\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private Title title;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private Priority priority;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private Duration duration;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ActivityBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        title \u003d new Title(DEFAULT_TITLE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        priority \u003d new Priority(DEFAULT_PRIORITY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        duration \u003d new Duration(DEFAULT_DURATION);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code activity}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ActivityBuilder(Activity activity) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        title \u003d activity.getTitle();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        priority \u003d activity.getPriority();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        duration \u003d activity.getDuration();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        location \u003d activity.getLocation();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(activity.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ActivityBuilder withTitle(String title) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.title \u003d new Title(title);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Activity} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ActivityBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Sets the {@code Address} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ActivityBuilder withLocation(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.location \u003d new Location(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Sets the {@code Priority} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ActivityBuilder withPriority(Integer priority) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.priority \u003d new Priority(priority);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     * Sets the {@code Duration} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public ActivityBuilder withDuration(Integer duration) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        this.duration \u003d new Duration(duration);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public Activity build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "        return new Activity(title, priority, duration, location, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Deunitato"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 93
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 1,
      "-": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.sampledata.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 2,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zenatrick"
        },
        "content": "import seedu.address.model.util.attributes.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zenatrick": 1,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Deunitato"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Deunitato": 3,
      "-": 9
    }
  }
]
