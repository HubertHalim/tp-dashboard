[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/5.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    compile group: \u0027org.apache.commons\u0027, name: \u0027commons-math3\u0027, version: \u00273.6.1\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-name\u0027: \u0027AddressBook-Level3\u0027,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/se-edu/addressbook-level3\u0027,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-seedu\u0027: true,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "-": 155
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.CartStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.CookbookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.InventoryStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonCartStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonCookbookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonInventoryStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing CookingPapa ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CookbookStorage cookbookStorage \u003d new JsonCookbookStorage(userPrefs.getCookbookFilePath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        InventoryStorage inventoryStorage \u003d new JsonInventoryStorage(userPrefs.getInventoryFilePath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CartStorage cartStorage \u003d new JsonCartStorage(userPrefs.getCartFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storage \u003d new StorageManager(cookbookStorage, inventoryStorage, cartStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s cookbook, inventory, cart and"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The data from the sample cookbook, inventory or cart will be used instead if {@code storage}\u0027s respective data"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * is not found, or an empty cookbook, inventory and cart will be used instead if errors occur when reading"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code storage}\u0027s data."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cReadOnlyCookbook\u003e cookbookOptional;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cReadOnlyInventory\u003e inventoryOptional;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cReadOnlyCart\u003e cartOptional;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyCookbook initialCookbook;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyInventory initialInventory;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyCart initialCart;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            cookbookOptional \u003d storage.readCookbook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            inventoryOptional \u003d storage.readInventory();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            cartOptional \u003d storage.readCart();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!cookbookOptional.isPresent()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Cookbook\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!inventoryOptional.isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Inventory\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!cartOptional.isPresent()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample Cart\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCookbook \u003d cookbookOptional.orElseGet(SampleDataUtil::getSampleCookbook);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialInventory \u003d inventoryOptional.orElseGet(SampleDataUtil::getSampleInventory);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCart \u003d cartOptional.orElseGet(SampleDataUtil::getSampleCart);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty Cooking Papa\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialInventory \u003d new Inventory();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCart \u003d new Cart();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Cooking Papa\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialInventory \u003d new Inventory();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            initialCart \u003d new Cart();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new ModelManager(new AddressBook(), initialCookbook, initialInventory, initialCart, userPrefs);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty Cooking Papa\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.info(\"Starting Cooking Papa \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Cooking Papa ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 54,
      "-": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX \u003d \"The recipe index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_INVALID_STEP_DISPLAYED_INDEX \u003d \"The step index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STEPS \u003d \"This step already exists in the recipe\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TAG \u003d \"This tag already exists in the recipe\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG \u003d \"The Tag provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "hans555": 5,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/fraction/MixedFraction.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.commons.core.fraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.math.BigInteger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.apache.commons.math3.fraction.Fraction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a mixed fraction."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class MixedFraction extends Fraction {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUM_OF_PARTS_IN_PURE_FRACTION \u003d 1;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int WHOLE_PART_OF_PURE_FRACTION \u003d 0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int FRACTIONAL_PART_POSITION_IN_PURE_FRACTION \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUM_OF_PARTS_IN_MIXED_FRACTION \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int WHOLE_PART_POSITION_IN_MIXED_FRACTION \u003d 0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int FRACTIONAL_PART_POSITION_IN_MIXED_FRACTION \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUM_OF_PARTS_IN_FRACTION \u003d 2;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int NUMERATOR_POSITION \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int DENOMINATOR_POSITION \u003d 1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a {@code MixedFraction} from a {@code Fraction}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public MixedFraction(Fraction f) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(f.getNumerator(), f.getDenominator());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a {@code MixedFraction} from a numerator and a denominator."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public MixedFraction(int num, int den) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(num, den);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the string argument as an unsigned mixed fraction."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param s a {@code String} containing the {@code MixedFraction} representation to be parsed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the mixed fraction value represented by the argument."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws NumberFormatException if the string does not contain a parsable unsigned mixed fraction."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static MixedFraction parseUnsignedMixedFraction(String s) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (s \u003d\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new NumberFormatException(\"null\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int wholePart;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int fractionalPartPosition;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String[] splitInput \u003d s.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (splitInput.length \u003d\u003d NUM_OF_PARTS_IN_PURE_FRACTION) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            wholePart \u003d WHOLE_PART_OF_PURE_FRACTION;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            fractionalPartPosition \u003d FRACTIONAL_PART_POSITION_IN_PURE_FRACTION;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (splitInput.length \u003d\u003d NUM_OF_PARTS_IN_MIXED_FRACTION) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            wholePart \u003d Integer.parseInt(splitInput[WHOLE_PART_POSITION_IN_MIXED_FRACTION]);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            fractionalPartPosition \u003d FRACTIONAL_PART_POSITION_IN_MIXED_FRACTION;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new NumberFormatException(s);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String[] splitFraction \u003d splitInput[fractionalPartPosition].split(\"/\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (splitFraction.length !\u003d NUM_OF_PARTS_IN_FRACTION) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new NumberFormatException(s);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int numerator \u003d Integer.parseInt(splitFraction[NUMERATOR_POSITION]);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int denominator \u003d Integer.parseInt(splitFraction[DENOMINATOR_POSITION]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        numerator +\u003d wholePart * denominator;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new MixedFraction(numerator, denominator);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the {@code MixedFraction} representation of a {@code BigDecimal} value."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param value the {@code BigDecimal} value."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return the {@code MixedFraction} representation of the {@code BigDecimal} value."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static MixedFraction getFromBigDecimal(BigDecimal value) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String stringRepresentation \u003d value.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        boolean hasFractionalPart \u003d stringRepresentation.split(\"\\\\.\").length \u003e 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int wholePart \u003d Integer.parseInt(stringRepresentation.split(\"\\\\.\")[0]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int numerator \u003d wholePart;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int denominator \u003d 1;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (hasFractionalPart) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            String fractionalPartString \u003d stringRepresentation.split(\"\\\\.\")[1];"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            denominator \u003d new BigInteger(\"10\").pow(fractionalPartString.length()).intValue();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (numerator \u003e\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                numerator \u003d wholePart * denominator + Integer.parseInt(fractionalPartString);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                numerator \u003d wholePart * denominator - Integer.parseInt(fractionalPartString);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new MixedFraction(numerator, denominator);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds the specified mixed fraction."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public MixedFraction add(MixedFraction mixedFraction) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new MixedFraction(super.add(mixedFraction));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Subtracts the specified mixed fraction."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public MixedFraction subtract(MixedFraction mixedFraction) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new MixedFraction(super.subtract(mixedFraction));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int wholePart \u003d intValue();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int numerator \u003d getNumerator();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int denominator \u003d getDenominator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (numerator \u003e 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            numerator \u003d numerator - (wholePart * denominator);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (wholePart \u003c 0) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            numerator \u003d (wholePart * denominator) - numerator;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (numerator \u003d\u003d 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return String.format(\"%d\", wholePart);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (wholePart \u003d\u003d 0) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return String.format(\"%d/%d\", numerator, denominator);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"%d %d/%d\", wholePart, numerator, denominator);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 129
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the AddressBook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.model.Model#getAddressBook()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the Cookbook."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see seedu.address.model.Model#getCookbook()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyCookbook getCookbook();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the Inventory."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see seedu.address.model.Model#getInventory()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyInventory getInventory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the Cart."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see seedu.address.model.Model#getCart()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyCart getCart();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of cookbook recipes */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of inventory ingredients */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredInventoryIngredientList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of cart ingredients */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredCartIngredientList();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /** Returns an unmodifiable view of the filtered cart */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredCart();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 cookbook file path."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCookbookFilePath();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 cart file path."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCartFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 46,
      "teo-jun-xiong": 7,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.CookingPapaParser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final CookingPapaParser cookingPapaParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cookingPapaParser \u003d new CookingPapaParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Command command \u003d cookingPapaParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            storage.saveCookbook(model.getCookbook());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            storage.saveInventory(model.getInventory());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            storage.saveCart(model.getCart());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ReadOnlyCookbook getCookbook() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getCookbook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ReadOnlyInventory getInventory() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getInventory();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ReadOnlyCart getCart() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getCart();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredCookbookRecipeList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredInventoryIngredientList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getFilteredInventoryIngredientList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredCartIngredientList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getFilteredCartIngredientList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredCart() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return model.getFilteredCartIngredientList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBookFilePath();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCookbookFilePath() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getCookbookFilePath();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getInventoryFilePath();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCartFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return model.getCartFilePath();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 49,
      "teo-jun-xiong": 14,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!personToEdit.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setPerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new Person(updatedName, updatedTags);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, tags);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 3,
      "-": 176
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 3,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Adds ingredients to the cart."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public abstract class CartAddCommand extends CartCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \": This commands allows you to add ingredients to your cart.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Parameters for adding an ingredient into your cart is as follows: \\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"10\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \"recipe INDEX\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \": This commands allows you to add all the ingredients from a recipe to your cart.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Parameters for adding all ingredients in the recipe into your cart is as follows: \\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \"recipe INDEX\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \"recipe 1\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartAddIngredientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Adds an ingredient to the cart"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartAddIngredientCommand extends CartAddCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ingredient added: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \": This commands allows you to add ingredients to your cart.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Parameters for adding an ingredient into your cart is as follows: \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"10\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private final Ingredient toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a CartAddIngredientCommand to add the specified {@code Ingredient} to the cart"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartAddIngredientCommand(Ingredient toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.addCartIngredient(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof CartAddIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                \u0026\u0026 toAdd.equals(((CartAddIngredientCommand) other).toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartAddRecipeIngredientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Adds all the ingredients from the indexed recipe to cart"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartAddRecipeIngredientCommand extends CartAddCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Ingredients from recipe %1$ added.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private final int recipeToAdd;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a CartAddIngredientCommand to add the specified {@code Ingredient} to the cart"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartAddRecipeIngredientCommand(int recipeToAdd) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(recipeToAdd);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.recipeToAdd \u003d recipeToAdd;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        // TODO: Implement method."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, recipeToAdd));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartClearCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Removes all ingredients from the cart"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartClearCommand extends CartCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All ingredients from cart cleared!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"This command allows you to remove all ingredients from your cart.\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Parameters for removing all ingredients from your cart is as follows: \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a CartRemoveIngredientCommand to add the specified {@code Ingredient} to the cart"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartClearCommand() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.removeAllCartIngredient();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Represents an Cart command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public abstract class CartCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"cart\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Stores the details to edit the cart with."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static class EditIngredientDescriptor {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        private UniqueIngredientList ingredients;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public EditIngredientDescriptor() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public EditIngredientDescriptor(EditIngredientDescriptor toCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            setIngredients(toCopy.ingredients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Creates and returns a {@code Cart} with the details of {@code CartToEdit}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * edited with {@code editCartDescriptor}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public static Cart createEditedCart(Cart cartToEdit, EditIngredientDescriptor editCartDescriptor) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            assert cartToEdit !\u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            UniqueIngredientList updatedIngredients \u003d editCartDescriptor.getIngredients()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    .orElse(cartToEdit.getUniqueIngredientList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new Cart((ReadOnlyCart) updatedIngredients);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return CollectionUtil.isAnyNonNull(ingredients);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public void setIngredients(UniqueIngredientList ingredients) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public Optional\u003cUniqueIngredientList\u003e getIngredients() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return Optional.ofNullable(ingredients);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            if (!(other instanceof CartCommand.EditIngredientDescriptor)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            EditIngredientDescriptor e \u003d (EditIngredientDescriptor) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return getIngredients().equals(e.getIngredients());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "tzihiang": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cart/CartRemoveIngredientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Removes an ingredient from the cart"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartRemoveIngredientCommand extends CartCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Ingredient removed: %1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"This commands allows you to remove ingredients from your cart.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Parameters for removing an ingredient into your cart is as follows: \\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Egg \" + PREFIX_INGREDIENT_QUANTITY + \"10\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private final Ingredient toRemove;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a CartRemoveIngredientCommand to add the specified {@code Ingredient} to the cart"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartRemoveIngredientCommand(Ingredient toRemove) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.toRemove \u003d toRemove;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        model.removeCartIngredient(toRemove);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toRemove));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof CartRemoveIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                \u0026\u0026 toRemove.equals(((CartRemoveIngredientCommand) other).toRemove));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Adds a recipe into the cookbook."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookAddCommand extends CookbookCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": Adds a new recipe to the cookbook. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_NAME + \"NAME \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + \"DESCRIPTION\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Example: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_NAME + \"Bacon Carbonara \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + PREFIX_RECIPE_DESCRIPTION + \"An Italian classic pasta dish with creamy egg sauce\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \" and bacon topped with salty Parmesan cheese.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New recipe added: %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This recipe already exists in the cookbook.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final Recipe toAdd;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Creates a CookbookAddCommand to add a new {@code recipe} to the cookbook"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookAddCommand(Recipe recipe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        toAdd \u003d recipe;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (model.hasCookbookRecipe(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.addCookbookRecipe(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof CookbookAddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 toAdd.equals(((CookbookAddCommand) other).toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "shanecsj": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a cookbook command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class CookbookCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"cookbook\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookRemoveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Removes a recipe identified using it\u0027s displayed index from the cookbook."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookRemoveCommand extends CookbookCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": Removes the recipe identified by the index number used in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_REMOVE_RECIPE_SUCCESS \u003d \"Deleted Recipe: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookRemoveCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Recipe recipeToRemove \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.removeCookbookRecipe(recipeToRemove);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_RECIPE_SUCCESS, recipeToRemove));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof CookbookRemoveCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((CookbookRemoveCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "shanecsj": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/cookbook/CookbookViewCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.commands.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * View a recipe identified using it\u0027s displayed index from the cookbook."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookViewCommand extends CookbookCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"view\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \": Views the recipe identified by the index number used in the displayed recipe list.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_REMOVE_RECIPE_SUCCESS \u003d \"Selected Recipe %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookViewCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Recipe recipeToView \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_REMOVE_RECIPE_SUCCESS, recipeToView));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof CookbookViewCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((CookbookViewCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "shanecsj": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/inventory/InventoryAddIngredientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Adds an ingredient to the inventory"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryAddIngredientCommand extends InventoryCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ingredient added: %1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \": This commands allows you to add ingredients to your inventory.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Parameters for adding an ingredient into your inventory is as follows: \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"10\\n\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private final Ingredient toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a InventoryAddIngredientCommand to add the specified {@code Ingredient} to the inventory"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public InventoryAddIngredientCommand(Ingredient toAdd) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.addInventoryIngredient(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof InventoryAddIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                \u0026\u0026 toAdd.equals(((InventoryAddIngredientCommand) other).toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 9,
      "tzihiang": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/inventory/InventoryCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents an inventory command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class InventoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"inventory\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Stores the details to edit the inventory with."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static class EditIngredientDescriptor {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        private UniqueIngredientList ingredients;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public EditIngredientDescriptor() {}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public EditIngredientDescriptor(EditIngredientDescriptor toCopy) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            setIngredients(toCopy.ingredients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Creates and returns a {@code Inventory} with the details of {@code inventoryToEdit}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * edited with {@code editInventoryDescriptor}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public static Inventory createEditedInventory(Inventory inventoryToEdit,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                EditIngredientDescriptor editInventoryDescriptor) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            assert inventoryToEdit !\u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            UniqueIngredientList updatedIngredients \u003d editInventoryDescriptor.getIngredients()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    .orElse(inventoryToEdit.getUniqueIngredientList());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new Inventory((ReadOnlyInventory) updatedIngredients);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return CollectionUtil.isAnyNonNull(ingredients);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public void setIngredients(UniqueIngredientList ingredients) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public Optional\u003cUniqueIngredientList\u003e getIngredients() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return Optional.ofNullable(ingredients);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            if (!(other instanceof InventoryCommand.EditIngredientDescriptor)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            EditIngredientDescriptor e \u003d (EditIngredientDescriptor) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return getIngredients().equals(e.getIngredients());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 13,
      "tzihiang": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/inventory/InventoryRemoveIngredientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.commands.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Removes an ingredient to the inventory"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryRemoveIngredientCommand extends InventoryCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Ingredient removed: %1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \": This commands allows you to remove ingredients to your inventory.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Parameters for removing an ingredient into your inventory is as follows: \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private final Ingredient toRemove;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Creates a InventoryAddIngredientCommand to add the specified {@code Ingredient} to the inventory"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public InventoryRemoveIngredientCommand(Ingredient toRemove) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        this.toRemove \u003d toRemove;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        model.removeInventoryIngredient(toRemove);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toRemove));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof InventoryRemoveIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                \u0026\u0026 toRemove.equals(((InventoryRemoveIngredientCommand) other).toRemove));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 7,
      "tzihiang": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeAddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Adds a step/ingredient/tag to a recipe inside the cookbook"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class RecipeAddCommand extends RecipeCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \": Adds an ingredient, a step or a tag to a recipe with the given INDEX. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"Parameters for adding an ingredient: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"12\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Parameters for adding a step to a recipe: \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_STEP_INDEX + \"STEP_INDEX \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_STEP_DESCRIPTION + \"STEP_DESCRIPTION\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + PREFIX_STEP_INDEX + \"1 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_STEP_DESCRIPTION + \"Add potatoes and water to a large pot, and bring to a boil.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Parameters for adding a tag to a recipe: \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_TAG + \"TAG_NAME\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_TAG + \"Pasta\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 29,
      "hans555": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeAddIngredientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Adds an ingredient to a recipe."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class RecipeAddIngredientCommand extends RecipeAddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New ingredient added: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_INCOMPATIBLE_UNITS \u003d \"This ingredient has different units \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"from the same ingredient in the recipe\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Ingredient toAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Creates a RecipeAddIngredientCommand to add the specified {@code Ingredient} to the recipe"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public RecipeAddIngredientCommand(Index index, Ingredient toAdd) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList ingredients \u003d recipeToEdit.getIngredients();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        editRecipeDescriptor.setIngredients(ingredients);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                || (other instanceof RecipeAddIngredientCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RecipeAddIngredientCommand) other).toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeAddStepCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Adds a step to a recipe."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class RecipeAddStepCommand extends RecipeAddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New step added: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index recipeIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index stepIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Step toAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeAddStepCommand(Index recipeIndex, Index stepIndex, Step toAdd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(recipeIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(stepIndex);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.stepIndex \u003d stepIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (recipeIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(recipeIndex.getZeroBased());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList targetStepList \u003d recipeToEdit.getSteps();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (stepIndex.getZeroBased() \u003e targetStepList.asUnmodifiableObservableList().size()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "            // ensure the step index is valid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException((Messages.MESSAGE_INVALID_STEP_DISPLAYED_INDEX));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (targetStepList.contains(toAdd)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(((Messages.MESSAGE_DUPLICATE_STEPS)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        targetStepList.add(stepIndex, toAdd);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editRecipeDescriptor.setSteps(targetStepList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof RecipeAddStepCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RecipeAddStepCommand) other).toAdd)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 stepIndex.equals(((RecipeAddStepCommand) other).stepIndex));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 17,
      "hans555": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeAddTagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Adds a tag to a recipe."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class RecipeAddTagCommand extends RecipeAddCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New tag added: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STEPS \u003d \"This tag already exists in the recipe\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index recipeIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Tag toAdd;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeAddTagCommand(Index recipeIndex, Tag toAdd) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(recipeIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.toAdd \u003d toAdd;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (recipeIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(recipeIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Set\u003cTag\u003e targetTagSet \u003d recipeToEdit.getTags();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!targetTagSet.add(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_DUPLICATE_TAG);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editRecipeDescriptor.setTags(targetTagSet);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof RecipeAddTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 toAdd.equals(((RecipeAddTagCommand) other).toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a recipe command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class RecipeCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String COMMAND_CATEGORY \u003d \"recipe\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Stores the details to edit the recipe with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * corresponding field value of the recipe."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static class EditRecipeDescriptor {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private RecipeName name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private RecipeDescription description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private UniqueIngredientList ingredients;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private UniqueStepList steps;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public EditRecipeDescriptor() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public EditRecipeDescriptor(EditRecipeDescriptor toCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setIngredients(toCopy.ingredients);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setSteps(toCopy.steps);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Creates and returns a {@code Recipe} with the details of {@code recipeToEdit}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * edited with {@code editRecipeDescriptor}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public static Recipe createEditedRecipe(Recipe recipeToEdit, EditRecipeDescriptor editRecipeDescriptor) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            assert recipeToEdit !\u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            RecipeName updatedName \u003d editRecipeDescriptor.getName()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(recipeToEdit.getName());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            RecipeDescription updatedDescription \u003d editRecipeDescriptor.getDescription()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(recipeToEdit.getDescription());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            UniqueIngredientList updatedIngredients \u003d editRecipeDescriptor.getIngredients()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(recipeToEdit.getIngredients());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            UniqueStepList updatedSteps \u003d editRecipeDescriptor.getSteps()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(recipeToEdit.getSteps());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Set\u003cTag\u003e updatedTags \u003d editRecipeDescriptor.getTags()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .orElse(recipeToEdit.getTags());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new Recipe(updatedName, updatedDescription, updatedIngredients, updatedSteps, updatedTags);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description, ingredients, steps, tags);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setName(RecipeName name) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cRecipeName\u003e getName() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setDescription(RecipeDescription description) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cRecipeDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setIngredients(UniqueIngredientList ingredients) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cUniqueIngredientList\u003e getIngredients() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.ofNullable(ingredients);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setSteps(UniqueStepList steps) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.steps \u003d steps;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cUniqueStepList\u003e getSteps() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.ofNullable(steps);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (!(other instanceof EditRecipeDescriptor)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            EditRecipeDescriptor e \u003d (EditRecipeDescriptor) other;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    \u0026\u0026 getIngredients().equals(e.getIngredients())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    \u0026\u0026 getSteps().equals(e.getSteps())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeRemoveCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Remove a step/ingredient/tag in a recipe inside the cookbook."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "public abstract class RecipeRemoveCommand extends RecipeCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remove\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_CATEGORY + \" \" + COMMAND_WORD"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \": Removes an ingredient or a step to a recipe. \""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Parameters for removing an ingredient: \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"INGREDIENT \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"[\" + PREFIX_INGREDIENT_QUANTITY + \"QUANTITY]\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_INGREDIENT_NAME + \"Eggs \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_INGREDIENT_QUANTITY + \"12\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Parameters for removing a step: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_STEP_INDEX + \"STEP_INDEX\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_STEP_INDEX + \"1\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Parameters for removing a tag to a recipe: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_TAG + \"TAG_NAME\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + \"Example: \" + COMMAND_CATEGORY + \" 1 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "            + PREFIX_TAG + \"Pasta\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeRemoveIngredientCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": " * todo"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class RecipeRemoveIngredientCommand extends RecipeRemoveCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeRemoveStepCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Removes a step from a recipe."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class RecipeRemoveStepCommand extends RecipeRemoveCommand {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"step deleted: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index recipeIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index stepIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeRemoveStepCommand(Index recipeIndex, Index stepIndex) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(recipeIndex);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(stepIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.stepIndex \u003d stepIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (recipeIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(recipeIndex.getZeroBased());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList targetStepList \u003d recipeToEdit.getSteps();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (stepIndex.getZeroBased() \u003e\u003d targetStepList.asUnmodifiableObservableList().size()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "            // ensure the step index is valid"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException((Messages.MESSAGE_INVALID_STEP_DISPLAYED_INDEX));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Step toRemove \u003d targetStepList.remove(stepIndex);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editRecipeDescriptor.setSteps(targetStepList);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toRemove));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof RecipeRemoveStepCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 stepIndex.equals(((RecipeRemoveStepCommand) other).stepIndex));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/recipe/RecipeRemoveTagCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.commands.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_RECIPES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Removes a tag to a recipe."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class RecipeRemoveTagCommand extends RecipeRemoveCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Tag deleted: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Index recipeIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final Tag toRemove;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeRemoveTagCommand(Index recipeIndex, Tag toRemove) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(recipeIndex);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.recipeIndex \u003d recipeIndex;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        this.toRemove \u003d toRemove;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        List\u003cRecipe\u003e lastShownList \u003d model.getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (recipeIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_RECIPE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe recipeToEdit \u003d lastShownList.get(recipeIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Set\u003cTag\u003e targetTagSet \u003d recipeToEdit.getTags();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!targetTagSet.remove(toRemove)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new CommandException((Messages.MESSAGE_INVALID_TAG));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "        EditRecipeDescriptor editRecipeDescriptor \u003d new EditRecipeDescriptor();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "        editRecipeDescriptor.setTags(targetTagSet);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Recipe editedRecipe \u003d EditRecipeDescriptor.createEditedRecipe(recipeToEdit, editRecipeDescriptor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.setCookbookRecipe(recipeToEdit, editedRecipe);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "        model.updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toRemove));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof RecipeRemoveTagCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 toRemove.equals(((RecipeRemoveTagCommand) other).toRemove));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Person person \u003d new Person(name, tagList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 3,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\"); // AddressBook Person\u0027s (TO BE REMOVED)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final Prefix PREFIX_SEARCH_KEYWORD \u003d new Prefix(\"k/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final Prefix PREFIX_RECIPE_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final Prefix PREFIX_RECIPE_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_NAME \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Prefix PREFIX_INGREDIENT_QUANTITY \u003d new Prefix(\"q/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Prefix PREFIX_STEP_INDEX \u003d new Prefix(\"x/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Prefix PREFIX_STEP_DESCRIPTION \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 4,
      "shanecsj": 9,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CookingPapaParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.cart.CartCommandParser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.cookbook.CookbookCommandParser;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.inventory.InventoryCommandParser;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.recipe.RecipeCommandParser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CookingPapaParser {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandCategory\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses user input into a command for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final String commandCategory \u003d matcher.group(\"commandCategory\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        switch (commandCategory) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case CookbookCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new CookbookCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case RecipeCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new RecipeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case InventoryCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new InventoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case CartCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case ExitCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case HelpCommand.COMMAND_CATEGORY:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 20,
      "-": 48,
      "tzihiang": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses a {@code String recipeName} into a {@code RecipeName}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the given {@code recipeName} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static RecipeName parseRecipeName(String recipeName) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(recipeName);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String trimmedRecipeName \u003d recipeName.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!RecipeName.isValidRecipeName(trimmedRecipeName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new RecipeName(trimmedRecipeName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses a {@code String recipeDescription} into a {@code RecipeDescription}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the given {@code recipeDescription} is invalid."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static RecipeDescription parseRecipeDescription(String recipeDescription) throws ParseException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(recipeDescription);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String trimmedRecipeDescription \u003d recipeDescription.trim();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!RecipeDescription.isValidRecipeDescription(trimmedRecipeDescription)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new RecipeDescription(trimmedRecipeDescription);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses an {@code String ingredientName} into an {@code IngredientName}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the given {@code ingredientName} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static IngredientName parseIngredientName(String ingredientName) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String trimmedIngredientName \u003d ingredientName.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!IngredientName.isValidIngredientName(trimmedIngredientName)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(IngredientName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new IngredientName(trimmedIngredientName);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses an {@code String ingredientQuantity} into an {@code IngredientQuantity}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the given {@code ingredientQuantity} is invalid."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static IngredientQuantity parseIngredientQuantity(String ingredientQuantity) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredientQuantity);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String trimmedIngredientQuantity \u003d ingredientQuantity.trim();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!IngredientQuantity.isValidIngredientQuantity(trimmedIngredientQuantity)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(IngredientQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new IngredientQuantity(trimmedIngredientQuantity);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses an {@code String stepDescription} into an {@code Step}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hans555"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the given {@code Step} is invalid."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static Step parseStep(String stepDescription) throws ParseException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(stepDescription);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String trimmedStepDescription \u003d stepDescription.trim();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!Step.isValidStep(trimmedStepDescription)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(Step.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new Step(trimmedStepDescription);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 18,
      "shanecsj": 25,
      "hans555": 17,
      "-": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddRecipeIngredientCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new CartAddCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartAddCommandParser implements Parser\u003cCartAddCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public static final String RECIPE_STRING \u003d \"recipe\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartAddCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartAddCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (containsRecipe(args)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return parseAddRecipeIngredient(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        } else if (containsIngredient(args)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return parseAddIngredient(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartAddIngredientCommand"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartAddIngredientCommand object for execution."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartAddIngredientCommand parseAddIngredient(String args) throws ParseException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INGREDIENT_NAME)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    CartAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientQuantity ingredientQuantity \u003d ParserUtil.parseIngredientQuantity(argMultimap"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_QUANTITY).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        Ingredient ingredient \u003d new Ingredient(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new CartAddIngredientCommand(ingredient);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartAddRecipeIngredientCommand"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartAddRecipeIngredientCommand object for execution."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartAddRecipeIngredientCommand parseAddRecipeIngredient(String args) throws"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            NumberFormatException, ParseException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        int recipeNumber;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (!hasOnlyRecipePrefixAndIndex(args)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    CartAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            args \u003d removeRecipePrefix(args);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            recipeNumber \u003d Integer.parseInt(args);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new NumberFormatException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    CartAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new CartAddRecipeIngredientCommand(recipeNumber);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private String removeRecipePrefix(String args) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return args.split(\" \", 2)[1];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private boolean containsRecipe(String args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return args.contains(RECIPE_STRING);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private boolean containsIngredient(String args) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return args.contains(PREFIX_INGREDIENT_NAME.toString())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_INGREDIENT_QUANTITY.toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static boolean hasOnlyRecipePrefixAndIndex(String args) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        String trim \u003d args.trim();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return trim.split(\"\\\\s+\").length \u003d\u003d 2 \u0026\u0026 args.split(\" \", 2)[0].toLowerCase().equals(\"recipe\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 127
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartAddIngredientCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new CartAddIngredientCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartAddIngredientCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartAddIngredientCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartAddIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INGREDIENT_NAME)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    CartAddIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientQuantity ingredientQuantity \u003d ParserUtil.parseIngredientQuantity(argMultimap"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_QUANTITY).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        Ingredient ingredient \u003d new Ingredient(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new CartAddIngredientCommand(ingredient);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartAddRecipeIngredientCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddRecipeIngredientCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new CartAddRecipeIngredientCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartAddRecipeIngredientCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartAddRecipeIngredientCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartAddRecipeIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        int recipeNumber;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            recipeNumber \u003d Integer.parseInt(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        } catch (NumberFormatException ne) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    CartAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new CartAddRecipeIngredientCommand(recipeNumber);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartClearCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartClearCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses no input to return a CartClearCommand."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartClearCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartRemoveIngredientCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartClearCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (userInput.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartClearCommand();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CartClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartAddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartClearCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartRemoveIngredientCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "* Parses input arguments and into a {@code CartCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static final Pattern CART_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            .compile(\" *(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a CartCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final Matcher matcher \u003d CART_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        // For now, implementation will only be done for the whole ingredient, and not quantity"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case CartAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case CartRemoveIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartRemoveIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case CartClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new CartClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cart/CartRemoveIngredientCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.cart;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.cart.CartRemoveIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new CartAddIngredientCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class CartRemoveIngredientCommandParser implements Parser\u003cCartCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CartCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a CartRemoveIngredientCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public CartRemoveIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INGREDIENT_NAME)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    CartRemoveIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientQuantity ingredientQuantity \u003d ParserUtil.parseIngredientQuantity(argMultimap"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_QUANTITY).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        Ingredient ingredient \u003d new Ingredient(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new CartRemoveIngredientCommand(ingredient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cookbook/CookbookAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RECIPE_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Parses input arguments and creates a new CookbookAddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookAddCommandParser implements Parser\u003cCookbookAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookAddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookAddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_RECIPE_NAME, PREFIX_RECIPE_DESCRIPTION);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_RECIPE_NAME, PREFIX_RECIPE_DESCRIPTION)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    CookbookAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        RecipeName recipeName \u003d ParserUtil.parseRecipeName(argMultimap.getValue(PREFIX_RECIPE_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        RecipeDescription recipeDescription \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                ParserUtil.parseRecipeDescription(argMultimap.getValue(PREFIX_RECIPE_DESCRIPTION).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Recipe recipe \u003d new Recipe(recipeName, recipeDescription);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new CookbookAddCommand(recipe);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix ... prefixes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 53,
      "hans555": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cookbook/CookbookCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookRemoveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookViewCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* Parses input arguments and into a {@code CookbookCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CookbookCommandParser implements Parser\u003cCookbookCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private static final Pattern COOKBOOK_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .compile(\" *(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a CookbookCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a CookbookCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public CookbookCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final Matcher matcher \u003d COOKBOOK_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        case CookbookAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new CookbookAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        case CookbookViewCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new CookbookViewCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        case CookbookRemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new CookbookRemoveCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 20,
      "shanecsj": 29,
      "hans555": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cookbook/CookbookRemoveCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookRemoveCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Parses input arguments and creates a new CookbookRemoveCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookRemoveCommandParser implements Parser\u003cCookbookRemoveCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookRemoveCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookRemoveCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookRemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new CookbookRemoveCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CookbookRemoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/cookbook/CookbookViewCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.logic.parser.cookbook;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookViewCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Parses input arguments and creates a new CookbookViewCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class CookbookViewCommandParser implements Parser\u003cCookbookViewCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CookbookViewCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * and returns a CookbookViewCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public CookbookViewCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return new CookbookViewCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CookbookViewCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/inventory/InventoryAddIngredientCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryAddIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new InventoryAddIngredientCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryAddIngredientCommandParser implements Parser\u003cInventoryCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the InventoryCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a InventoryAddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public InventoryAddIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INGREDIENT_NAME)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    InventoryAddIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        IngredientQuantity ingredientQuantity \u003d ParserUtil.parseIngredientQuantity(argMultimap"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_QUANTITY).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        Ingredient ingredient \u003d new Ingredient(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return new InventoryAddIngredientCommand(ingredient);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/inventory/InventoryCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryAddIngredientCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryRemoveIngredientCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "* Parses input arguments and into a {@code InventoryCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class InventoryCommandParser implements Parser\u003cInventoryCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private static final Pattern INVENTORY_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            .compile(\" *(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a InventoryCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a InventoryCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public InventoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final Matcher matcher \u003d INVENTORY_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        // For now, implementation will only be done for the whole ingredient, and not quantity"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case InventoryAddIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new InventoryAddIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        case InventoryRemoveIngredientCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            return new InventoryRemoveIngredientCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 18,
      "tzihiang": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/inventory/InventoryRemoveIngredientCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.logic.parser.inventory;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.commands.inventory.InventoryRemoveIngredientCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Parses input arguments and creates a new InventoryRemoveIngredientCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class InventoryRemoveIngredientCommandParser implements Parser\u003cInventoryCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the InventoryCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * and returns a InventoryRemoveIngredientCommand object for execution."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public InventoryRemoveIngredientCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INGREDIENT_NAME)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    InventoryRemoveIngredientCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        IngredientQuantity ingredientQuantity \u003d ParserUtil.parseIngredientQuantity(argMultimap"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_QUANTITY).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Ingredient ingredient \u003d new Ingredient(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new InventoryRemoveIngredientCommand(ingredient);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 46,
      "tzihiang": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/recipe/RecipeAddCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_INDEX;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddIngredientCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddStepCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddTagCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Parses input arguments and creates a new RecipeAddCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class RecipeAddCommandParser implements Parser\u003cRecipeAddCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeAddCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a RecipeAddCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public RecipeAddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (containsIngredient(args)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return parseAddIngredient(args);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (containsStep(args)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return parseAddStep(args);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } else if (containsTag(args)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseAddTag(args);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeAddIngredientCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a RecipeAddIngredientCommand object for execution."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private RecipeAddIngredientCommand parseAddIngredient(String args) throws ParseException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_INGREDIENT_NAME, PREFIX_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_INGREDIENT_NAME)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientName ingredientName \u003d ParserUtil.parseIngredientName(argMultimap"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_NAME).get());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity ingredientQuantity \u003d ParserUtil.parseIngredientQuantity(argMultimap"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .getValue(PREFIX_INGREDIENT_QUANTITY).get());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient ingredient \u003d new Ingredient(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new RecipeAddIngredientCommand(index, ingredient);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeAddStepCommand"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a RecipeAddStepCommand object for execution."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public RecipeAddStepCommand parseAddStep(String args) throws ParseException {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hans555"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_STEP_INDEX, PREFIX_STEP_DESCRIPTION);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Index recipeIndex;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hans555"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hans555"
        },
        "content": "            recipeIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_STEP_INDEX, PREFIX_STEP_DESCRIPTION)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Index stepIndex \u003d ParserUtil.parseIndex(argMultimap"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .getValue(PREFIX_STEP_INDEX).get());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Step toAdd \u003d ParserUtil.parseStep(argMultimap"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .getValue(PREFIX_STEP_DESCRIPTION).get());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new RecipeAddStepCommand(recipeIndex, stepIndex, toAdd);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeAddTagCommand"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a RecipeAddTagCommand object for execution."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeAddTagCommand parseAddTag(String args) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hans555"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Index recipeIndex;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hans555"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hans555"
        },
        "content": "            recipeIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeAddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Tag toAdd \u003d ParserUtil.parseTag(argMultimap"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new RecipeAddTagCommand(recipeIndex, toAdd);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private boolean containsIngredient(String args) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return args.contains(PREFIX_INGREDIENT_NAME.toString())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_INGREDIENT_QUANTITY.toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private boolean containsStep(String args) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return args.contains(PREFIX_STEP_INDEX.toString())"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 args.contains(PREFIX_STEP_DESCRIPTION.toString());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private boolean containsTag(String args) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return args.contains(PREFIX_TAG.toString());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 108,
      "hans555": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/recipe/RecipeCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeAddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Parses input arguments and into a {@code RecipeCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class RecipeCommandParser implements Parser\u003cRecipeCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Pattern RECIPE_COMMAND_ARGUMENT_FORMAT \u003d Pattern"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .compile(\"(?\u003cindex\u003e\\\\S+) *(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of a RecipeCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * and returns a RecipeCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public RecipeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final Matcher matcher \u003d RECIPE_COMMAND_ARGUMENT_FORMAT.matcher(args.trim());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final String index \u003d matcher.group(\"index\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        case RecipeAddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return new RecipeAddCommandParser().parse(index + \" \" + arguments);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "        case RecipeRemoveCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return new RecipeRemoveCommandParser().parse(index + \" \" + arguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 45,
      "hans555": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/recipe/RecipeRemoveCommandParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.logic.parser.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_STEP_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveIngredientCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveStepCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.commands.recipe.RecipeRemoveTagCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Parses input arguments and creates a new RecipeRemoveCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class RecipeRemoveCommandParser implements Parser\u003cRecipeRemoveCommand\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeRemoveCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a RecipeRemoveCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeRemoveCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (containsIngredient(args)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseRemoveIngredient(args);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } else if (containsStep(args)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseRemoveStep(args);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } else if (containsTag(args)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "            return parseRemoveTag(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeRemoveIngredientCommand"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a RecipeRemoveIngredientCommand object for execution."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private RecipeRemoveIngredientCommand parseRemoveIngredient(String args) throws ParseException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        //TODO"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "        throw new ParseException(\"method not fixed\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeRemoveStepCommand"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a RecipeRemoveStepCommand object for execution."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeRemoveStepCommand parseRemoveStep(String args) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_STEP_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Index recipeIndex;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "            recipeIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeRemoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_STEP_INDEX)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Index stepIndex \u003d ParserUtil.parseIndex(argMultimap"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .getValue(PREFIX_STEP_INDEX).get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new RecipeRemoveStepCommand(recipeIndex, stepIndex);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecipeRemoveTagCommand"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * and returns a RecipeRemoveTagCommand object for execution."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public RecipeRemoveTagCommand parseRemoveTag(String args) throws ParseException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hans555"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hans555"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Index recipeIndex;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hans555"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hans555"
        },
        "content": "            recipeIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hans555"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeRemoveCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    RecipeRemoveCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Tag toRemove \u003d ParserUtil.parseTag(argMultimap"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hans555"
        },
        "content": "                .getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return new RecipeRemoveTagCommand(recipeIndex, toRemove);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private boolean containsIngredient(String args) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return args.contains(PREFIX_INGREDIENT_NAME.toString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private boolean containsStep(String args) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return args.contains(PREFIX_STEP_INDEX.toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private boolean containsTag(String args) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return args.contains(PREFIX_TAG.toString());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Cart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Wraps all data at the cart level"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class Cart extends IngredientList implements ReadOnlyCart {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public Cart() {}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public Cart(ReadOnlyCart toBeCopied) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        super(toBeCopied);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return getIngredientList().size() + \" ingredients\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof Cart // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                \u0026\u0026 this.getUniqueIngredientList().equals(((Cart) other).getUniqueIngredientList()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Cookbook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.UniqueRecipeList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Wraps all data at the cookbook level."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Duplicates are not allowed (by .isSameRecipe comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Cookbook implements ReadOnlyCookbook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final UniqueRecipeList recipes;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Cookbook() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Creates an Cookbook using the Recipes in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Cookbook(ReadOnlyCookbook toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the contents of the recipe list with {@code recipes}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.recipes.setRecipes(recipes);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Resets the existing data of this {@code Cookbook} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData(ReadOnlyCookbook newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setRecipes(newData.getRecipeList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    //// recipe-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the cookbook."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean hasRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return recipes.contains(recipe);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds a recipe to the cookbook."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The recipe must not already exist in the cookbook."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void addRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes.add(recipe);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the given recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the cookbook."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the cookbook."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(editedRecipe);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes {@code key} from this {@code Cookbook}."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code key} must exist in the cookbook."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeRecipe(Recipe key) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipes.remove(key);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return recipes.asUnmodifiableObservableList().size() + \" recipes\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getRecipeList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return recipes.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                || (other instanceof Cookbook // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 recipes.equals(((Cookbook) other).recipes));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return recipes.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 119,
      "teo-jun-xiong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/IngredientList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Wraps all data at the ingredient list level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public abstract class IngredientList implements ReadOnlyIngredientList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final UniqueIngredientList ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientList() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientList(ReadOnlyIngredientList toBeCopied) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the contents of the ingredient list with {@code ingredients}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code ingredients} must not contain duplicate ingredients."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients.setIngredients(ingredients);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Resets the existing data of this {@code IngredientList} with {@code newData}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Called in constructor."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void resetData(ReadOnlyIngredientList newData) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setIngredients(newData.getIngredientList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    // For ingredient level:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if an ingredient with the same identity as {@code ingredient} exists in the list of ingredients."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean hasIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredients.contains(ingredient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds an ingredient to the list of ingredients."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must not already exist in the list of ingredients."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void addIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.add(ingredient);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the given ingredient {@code target} in the list with {@code editedIngredient}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the list of ingredients."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient identity of {@code editedIngredient} must not be the same as another existing ingredient in the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * list of ingredients."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(editedIngredient);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes {@code key} from this {@code ingredientList}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code key} must exist in the list of ingredients."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeIngredient(Ingredient key) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.remove(key);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredients.asUnmodifiableObservableList().size() + \" ingredients\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public UniqueIngredientList getUniqueIngredientList() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredients;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getIngredientList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredients.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 97
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Inventory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Wraps all data at the inventory level"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Duplicates are not allowed"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Inventory extends IngredientList implements ReadOnlyInventory {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public Inventory() {}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Inventory(ReadOnlyInventory toBeCopied) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(toBeCopied);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return getIngredientList().size() + \" ingredients\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof Inventory // instanceof handles nulls"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 this.getUniqueIngredientList().equals(((Inventory) other).getUniqueIngredientList()));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 6,
      "tzihiang": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Predicate\u003cRecipe\u003e PREDICATE_SHOW_ALL_RECIPES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Predicate\u003cIngredient\u003e PREDICATE_SHOW_ALL_INGREDIENTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBookFilePath(Path addressBookFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 cookbook file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCookbookFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sets the user prefs\u0027 cookbook file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCookbookFilePath(Path cookbookFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sets the user prefs\u0027 inventory file path."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setInventoryFilePath(Path inventoryFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the user prefs\u0027 cart file path."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCartFilePath();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sets the user prefs\u0027 cart file path."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCartFilePath(Path cartFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces address book data with the data in {@code addressBook}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    void setAddressBook(ReadOnlyAddressBook addressBook);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces cookbook data with the data in {@code cookbook}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCookbook(ReadOnlyCookbook cookbook);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns the Cookbook */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyCookbook getCookbook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces inventory data with the data in {@code inventory}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setInventory(ReadOnlyInventory inventory);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns the Inventory */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyInventory getInventory();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces cart data with the data in {@code cart}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCart(ReadOnlyCart cart);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns the Cart */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ReadOnlyCart getCart();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    void setPerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if a recipe with the same identity as {@code recipe} exists in the cookbook."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    boolean hasCookbookRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes the given recipe."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The recipe must exist in the cookbook."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void removeCookbookRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds the given recipe."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code recipe} must not already exist in the cookbook."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void addCookbookRecipe(Recipe recipe);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the given recipe {@code target} with {@code editedRecipe}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the cookbook."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the cookbook."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCookbookRecipe(Recipe target, Recipe editedRecipe);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if an ingredient with the same identity as {@code ingredient} exists in the inventory."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    boolean hasInventoryIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes the given ingredient."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must exist in the inventory."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void removeInventoryIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds the given ingredient."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code ingredient} must not already exist in the inventory."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void addInventoryIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the given ingredient {@code target} with {@code editedIngredient}."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the inventory."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient identity of {@code editedIngredient} must not be the same as another existing ingredient in the"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * inventory."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setInventoryIngredient(Ingredient target, Ingredient editedIngredient);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if an ingredient with the same identity as {@code ingredient} exists in the cart."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    boolean hasCartIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes the given ingredient."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must exist in the cart."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void removeCartIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds the given ingredient."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code ingredient} must not already exist in the cart."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void addCartIngredient(Ingredient ingredient);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the given ingredient {@code target} with {@code editedIngredient}."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the cart."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient identity of {@code editedIngredient} must not be the same as another existing ingredient in the"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * cart."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void setCartIngredient(Ingredient target, Ingredient editedIngredient);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered cookbook recipe list */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cRecipe\u003e getFilteredCookbookRecipeList();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Updates the filter of the filtered cookbook recipe list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void updateFilteredCookbookRecipeList(Predicate\u003cRecipe\u003e predicate);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered inventory ingredient list */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredInventoryIngredientList();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Updates the filter of the filtered inventory ingredient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void updateFilteredInventoryIngredientList(Predicate\u003cIngredient\u003e predicate);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /** Returns an unmodifiable view of the filtered cart ingredient list */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getFilteredCartIngredientList();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Updates the filter of the filtered cart ingredient list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void updateFilteredCartIngredientList(Predicate\u003cIngredient\u003e predicate);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    void removeAllCartIngredient();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 145,
      "teo-jun-xiong": 12,
      "-": 93,
      "tzihiang": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Cookbook cookbook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Inventory inventory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final Cart cart;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final FilteredList\u003cRecipe\u003e filteredCookbookRecipes;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final FilteredList\u003cIngredient\u003e filteredInventoryIngredients;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final FilteredList\u003cIngredient\u003e filteredCartIngredients;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Initializes a ModelManager with the given cookbook, inventory, cart, and userPrefs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyCookbook cookbook, ReadOnlyInventory inventory,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            ReadOnlyCart cart, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(cookbook, inventory, cart, userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.fine(\"Initializing with cookbook: \" + cookbook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cookbook \u003d new Cookbook(cookbook);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.inventory \u003d new Inventory(inventory);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cart \u003d new Cart(cart);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        filteredCookbookRecipes \u003d new FilteredList\u003c\u003e(this.cookbook.getRecipeList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        filteredInventoryIngredients \u003d new FilteredList\u003c\u003e(this.inventory.getIngredientList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        filteredCartIngredients \u003d new FilteredList\u003c\u003e(this.cart.getIngredientList());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this(new AddressBook(), new Cookbook(), new Inventory(), new Cart(), new UserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getAddressBookFilePath();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(addressBookFilePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCookbookFilePath() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return userPrefs.getCookbookFilePath();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbookFilePath(Path cookbookFilePath) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cookbookFilePath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCookbookFilePath(cookbookFilePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return userPrefs.getInventoryFilePath();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(inventoryFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setInventoryFilePath(inventoryFilePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCartFilePath() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return userPrefs.getCartFilePath();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartFilePath(Path cartFilePath) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cartFilePath);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCartFilePath(cartFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBook(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook.resetData(addressBook);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbook(ReadOnlyCookbook cookbook) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cookbook.resetData(cookbook);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ReadOnlyCookbook getCookbook() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cookbook;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventory(ReadOnlyInventory inventory) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.inventory.resetData(inventory);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ReadOnlyInventory getInventory() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCart(ReadOnlyCart cart) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cart.resetData(cart);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ReadOnlyCart getCart() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cart;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.hasPerson(person);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean hasCookbookRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(recipe);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cookbook.hasRecipe(recipe);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeCookbookRecipe(Recipe target) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cookbook.removeRecipe(target);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void addCookbookRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cookbook.addRecipe(recipe);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        updateFilteredCookbookRecipeList(PREDICATE_SHOW_ALL_RECIPES);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbookRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cookbook.setRecipe(target, editedRecipe);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean hasInventoryIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventory.hasIngredient(ingredient);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeInventoryIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.removeIngredient(target);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void addInventoryIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.addIngredient(ingredient);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        updateFilteredInventoryIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventory.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean hasCartIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredient);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cart.hasIngredient(ingredient);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void removeCartIngredient(Ingredient target) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.removeIngredient(target);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void addCartIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.addIngredient(ingredient);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        updateFilteredCartIngredientList(PREDICATE_SHOW_ALL_INGREDIENTS);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cart.setIngredient(target, editedIngredient);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        return filteredPersons;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Recipe} backed by the internal list of"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code versionedCookbook}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cRecipe\u003e getFilteredCookbookRecipeList() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return filteredCookbookRecipes;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void updateFilteredCookbookRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        filteredCookbookRecipes.setPredicate(predicate);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Ingredient} backed by the internal list of"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code versionedInventory}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredInventoryIngredientList() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return filteredInventoryIngredients;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void updateFilteredInventoryIngredientList(Predicate\u003cIngredient\u003e predicate) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        filteredInventoryIngredients.setPredicate(predicate);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Ingredient} backed by the internal list of"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code versionedCart}"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public ObservableList\u003cIngredient\u003e getFilteredCartIngredientList() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return filteredCartIngredients;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void updateFilteredCartIngredientList(Predicate\u003cIngredient\u003e predicate) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        filteredCartIngredients.setPredicate(predicate);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void removeAllCartIngredient() {};"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 168,
      "teo-jun-xiong": 17,
      "shanecsj": 3,
      "-": 156,
      "tzihiang": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyCart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Unmodifiable view of a shopping cart"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface ReadOnlyCart extends ReadOnlyIngredientList {}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyCookbook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Unmodifiable view of a cookbook"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface ReadOnlyCookbook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an unmodifiable view of the recipe list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * This list will not contain any duplicate recipes."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cRecipe\u003e getRecipeList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyIngredientList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Unmodifiable view of an ingredient list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface ReadOnlyIngredientList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an unmodifiable view of the ingredients list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * This list will not contain any duplicate ingredients."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    ObservableList\u003cIngredient\u003e getIngredientList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyInventory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Unmodifiable view of an inventory"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface ReadOnlyInventory extends ReadOnlyIngredientList {}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCookbookFilePath();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCartFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 3,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path cookbookFilePath \u003d Paths.get(\"data\" , \"cookbook.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path inventoryFilePath \u003d Paths.get(\"data\" , \"inventory.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path cartFilePath \u003d Paths.get(\"data\" , \"cart.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        setAddressBookFilePath(newUserPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setCookbookFilePath(newUserPrefs.getCookbookFilePath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setInventoryFilePath(newUserPrefs.getInventoryFilePath());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        setCartFilePath(newUserPrefs.getCartFilePath());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCookbookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cookbookFilePath;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbookFilePath(Path cookbookFilePath) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cookbookFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cookbookFilePath \u003d cookbookFilePath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventoryFilePath;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(inventoryFilePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.inventoryFilePath \u003d inventoryFilePath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCartFilePath() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cartFilePath;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartFilePath(Path cartFilePath) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cartFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cartFilePath \u003d cartFilePath;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 addressBookFilePath.equals(o.addressBookFilePath)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 cookbookFilePath.equals(o.cookbookFilePath)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 inventoryFilePath.equals(o.inventoryFilePath)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 cartFilePath.equals(o.cartFilePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, cookbookFilePath, inventoryFilePath, cartFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + cookbookFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + inventoryFilePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + cartFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 41,
      "-": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/Ingredient.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents an ingredient."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class Ingredient {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final IngredientName ingredientName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final IngredientQuantity ingredientQuantity;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient(IngredientName ingredientName, IngredientQuantity ingredientQuantity) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientName \u003d ingredientName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientQuantity \u003d ingredientQuantity;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientName getName() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientQuantity getQuantity() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredientQuantity;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if both ingredients have the same name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * This defines a weaker notion of equality between two ingredients."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean isSameIngredient(Ingredient otherIngredient) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (otherIngredient \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return otherIngredient !\u003d null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 otherIngredient.getName().equals(getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if both ingredients have the same name and quantity."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * This defines a stronger notion of equality between two ingredients."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!(other instanceof Ingredient)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient otherIngredient \u003d (Ingredient) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return otherIngredient.getName().equals(getName())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 otherIngredient.getQuantity().equals(getQuantity());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return Objects.hash(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"%s (%s)\", ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/IngredientName.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents the name of an ingredient."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidIngredientName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            \"Ingredient names should only contain alphanumeric characters, spaces, and punctuation, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The first character of the ingredient name must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum}\\\\-\u0027% ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public final String ingredientName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs an {@code IngredientName}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param ingredientName A valid ingredient name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientName(String ingredientName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredientName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(isValidIngredientName(ingredientName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientName \u003d ingredientName.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if a given string is a valid ingredient name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static boolean isValidIngredientName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredientName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                || (other instanceof IngredientName // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 ingredientName.toLowerCase()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                        .equals(((IngredientName) other).ingredientName.toLowerCase())); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return ingredientName.toLowerCase().hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/IngredientQuantity.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.fraction.MixedFraction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents the quantity of an ingredient."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientQuantity {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            \"Ingredient quantities should only contain a value and a unit, where the value can be \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"whole numbers, decimals, or fractions, and the unit should only contain alphabets\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String DECIMAL_REGEX \u003d \"(([\\\\p{Digit}]+(\\\\.[\\\\p{Digit}]+)?)|(\\\\.[\\\\p{Digit}]+))\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String FRACTION_REGEX \u003d \"[\\\\p{Digit}]+( +[\\\\p{Digit}]+)?/[\\\\p{Digit}]+\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String UNIT_REGEX \u003d \"[\\\\p{Alpha}][\\\\p{Alpha} ]*\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient quantity must consist of a whole number, decimal, or fraction, and an optional unit."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d String.format(\"((%s)|(%s)) *(%s)?\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            DECIMAL_REGEX, FRACTION_REGEX, UNIT_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Pattern DECIMAL_PATTERN \u003d Pattern.compile(DECIMAL_REGEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Pattern FRACTION_PATTERN \u003d Pattern.compile(FRACTION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Pattern UNIT_PATTERN \u003d Pattern.compile(UNIT_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final int LARGEST_DENOMINATOR \u003d 6;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public final Number value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public final String unit;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs an {@code IngredientQuantity}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param ingredientQuantity A valid ingredient quantity."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientQuantity(String ingredientQuantity) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(ingredientQuantity);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(isValidIngredientQuantity(ingredientQuantity), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.value \u003d parseValue(ingredientQuantity);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.unit \u003d parseUnit(ingredientQuantity);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    IngredientQuantity(Number value, String unit) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(value, unit);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.unit \u003d unit;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if a given string is a valid ingredient quantity."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static boolean isValidIngredientQuantity(String test) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if the specified ingredient quantity can be added to or subtracted from this ingredient quantity."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean isCompatibleWith(IngredientQuantity other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return this.unit.equals(other.unit);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Adds the specified ingredient quantity to the ingredient quantity, if the ingredient quantities are compatible."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param other the ingredient quantity to be added."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a new ingredient quantity with the specified ingredient quantity added."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientQuantity add(IngredientQuantity other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(isCompatibleWith(other));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Number newValue \u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (this.value instanceof BigDecimal \u0026\u0026 other.value instanceof BigDecimal) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((BigDecimal) this.value).add((BigDecimal) other.value);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof MixedFraction \u0026\u0026 other.value instanceof MixedFraction) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((MixedFraction) this.value).add((MixedFraction) other.value);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof BigDecimal \u0026\u0026 other.value instanceof MixedFraction) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d MixedFraction.getFromBigDecimal(((BigDecimal) this.value)).add((MixedFraction) other.value);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof MixedFraction \u0026\u0026 other.value instanceof BigDecimal) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((MixedFraction) this.value).add(MixedFraction.getFromBigDecimal(((BigDecimal) other.value)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (newValue instanceof MixedFraction \u0026\u0026 ((MixedFraction) newValue).getDenominator() \u003e LARGEST_DENOMINATOR) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            MixedFraction mixedFraction \u003d (MixedFraction) newValue;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d new BigDecimal(mixedFraction.getNumerator())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .divide(new BigDecimal(mixedFraction.getDenominator()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert newValue !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new IngredientQuantity(newValue, unit);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Subtracts the specified ingredient quantity from the ingredient quantity, if the ingredient quantities are"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * compatible."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * If the specified ingredient quantity is larger, the value of the ingredient quantity returned will be 0."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param other the ingredient quantity to be subtracted."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return a new ingredient quantity with the specified ingredient quantity subtracted."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientQuantity subtract(IngredientQuantity other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(isCompatibleWith(other));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Number newValue \u003d null;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (this.value instanceof BigDecimal \u0026\u0026 other.value instanceof BigDecimal) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((BigDecimal) this.value).subtract((BigDecimal) other.value);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof MixedFraction \u0026\u0026 other.value instanceof MixedFraction) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((MixedFraction) this.value).subtract((MixedFraction) other.value);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof BigDecimal \u0026\u0026 other.value instanceof MixedFraction) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d MixedFraction.getFromBigDecimal(((BigDecimal) this.value))"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .subtract((MixedFraction) other.value);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (this.value instanceof MixedFraction \u0026\u0026 other.value instanceof BigDecimal) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d ((MixedFraction) this.value)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .subtract(MixedFraction.getFromBigDecimal(((BigDecimal) other.value)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (newValue instanceof MixedFraction \u0026\u0026 ((MixedFraction) newValue).getDenominator() \u003e LARGEST_DENOMINATOR) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            MixedFraction mixedFraction \u003d (MixedFraction) newValue;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            newValue \u003d new BigDecimal(mixedFraction.getNumerator())"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .divide(new BigDecimal(mixedFraction.getDenominator()));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert newValue !\u003d null;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (newValue.doubleValue() \u003c 0) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            newValue \u003d value;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new IngredientQuantity(newValue, unit);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the value of an ingredient\u0027s quantity."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param ingredientQuantity The given string representing an ingredient\u0027s quantity."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return The value of the ingredient\u0027s IngredientQuantity."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static Number parseValue(String ingredientQuantity) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(isValidIngredientQuantity(ingredientQuantity));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Number parsedValue \u003d null;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Matcher decimalMatcher \u003d DECIMAL_PATTERN.matcher(ingredientQuantity);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Matcher mixedFractionMatcher \u003d FRACTION_PATTERN.matcher(ingredientQuantity);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (mixedFractionMatcher.find()) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            parsedValue \u003d MixedFraction.parseUnsignedMixedFraction(mixedFractionMatcher.group().trim());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (decimalMatcher.find()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            parsedValue \u003d new BigDecimal(decimalMatcher.group().trim());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (parsedValue instanceof MixedFraction"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 ((MixedFraction) parsedValue).getDenominator() \u003e LARGEST_DENOMINATOR) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            parsedValue \u003d ((MixedFraction) parsedValue).doubleValue();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assert parsedValue !\u003d null;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return parsedValue;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the unit of an ingredient\u0027s quantity."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param ingredientQuantity The given string representing an ingredient\u0027s quantity."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @return The unit of the ingredient\u0027s IngredientQuantity."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static String parseUnit(String ingredientQuantity) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        checkArgument(isValidIngredientQuantity(ingredientQuantity));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Matcher unitMatcher \u003d UNIT_PATTERN.matcher(ingredientQuantity);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (unitMatcher.find()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return unitMatcher.group().trim();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (unit.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return value.toString();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return String.format(\"%s %s\", value, unit);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                || (other instanceof IngredientQuantity // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 value.equals(((IngredientQuantity) other).value)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 unit.equals(((IngredientQuantity) other).unit));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return Objects.hash(value, unit);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 204,
      "teo-jun-xiong": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/UniqueIngredientList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.exceptions.DuplicateIngredientException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * A list of ingredients that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * An ingredient is considered unique by comparing using {@code Ingredient#isSameIngredient(Ingredient)}. As such,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * adding and updating of ingredients uses Ingredient#isSameIngredient(Ingredient) for equality so as to ensure"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * that the ingredient being added or updated is unique in terms of identity in the UniqueIngredientList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class UniqueIngredientList implements Iterable\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private final ObservableList\u003cIngredient\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Checks if otherIngredient already exists in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @param otherIngredient"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @return true is otherIngredient exists, false otherwise."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean contains(Ingredient otherIngredient) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(otherIngredient);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return internalList.stream().anyMatch(otherIngredient::isSameIngredient);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Returns the ingredient with the same name {@code toFind}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public Ingredient get(Ingredient toFind) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(toFind);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return internalList.stream().filter(toFind::isSameIngredient).findFirst().get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Adds an ingredient to the list if it does not yet exist."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void add(Ingredient toAdd) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new DuplicateIngredientException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Replaces the ingredient {@code target} in the list with {@code editedIngredient}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient identity of {@code editedIngredient} must not be the same as another existing ingredient in the"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(target, editedIngredient);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!target.isSameIngredient(editedIngredient) \u0026\u0026 contains(editedIngredient)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new DuplicateIngredientException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        internalList.set(index, editedIngredient);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Removes the equivalent ingredient from the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * The ingredient must exist in the list."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove(Ingredient toRemove) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!contains(toRemove)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IngredientNotFoundException();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Ingredient curr \u003d get(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        IngredientQuantity updated \u003d curr.getQuantity().subtract(toRemove.getQuantity());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (updated.equals((curr.getQuantity()))) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            internalList.remove(toRemove);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        setIngredient(toRemove, new Ingredient(curr.getName(), updated));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void setIngredients(UniqueIngredientList replacement) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Replaces the contents of this list with {@code ingredients}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public void setIngredients(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        requireAllNonNull(ingredients);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        if (!ingredientsAreUnique(ingredients)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new DuplicateIngredientException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        internalList.setAll(ingredients);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public ObservableList\u003cIngredient\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public Iterator\u003cIngredient\u003e iterator() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                || (other instanceof UniqueIngredientList // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueIngredientList) other).internalList));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * Checks if all the ingredients given in the list are unique and has no repeats."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @param ingredients"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     * @return true if all ingredients are unique, false otherwise."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private boolean ingredientsAreUnique(List\u003cIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        for (int i \u003d 0; i \u003c ingredients.size() - 1; i++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            for (int j \u003d i + 1; j \u003c ingredients.size(); j++) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                if (ingredients.get(i).isSameIngredient(ingredients.get(j))) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 31,
      "teo-jun-xiong": 19,
      "tzihiang": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/exceptions/DuplicateIngredientException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Returns that the ingredient already exists within the list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class DuplicateIngredientException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public DuplicateIngredientException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(\"The ingredient you are trying to add already exists.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "tzihiang": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ingredient/exceptions/IngredientNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.model.ingredient.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " * Returns that the ingredient is not found within the list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "tzihiang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class IngredientNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    public IngredientNotFoundException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        super(\"Ingredient is not found in the list.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "tzihiang": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public Person(Name name, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireAllNonNull(name, tags);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return Objects.hash(name, tags);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        builder.append(getName()).append(\" Tags: \");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "teo-jun-xiong": 4,
      "-": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/Recipe.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Represents a Recipe in the cookbook."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class Recipe {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final RecipeName name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final RecipeDescription description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final UniqueIngredientList ingredients;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final UniqueStepList steps;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Recipe constructor for only recipe name and description."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Recipe(RecipeName name, RecipeDescription description) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireAllNonNull(name, description);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.steps \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Recipe constructor for optional fields"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Recipe(RecipeName name, RecipeDescription description,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            UniqueIngredientList ingredients, UniqueStepList steps, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireAllNonNull(name, description, ingredients, steps, tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients \u003d ingredients;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.steps \u003d steps;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeName getName() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeDescription getDescription() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public UniqueIngredientList getIngredients() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return ingredients;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public UniqueStepList getSteps() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return steps;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if both recipes have the same name."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * This defines a weaker notion of equality between two recipes."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean isSameRecipe(Recipe otherRecipe) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (otherRecipe \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return otherRecipe !\u003d null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                \u0026\u0026 otherRecipe.getName().equals(getName());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Returns true if both recipes have the same identity and data fields."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * This defines a stronger notion of equality between two recipes."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!(other instanceof Recipe)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Recipe otherRecipe \u003d (Recipe) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return otherRecipe.getName().equals(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 otherRecipe.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 otherRecipe.getIngredients().equals(getIngredients())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 otherRecipe.getSteps().equals(getSteps())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 otherRecipe.getTags().equals(getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return Objects.hash(name, description, ingredients, steps, tags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .append(\" Description: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .append(getDescription())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .append(\" Ingredients: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .append(getIngredients())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .append(\" Preparation Steps: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .append(getSteps())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 16,
      "shanecsj": 113,
      "hans555": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeDescription.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Represents a Recipe\u0027s description in the cookbook."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRecipeDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeDescription {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            \"Recipe descriptions should only contain alphanumeric characters, spaces and punctuations, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public final String fullRecipeDescription;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param description A valid Description."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeDescription(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        checkArgument(isValidRecipeDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        fullRecipeDescription \u003d description;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Returns true if a given string is a valid recipe Description."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static boolean isValidRecipeDescription(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return fullRecipeDescription;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof RecipeDescription // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 fullRecipeDescription.equals(((RecipeDescription) other).fullRecipeDescription)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return fullRecipeDescription.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeName.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Represents a Recipe\u0027s name in the cookbook."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRecipeName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeName {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            \"Recipe names should only contain alphanumeric characters, spaces and punctuations, \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    + \"and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public final String fullRecipeName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeName(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        checkArgument(isValidRecipeName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        fullRecipeName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Returns true if a given string is a valid recipe name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static boolean isValidRecipeName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return fullRecipeName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof RecipeName // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 fullRecipeName.equals(((RecipeName) other).fullRecipeName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return fullRecipeName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/RecipeNameContainsKeywordsPredicate.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Tests that a {@code Recipe}\u0027s {@code RecipeName} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeNameContainsKeywordsPredicate implements Predicate\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public RecipeNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean test(Recipe recipe) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(recipe.getName().fullRecipeName, keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                || (other instanceof RecipeNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                \u0026\u0026 keywords.equals(((RecipeNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/UniqueRecipeList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * A list of recipes that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A recipe is considered unique by comparing using {@code Recipe#isSameRecipe(Recipe)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * recipes uses Recipe#isSameRecipe(Recipe) for equality so as to ensure that the recipe being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * unique in terms of identity in the UniqueRecipeList. However, the removal of a recipe uses Recipe#equals(Object) so"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * as to ensure that the recipe with exactly the same fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * @see Recipe#isSameRecipe(Recipe)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class UniqueRecipeList implements Iterable\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final ObservableList\u003cRecipe\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Checks if otherRecipe already exists in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @param otherRecipe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @return true is otherRecipe exists, false otherwise."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean contains(Recipe otherRecipe) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(otherRecipe);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return internalList.stream().anyMatch(otherRecipe::isSameRecipe);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Adds an recipe to the list if it does not yet exist."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void add(Recipe toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Replaces the recipe {@code target} in the list with {@code editedRecipe}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * The recipe identity of {@code editedRecipe} must not be the same as another existing recipe in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireAllNonNull(target, editedRecipe);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!target.isSameRecipe(editedRecipe) \u0026\u0026 contains(editedRecipe)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        internalList.set(index, editedRecipe);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Replaces all the current recipes in UniqueRecipeList and replaces it with {@code replacement}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * {@code replacement} must exist."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @param replacement"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipes(UniqueRecipeList replacement) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Replaces the contents of this list with {@code recipes}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * {@code recipes} must not contain duplicate recipes."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipes(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireAllNonNull(recipes);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!recipesAreUnique(recipes)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new DuplicateRecipeException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        internalList.setAll(recipes);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Removes the recipe from the list, provided it exists."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void remove(Recipe toRemove) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new RecipeNotFoundException();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public ObservableList\u003cRecipe\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public Iterator\u003cRecipe\u003e iterator() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns true if {@code recipes} contains only unique recipes."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private boolean recipesAreUnique(List\u003cRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (int i \u003d 0; i \u003c recipes.size() - 1; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c recipes.size(); j++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                if (recipes.get(i).isSameRecipe(recipes.get(j))) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                || (other instanceof UniqueRecipeList // instanceof handles nulls"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueRecipeList) other).internalList));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 8,
      "teo-jun-xiong": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/DuplicateRecipeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Signals that the operation will result in duplicate Recipes (Recipes are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class DuplicateRecipeException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public DuplicateRecipeException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        super(\"Operation would result in duplicate recipes\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/recipe/exceptions/RecipeNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " *  Returns that the recipe is not found within the list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(\"Recipe is not found in the list.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/step/Step.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Represents a cooking step in a recipe"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidStep(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class Step {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "            \"Step should only contain sentences, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The first character of the step must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Graph}][\\\\p{Graph} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public final String stepDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Constructs a {@code Step}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * @param step A valid step."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Step(String step) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(step);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "        checkArgument(isValidStep(step), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        stepDescription \u003d step;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns true if a given string is a valid step."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public static boolean isValidStep(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public String getStepDescription() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return stepDescription;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return stepDescription;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof Step // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 stepDescription.equals(((Step) other).stepDescription)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return stepDescription.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 4,
      "hans555": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/step/UniqueStepList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.exceptions.DuplicateStepException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.exceptions.StepNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": " * A list of steps that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": " * A step is considered unique by comparing using {@code Step#equals(Object)}. As such, adding and updating of"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Steps uses Step#equals(Object) for equality so as to ensure that the step being added, removed or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": " * unique in terms of identity in the UniqueStepList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": " * @see Step#equals(Object)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class UniqueStepList implements Iterable\u003cStep\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final ObservableList\u003cStep\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final ObservableList\u003cStep\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns true if the list contains an equivalent step as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean contains(Step toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return internalList.stream().anyMatch(step -\u003e step.equals(toCheck));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Adds a step to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The step must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void add(Step toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new DuplicateStepException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Adds a step to given index in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The step must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void add(Index index, Step toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireAllNonNull(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new DuplicateStepException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "        internalList.add(index.getZeroBased(), toAdd);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Replaces the step {@code target} in the list with {@code editedStep}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The stepDescription of {@code editedStep} must not be the same as another existing step in the list."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep(Step target, Step editedStep) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireAllNonNull(target, editedStep);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new StepNotFoundException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!target.equals(editedStep) \u0026\u0026 contains(editedStep)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new DuplicateStepException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "        internalList.set(index, editedStep);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Removes the equivalent step from the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The step must exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void remove(Step toRemove) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new StepNotFoundException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Removes the step from given index  in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * The step must exist in the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Step remove(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hans555"
        },
        "content": "        Step toRemove \u003d internalList.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return toRemove;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps(UniqueStepList replacement) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hans555"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Replaces the contents of this list with {@code Step}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * {@code Step} must not contain duplicate persons."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps(List\u003cStep\u003e steps) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hans555"
        },
        "content": "        requireAllNonNull(steps);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hans555"
        },
        "content": "        if (!stepsAreUnique(steps)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hans555"
        },
        "content": "            throw new DuplicateStepException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hans555"
        },
        "content": "        internalList.setAll(steps);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public ObservableList\u003cStep\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public Iterator\u003cStep\u003e iterator() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hans555"
        },
        "content": "                || (other instanceof UniqueStepList // instanceof handles nulls"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hans555"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueStepList) other).internalList));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hans555"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hans555"
        },
        "content": "     * Returns true if {@code Step} contains only unique steps."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hans555"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private boolean stepsAreUnique(List\u003cStep\u003e steps) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "hans555"
        },
        "content": "        for (int i \u003d 0; i \u003c steps.size() - 1; i++) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "hans555"
        },
        "content": "            for (int j \u003d i + 1; j \u003c steps.size(); j++) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "hans555"
        },
        "content": "                if (steps.get(i).equals(steps.get(j))) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "hans555"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hans555"
        },
        "content": "                }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hans555"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hans555"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hans555"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 160
    }
  },
  {
    "path": "src/main/java/seedu/address/model/step/exceptions/DuplicateStepException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Signals that the operation will result in duplicate Steps (Steps are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": " * stepDescription)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class DuplicateStepException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public DuplicateStepException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "        super(\"Operation would result in duplicate step\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/step/exceptions/StepNotFoundException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": " * Signals that the operation is unable to find the specified step."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class StepNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public StepNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "        super(\"Step not found\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Contains utility methods for populating {@code CookingPapa} with sample data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Person(new Name(\"David Li\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static ReadOnlyCookbook getSampleCookbook() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cookbook sampleCookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (Recipe sampleRecipe : getSampleRecipes()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            sampleCookbook.addRecipe(sampleRecipe);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return sampleCookbook;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static ReadOnlyInventory getSampleInventory() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory sampleInventory \u003d new Inventory();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (Ingredient sampleIngredient : getSampleIngredients()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            sampleInventory.addIngredient(sampleIngredient);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return sampleInventory;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static ReadOnlyCart getSampleCart() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart sampleCart \u003d new Cart();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (Ingredient sampleIngredient : getSampleIngredients()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            sampleCart.addIngredient(sampleIngredient);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return sampleCart;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static Ingredient[] getSampleIngredients() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new Ingredient[] {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Eggs\"), new IngredientQuantity(\"10\")),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Parmesan\"), new IngredientQuantity(\"1 kg\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Bacon\"), new IngredientQuantity(\"10 pieces\")),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Linguine\"), new IngredientQuantity(\"250 g\")),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Olive oil\"), new IngredientQuantity(\"600 ml\")),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Black pepper\"), new IngredientQuantity(\"300 g\")),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Salt\"), new IngredientQuantity(\"500 g\")),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Garlic\"), new IngredientQuantity(\"5 cloves\")),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Dried chili flakes\"), new IngredientQuantity(\"50 g\")),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Butter\"), new IngredientQuantity(\"3 sticks\")),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Minced beef\"), new IngredientQuantity(\"500 g\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Ingredient(new IngredientName(\"Tomatoes\"), new IngredientQuantity(\"10\"))"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static Recipe[] getSampleRecipes() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new Recipe[]{"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Recipe(new RecipeName(\"Scrambled eggs\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeDescription(\"Gordan Ramsay\u0027s famous creamy and fluffy scrambled eggs.\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new UniqueIngredientList(), new UniqueStepList(),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                getTagSet(\"Simple\", \"Celebrity\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Recipe(new RecipeName(\"Carbonara\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeDescription(\"The best dish sold in NUS.\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new UniqueIngredientList(), new UniqueStepList(),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                getTagSet(\"Pasta\", \"Italian\", \"Simple\", \"Creamy\")),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Recipe(new RecipeName(\"Aglio olio\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeDescription(\"A traditional Italian pasta dish made \""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    + \"with garlic in olive oil, and dried red chili flakes.\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new UniqueIngredientList(), new UniqueStepList(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                getTagSet(\"Pasta\", \"Spicy\", \"Italian\", \"Vegan\")),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            new Recipe(new RecipeName(\"Spaghetti bolognese\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new RecipeDescription(\"Jaime Oliver\u0027s great version of the classic Italian Bolognese.\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new UniqueIngredientList(), new UniqueStepList(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                getTagSet(\"Pasta\", \"Tomatoes\", \"Celebrity\"))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        };"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 23,
      "teo-jun-xiong": 56,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CartStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Cart}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface CartStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCartFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns Cart data as a {@link ReadOnlyCart}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCart\u003e readCart() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #getCartFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCart\u003e readCart(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Saves the given {@link ReadOnlyCart} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param cart cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCart(ReadOnlyCart cart) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #saveCart(ReadOnlyCart)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCart(ReadOnlyCart cart, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CookbookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Cookbook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface CookbookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCookbookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns Cookbook data as a {@link ReadOnlyCookbook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCookbook\u003e readCookbook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #getCookbookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCookbook\u003e readCookbook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Saves the given {@link ReadOnlyCookbook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param cookbook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCookbook(ReadOnlyCookbook cookbook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #saveCookbook(ReadOnlyCookbook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCookbook(ReadOnlyCookbook cookbook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/InventoryStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Represents a storage for {@link seedu.address.model.Inventory}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface InventoryStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns Inventory data as a {@link ReadOnlyInventory}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #getInventoryFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Saves the given {@link ReadOnlyInventory} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param inventory cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @see #saveInventory(ReadOnlyInventory)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedIngredient.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * Jackson-friendly version of {@link Ingredient}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class JsonAdaptedIngredient {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Ingredient\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final String quantity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a {@code JsonAdaptedIngredient} with the given {@code name} and {@code quantity}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonAdaptedIngredient(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            @JsonProperty(\"quantity\") String quantity) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.quantity \u003d quantity;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts a given {@code Ingredient} into this class for Jackson use."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonAdaptedIngredient(Ingredient source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        quantity \u003d source.getQuantity().toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts this Jackson-friendly adapted ingredient object into the model\u0027s {@code Ingredient} object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ingredient."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    IngredientName.class.getSimpleName()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (quantity \u003d\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    IngredientQuantity.class.getSimpleName()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (!IngredientName.isValidIngredientName(name)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IllegalValueException(IngredientName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } else if (!IngredientQuantity.isValidIngredientQuantity(quantity)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new IllegalValueException(IngredientQuantity.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final IngredientName modelIngredientName \u003d new IngredientName(name);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        final IngredientQuantity modelIngredientQuantity \u003d new IngredientQuantity(quantity);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Ingredient(modelIngredientName, modelIngredientQuantity);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedPerson.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Person}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedPerson {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public JsonAdaptedPerson(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Person} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted person object into the model\u0027s {@code Person} object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new Person(modelName, modelTags);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 2,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedRecipe.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ingredient.UniqueIngredientList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.step.UniqueStepList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * Jackson-friendly version of {@link Recipe}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "class JsonAdaptedRecipe {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Recipe\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INGREDIENT \u003d \"Recipe contains duplicate ingredient(s).\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_STEP \u003d \"Recipe contains duplicate step(s).\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final String recipeName;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final String recipeDescription;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final List\u003cJsonAdaptedStep\u003e steps \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructs a {@code JsonAdaptedRecipe} with the given recipe details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public JsonAdaptedRecipe(@JsonProperty(\"recipeName\") String recipeName,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                             @JsonProperty(\"recipeDescription\") String recipeDescription,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                             @JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                             @JsonProperty(\"steps\") List\u003cJsonAdaptedStep\u003e steps,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                             @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.recipeName \u003d recipeName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.recipeDescription \u003d recipeDescription;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (ingredients !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (steps !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            this.steps.addAll(steps);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Converts a given {@code Recipe} into this class for Jackson use."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public JsonAdaptedRecipe(Recipe source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        recipeName \u003d source.getName().fullRecipeName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        recipeDescription \u003d source.getDescription().fullRecipeDescription;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        ingredients.addAll(source.getIngredients().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        steps.addAll(source.getSteps().asUnmodifiableObservableList().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .map(JsonAdaptedStep::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Converts this Jackson-friendly adapted recipe object into the model\u0027s {@code Recipe} object."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted recipe."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Recipe toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final List\u003cTag\u003e recipeTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            recipeTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (recipeName \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, RecipeName.class.getSimpleName()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!RecipeName.isValidRecipeName(recipeName)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new IllegalValueException(RecipeName.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (recipeDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new IllegalValueException(String.format("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                    MISSING_FIELD_MESSAGE_FORMAT, RecipeDescription.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        if (!RecipeDescription.isValidRecipeDescription(recipeDescription)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new IllegalValueException(RecipeDescription.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final RecipeName modelName \u003d new RecipeName(recipeName);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final RecipeDescription modelDescription \u003d new RecipeDescription(recipeDescription);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final UniqueIngredientList modelIngredientList \u003d getModelIngredientList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final UniqueStepList modelStepList \u003d getModelStepList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(recipeTags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return new Recipe(modelName, modelDescription, modelIngredientList, modelStepList, modelTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    * Converts Jackson-friendly adapted list of Ingredient objects into the model\u0027s {@code UniqueIngredientList} object."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    * @throws IllegalValueException if there were any data constraints violated in the adapted ingredient list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private UniqueIngredientList getModelIngredientList() throws IllegalValueException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final UniqueIngredientList modelIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        for (JsonAdaptedIngredient jsonAdaptedIngredient : ingredients) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Ingredient ingredient \u003d jsonAdaptedIngredient.toModelType();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (modelIngredientList.contains(ingredient)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INGREDIENT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            modelIngredientList.add(ingredient);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return modelIngredientList;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Converts Jackson-friendly adapted list of Step objects into the model\u0027s {@code UniqueStepList} object."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted step list."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private UniqueStepList getModelStepList() throws IllegalValueException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        final UniqueStepList modelStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        for (JsonAdaptedStep jsonAdaptedStep : steps) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Step step \u003d jsonAdaptedStep.toModelType();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (modelStepList.contains(step)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_STEP);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            modelStepList.add(step);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return modelStepList;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 146
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedStep.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Jackson-friendly version of {@link Step}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "class JsonAdaptedStep {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Step\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final String stepDescription;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Constructs a {@code JsonAdaptedStep} with the given {@code stepDescription}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public JsonAdaptedStep(String stepDescription) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.stepDescription \u003d stepDescription;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Converts a given {@code Step} into this class for Jackson use."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public JsonAdaptedStep(Step source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        stepDescription \u003d source.getStepDescription();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public String getStepDescription() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return stepDescription;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Converts this Jackson-friendly adapted ingredient object into the model\u0027s {@code Ingredient} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted ingredient."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public Step toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (stepDescription \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \"step description\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        } else if (!Step.isValidStep(stepDescription)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            throw new IllegalValueException(Step.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new Step(stepDescription);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCartStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A class to access Cart data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonCartStorage implements CartStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCartStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonCartStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCartFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCart\u003e readCart() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readCart(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #readCart()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCart\u003e readCart(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cJsonSerializableCart\u003e jsonCart \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                filePath, JsonSerializableCart.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!jsonCart.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.of(jsonCart.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart(ReadOnlyCart cart) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveCart(cart, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #saveCart(ReadOnlyCart)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart(ReadOnlyCart cart, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cart);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCart(cart), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonCookbookStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A class to access Cookbook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonCookbookStorage implements CookbookStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonCookbookStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonCookbookStorage(Path filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCookbookFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCookbook\u003e readCookbook() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readCookbook(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #readCookbook()}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCookbook\u003e readCookbook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCookbook(ReadOnlyCookbook cookbook) throws IOException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveCookbook(cookbook, filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #saveCookbook(ReadOnlyCookbook)}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCookbook(ReadOnlyCookbook cookbook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(cookbook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableCookbook(cookbook), filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 66,
      "shanecsj": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonInventoryStorage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A class to access Inventory data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonInventoryStorage implements InventoryStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonInventoryStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonInventoryStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readInventory(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #readInventory()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Optional\u003cJsonSerializableInventory\u003e jsonInventory \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                filePath, JsonSerializableInventory.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        if (!jsonInventory.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            return Optional.of(jsonInventory.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveInventory(inventory, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Similar to {@link #saveInventory(ReadOnlyInventory)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(inventory);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableInventory(inventory), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCart.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * An Immutable Cart that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "@JsonRootName(value \u003d \"cart\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class JsonSerializableCart {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INGREDIENT \u003d \"Cart contains duplicate ingredient(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a {@code JsonSerializableCart} with the given ingredients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonSerializableCart(@JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts a given {@code ReadOnlyCart} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableCart}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonSerializableCart(ReadOnlyCart source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.addAll(source.getIngredientList()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts this cart into the model\u0027s {@code Cart} object."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Cart toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart cart \u003d new Cart();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (JsonAdaptedIngredient jsonAdaptedIngredient : ingredients) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Ingredient ingredient \u003d jsonAdaptedIngredient.toModelType();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (cart.hasIngredient(ingredient)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INGREDIENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            cart.addIngredient(ingredient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cart;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableCookbook.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " * An Immutable Cookbook that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "@JsonRootName(value \u003d \"cookbook\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "class JsonSerializableCookbook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_RECIPE \u003d \"Recipe list contains duplicate recipe(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    private final List\u003cJsonAdaptedRecipe\u003e recipes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Constructs a {@code JsonSerializableAddressBook} with the given recipes."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public JsonSerializableCookbook(@JsonProperty(\"recipes\") List\u003cJsonAdaptedRecipe\u003e recipes) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        this.recipes.addAll(recipes);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Converts a given {@code ReadOnlyAddressBook} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAddressBook}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public JsonSerializableCookbook(ReadOnlyCookbook source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        recipes.addAll(source.getRecipeList().stream().map(JsonAdaptedRecipe::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * Converts this address book into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public Cookbook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        Cookbook cookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        for (JsonAdaptedRecipe jsonAdaptedRecipe : recipes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            Recipe recipe \u003d jsonAdaptedRecipe.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            if (cookbook.hasRecipe(recipe)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_RECIPE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            cookbook.addRecipe(recipe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        return cookbook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableInventory.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * An Immutable Inventory that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "@JsonRootName(value \u003d \"inventory\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "class JsonSerializableInventory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_INGREDIENT \u003d \"Inventory contains duplicate ingredient(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final List\u003cJsonAdaptedIngredient\u003e ingredients \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Constructs a {@code JsonSerializableInventory} with the given ingredients."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonSerializableInventory(@JsonProperty(\"ingredients\") List\u003cJsonAdaptedIngredient\u003e ingredients) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredients.addAll(ingredients);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts a given {@code ReadOnlyInventory} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableInventory}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public JsonSerializableInventory(ReadOnlyInventory source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        System.out.println(source.getIngredientList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredients.addAll(source.getIngredientList()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .map(JsonAdaptedIngredient::new)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Converts this inventory into the model\u0027s {@code Inventory} object."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Inventory toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (JsonAdaptedIngredient jsonAdaptedIngredient : ingredients) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            Ingredient ingredient \u003d jsonAdaptedIngredient.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            if (inventory.hasIngredient(ingredient)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_INGREDIENT);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            inventory.addIngredient(ingredient);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 63,
      "teo-jun-xiong": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public interface Storage extends CookbookStorage, InventoryStorage, CartStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCookbookFilePath();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getInventoryFilePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Path getCartFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCookbook\u003e readCookbook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCookbook(ReadOnlyCookbook cookbook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveInventory(ReadOnlyInventory inventory) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    Optional\u003cReadOnlyCart\u003e readCart() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    void saveCart(ReadOnlyCart cart) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 25,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private CookbookStorage cookbookStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private InventoryStorage inventoryStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private CartStorage cartStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public StorageManager(CookbookStorage cookbookStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            InventoryStorage inventoryStorage, CartStorage cartStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cookbookStorage \u003d cookbookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.inventoryStorage \u003d inventoryStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.cartStorage \u003d cartStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Cookbook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCookbookFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cookbookStorage.getCookbookFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCookbook\u003e readCookbook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readCookbook(cookbookStorage.getCookbookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCookbook\u003e readCookbook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cookbookStorage.readCookbook(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCookbook(ReadOnlyCookbook cookbook) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveCookbook(cookbook, cookbookStorage.getCookbookFilePath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCookbook(ReadOnlyCookbook cookbook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cookbookStorage.saveCookbook(cookbook, filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Inventory methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventoryStorage.getInventoryFilePath();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readInventory(inventoryStorage.getInventoryFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyInventory\u003e readInventory(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventoryStorage.readInventory(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveInventory(inventory, inventoryStorage.getInventoryFilePath());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventoryStorage.saveInventory(inventory, filePath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Cart methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path getCartFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cartStorage.getCartFilePath();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCart\u003e readCart() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return readCart(cartStorage.getCartFilePath());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Optional\u003cReadOnlyCart\u003e readCart(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cartStorage.readCart(filePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart(ReadOnlyCart cart) throws IOException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        saveCart(cart, cartStorage.getCartFilePath());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart(ReadOnlyCart cart, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cartStorage.saveCart(cart, filePath);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 82,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CartCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * An UI component that displays information of a {@code Cart}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String FXML \u003d \"CartCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public final Ingredient ingredient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CartCard(Ingredient ingredient, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        name.setText(ingredient.getName().ingredientName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        quantity.setText(ingredient.getQuantity().value + \" \" + ingredient.getQuantity().unit);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!(other instanceof CartCard)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        CartCard card \u003d (CartCard) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u0026\u0026 ingredient.equals(card.ingredient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CartPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "// import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "// import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class CartPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String FXML \u003d \"CartPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    // private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private ListView\u003cIngredient\u003e cartListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CartPanel(ObservableList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        cartListView.setItems(ingredientList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        cartListView.setCellFactory(listView -\u003e new CartViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Person} using a {@code PersonCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    class CartViewCell extends ListCell\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        protected void updateItem(Ingredient ingredient, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            super.updateItem(ingredient, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            if (empty || ingredient \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setGraphic(new CartCard(ingredient, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay1920s2-cs2103t-f11-4.github.io/main/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IngredientCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * An UI component that displays information of a {@code UniqueIngredientList}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class IngredientCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String FXML \u003d \"IngredientListCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public final Ingredient ingredient;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label quantity;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public IngredientCard(Ingredient ingredient, int displayedIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.ingredient \u003d ingredient;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        name.setText(ingredient.getName().ingredientName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        quantity.setText(ingredient.getQuantity().value + \" \" + ingredient.getQuantity().unit);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!(other instanceof IngredientCard)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        IngredientCard card \u003d (IngredientCard) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u0026\u0026 ingredient.equals(card.ingredient);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/IngredientListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "// import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "// import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Panel containing the list of ingredients."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class IngredientListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String FXML \u003d \"IngredientListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    // private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private ListView\u003cIngredient\u003e ingredientListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public IngredientListPanel(ObservableList\u003cIngredient\u003e ingredientList) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ingredientListView.setItems(ingredientList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        ingredientListView.setCellFactory(listView -\u003e new IngredientListViewCell());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Custom {@code ListCell} displays the graphics of a {@code UniqueIngredientList} using {@code IngredientCard}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    class IngredientListViewCell extends ListCell\u003cIngredient\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        protected void updateItem(Ingredient ingredient, boolean empty) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            super.updateItem(ingredient, empty);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            if (empty || ingredient \u003d\u003d null) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setGraphic(new IngredientCard(ingredient, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private RecipeListPanel recipeListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private IngredientListPanel inventoryIngredientListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private CartPanel cartIngredientListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private StackPane recipeListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private StackPane inventoryIngredientListPanelPlaceHolder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private StackPane cartIngredientListPanelPlaceHolder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        recipeListPanel \u003d new RecipeListPanel(logic.getFilteredCookbookRecipeList());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListPanelPlaceholder.getChildren().add(recipeListPanel.getRoot());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Temporary, will replace with InventoryIngredientListPanel"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventoryIngredientListPanel \u003d new IngredientListPanel(logic.getFilteredInventoryIngredientList());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        inventoryIngredientListPanelPlaceHolder.getChildren().add(inventoryIngredientListPanel.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // Temporary, will replace with CartIngredientListPanel"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        cartIngredientListPanel \u003d new CartPanel(logic.getFilteredCartIngredientList());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        cartIngredientListPanelPlaceHolder.getChildren().add(cartIngredientListPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getAddressBookFilePath());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeListPanel getRecipeListPanel() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return recipeListPanel;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientListPanel getInventoryIngredientListPanel() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventoryIngredientListPanel;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public CartPanel getCartIngredientListPanel1() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cartIngredientListPanel;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 11,
      "teo-jun-xiong": 17,
      "-": 190
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecipeCard.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * An UI component that displays information of a {@code Recipe}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String FXML \u003d \"RecipeListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String DESCRIPTION_OFFSET \u003d \"    \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public final Recipe recipe;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeCard(Recipe recipe, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipe \u003d recipe;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        name.setText(recipe.getName().fullRecipeName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        description.setText(DESCRIPTION_OFFSET + recipe.getDescription().fullRecipeDescription);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipe.getTags().stream()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        if (!(other instanceof RecipeCard)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        RecipeCard card \u003d (RecipeCard) other;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u0026\u0026 recipe.equals(card.recipe);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/RecipeListPanel.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * Panel containing the list of recipes."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String FXML \u003d \"RecipeListPanel.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    // private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private ListView\u003cRecipe\u003e recipeListView;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeListPanel(ObservableList\u003cRecipe\u003e personList) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListView.setItems(personList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeListView.setCellFactory(listView -\u003e new RecipeListViewCell());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Recipe} using a {@code RecipeCard}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    static class RecipeListViewCell extends ListCell\u003cRecipe\u003e {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        protected void updateItem(Recipe recipe, boolean empty) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            super.updateItem(recipe, empty);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            if (empty || recipe \u003d\u003d null) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                setGraphic(new RecipeCard(recipe, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/gordon_ramsay_icon.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/CartCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003cBorderPane minHeight\u003d\"30.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cleft\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" maxWidth\u003d\"30.0\" minWidth\u003d\"30.0\" prefWidth\u003d\"30.0\" styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/left\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003ccenter\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" maxWidth\u003d\"195.0\" minWidth\u003d\"195.0\" prefWidth\u003d\"195.0\" styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       text\u003d\"\\$first\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/center\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cright\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" maxWidth\u003d\"90\" minWidth\u003d\"90\" prefWidth\u003d\"90\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       textAlignment\u003d\"RIGHT\" alignment\u003d\"CENTER_RIGHT\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       wrapText\u003d\"true\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/right\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 41
    }
  },
  {
    "path": "src/main/resources/view/CartPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cLabel fx:id\u003d\"header\" styleClass\u003d\"cell_header_label\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "           text\u003d\"                          Your cart\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cListView fx:id\u003d\"cartListView\" HBox.hgrow\u003d\"ALWAYS\" style\u003d\"-fx-background-color: #9E733A;\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 14
    }
  },
  {
    "path": "src/main/resources/view/IngredientListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003cBorderPane minHeight\u003d\"30.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cleft\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" maxWidth\u003d\"30.0\" minWidth\u003d\"30.0\" prefWidth\u003d\"30.0\" styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/left\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003ccenter\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" maxWidth\u003d\"195.0\" minWidth\u003d\"195.0\" prefWidth\u003d\"195.0\" styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       text\u003d\"\\$first\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/center\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cright\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cLabel fx:id\u003d\"quantity\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" maxWidth\u003d\"90\" minWidth\u003d\"90\" prefWidth\u003d\"90\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       textAlignment\u003d\"RIGHT\" alignment\u003d\"CENTER_RIGHT\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                       wrapText\u003d\"true\" HBox.hgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/right\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 41
    }
  },
  {
    "path": "src/main/resources/view/IngredientListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cLabel fx:id\u003d\"header\" styleClass\u003d\"cell_header_label\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "           text\u003d\"                     Your inventory\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cListView fx:id\u003d\"ingredientListView\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/VBox\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 14
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "         title\u003d\"Cooking Papa\" minWidth\u003d\"1200\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003cImage url\u003d\"@/images/gordon_ramsay_icon.png\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\"/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cleft\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cVBox\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                       minWidth\u003d\"800\" prefWidth\u003d\"800\" maxWidth\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                       minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\" minWidth\u003d\"800\" prefWidth\u003d\"800\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                       maxWidth\u003d\"800\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cVBox fx:id\u003d\"personList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"800\" prefWidth\u003d\"800\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                  maxWidth\u003d\"800\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"recipeListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/left\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cright\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cVBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                            \u003cVBox fx:id\u003d\"inventoryIngredientList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"390\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                  prefWidth\u003d\"390\" maxWidth\u003d\"390\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"inventoryIngredientListPanelPlaceHolder\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003cVBox fx:id\u003d\"cartIngredientList1\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"390\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                  prefWidth\u003d\"390\" maxWidth\u003d\"390\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003cpadding\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                    \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                                \u003c/padding\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                                \u003cStackPane fx:id\u003d\"cartIngredientListPanelPlaceHolder\" HBox.hgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/right\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "gohkh": 3,
      "teo-jun-xiong": 35,
      "-": 54
    }
  },
  {
    "path": "src/main/resources/view/RecipeListCard.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.BorderPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003cVBox minHeight\u003d\"95\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cBorderPane\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cInsets bottom\u003d\"8\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003cleft\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cLabel fx:id\u003d\"id\" maxWidth\u003d\"30.0\" minWidth\u003d\"30.0\" prefWidth\u003d\"30.0\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/Label\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/left\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003ccenter\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003cVBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\"/\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                        \u003cLabel fx:id\u003d\"description\" text\u003d\"\\$second\" wrapText\u003d\"true\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                \u003c/center\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003c/BorderPane\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"tags\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 44
    }
  },
  {
    "path": "src/main/resources/view/RecipeListPanel.fxml",
    "fileType": "fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cLabel fx:id\u003d\"header\" styleClass\u003d\"cell_header_label\" alignment\u003d\"CENTER\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "           text\u003d\"                                                            Your recipes\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    \u003cListView fx:id\u003d\"recipeListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/fraction/MixedFractionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.commons.core.fraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.apache.commons.math3.exception.NullArgumentException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class MixedFractionTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new MixedFraction(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseUnsignedMixedFraction() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // invalid input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(\"\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(\"null\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(\"1\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(\"1 / 2\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NumberFormatException.class, () -\u003e MixedFraction.parseUnsignedMixedFraction(\"0.5\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid input"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(0, MixedFraction.parseUnsignedMixedFraction(\"1/2\").intValue());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.parseUnsignedMixedFraction(\"1/2\").getNumerator());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(2, MixedFraction.parseUnsignedMixedFraction(\"1/2\").getDenominator());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.parseUnsignedMixedFraction(\"1 2/3\").intValue());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(5, MixedFraction.parseUnsignedMixedFraction(\"1 2/3\").getNumerator());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(3, MixedFraction.parseUnsignedMixedFraction(\"1 2/3\").getDenominator());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getFromBigDecimal() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // integer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.getFromBigDecimal(new BigDecimal(\"1\")).intValue());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.getFromBigDecimal(new BigDecimal(\"1\")).getNumerator());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.getFromBigDecimal(new BigDecimal(\"1\")).getDenominator());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // double"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(1, MixedFraction.getFromBigDecimal(new BigDecimal(\"1.2\")).intValue());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(6, MixedFraction.getFromBigDecimal(new BigDecimal(\"1.2\")).getNumerator());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(5, MixedFraction.getFromBigDecimal(new BigDecimal(\"1.2\")).getDenominator());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // negative double"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(-1, MixedFraction.getFromBigDecimal(new BigDecimal(\"-1.2\")).intValue());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(-6, MixedFraction.getFromBigDecimal(new BigDecimal(\"-1.2\")).getNumerator());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(5, MixedFraction.getFromBigDecimal(new BigDecimal(\"-1.2\")).getDenominator());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction a \u003d new MixedFraction(3, 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction b \u003d new MixedFraction(4, 3);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction c \u003d new MixedFraction(-5, 2);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null input"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullArgumentException.class, () -\u003e a.add(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3\", a.add(a).toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 5/6\", a.add(b).toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1\", a.add(c).toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 5/6\", b.add(a).toString());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 2/3\", b.add(b).toString());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1 1/6\", b.add(c).toString());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1\", c.add(a).toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1 1/6\", c.add(b).toString());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-5\", c.add(c).toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void subtract() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction a \u003d new MixedFraction(3, 2);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction b \u003d new MixedFraction(4, 3);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        MixedFraction c \u003d new MixedFraction(-5, 2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null input"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullArgumentException.class, () -\u003e a.subtract(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid input"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0\", a.subtract(a).toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/6\", a.subtract(b).toString());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"4\", a.subtract(c).toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-1/6\", b.subtract(a).toString());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0\", b.subtract(b).toString());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3 5/6\", b.subtract(c).toString());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-4\", c.subtract(a).toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"-3 5/6\", c.subtract(b).toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0\", c.subtract(c).toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/gordon_ramsay_icon.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookAddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonCartStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonCookbookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.storage.JsonInventoryStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCookbookStorage cookbookStorage \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonCookbookStorage(temporaryFolder.resolve(\"cookbook.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonInventoryStorage(temporaryFolder.resolve(\"inventory.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCartStorage cartStorage \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonCartStorage(temporaryFolder.resolve(\"cart.json\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(cookbookStorage, inventoryStorage, cartStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String helpCommand \u003d HelpCommand.COMMAND_CATEGORY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertCommandSuccess(helpCommand, HelpCommand.SHOWING_HELP_MESSAGE, model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Setup LogicManager with JsonCookbookIoExceptionThrowingStub, JsonInventoryIoExceptionThrowingStub,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // and JsonCartIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCookbookStorage cookbookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonCookbookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionCookbook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonInventoryIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionInventory.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCartStorage cartStorage \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonCartIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionCart.json\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        StorageManager storage \u003d new StorageManager(cookbookStorage, inventoryStorage, cartStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Execute cookbook add command"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String cookbookAddCommand \u003d CookbookAddCommand.COMMAND_CATEGORY + \" \" + CookbookAddCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + \" n/Carbonara d/description\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Recipe expectedRecipe \u003d new RecipeBuilder(CARBONARA).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedModel.addCookbookRecipe(expectedRecipe);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertCommandFailure(cookbookAddCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCookbook(), model.getInventory(),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                model.getCart(), new UserPrefs());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static class JsonCookbookIoExceptionThrowingStub extends JsonCookbookStorage {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private JsonCookbookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void saveCookbook(ReadOnlyCookbook cookbook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static class JsonInventoryIoExceptionThrowingStub extends JsonInventoryStorage {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private JsonInventoryIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void saveInventory(ReadOnlyInventory inventory, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static class JsonCartIoExceptionThrowingStub extends JsonCartStorage {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        private JsonCartIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void saveCart(ReadOnlyCart cart, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 79,
      "-": 130
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalCart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalCookbook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCookbook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                getTypicalCart(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 5,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Path getCookbookFilePath() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setCookbookFilePath(Path cookbookFilePath) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Path getInventoryFilePath() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setInventoryFilePath(Path inventoryFilePath) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public Path getCartFilePath() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setCartFilePath(Path cartFilePath) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setCookbook(ReadOnlyCookbook newData) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public ReadOnlyCookbook getCookbook() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setInventory(ReadOnlyInventory newData) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public ReadOnlyInventory getInventory() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setCart(ReadOnlyCart newData) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public ReadOnlyCart getCart() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public boolean hasCookbookRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void removeCookbookRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void addCookbookRecipe(Recipe recipe) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setCookbookRecipe(Recipe target, Recipe editedRecipe) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public boolean hasInventoryIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void removeInventoryIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void addInventoryIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setInventoryIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public boolean hasCartIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void removeCartIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void addCartIngredient(Ingredient ingredient) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void setCartIngredient(Ingredient target, Ingredient editedIngredient) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public ObservableList\u003cRecipe\u003e getFilteredCookbookRecipeList() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void updateFilteredCookbookRecipeList(Predicate\u003cRecipe\u003e predicate) {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public ObservableList\u003cIngredient\u003e getFilteredInventoryIngredientList() {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void updateFilteredInventoryIngredientList(Predicate\u003cIngredient\u003e predicate) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public ObservableList\u003cIngredient\u003e getFilteredCartIngredientList() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        public void updateFilteredCartIngredientList(Predicate\u003cIngredient\u003e predicate) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        public void removeAllCartIngredient() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 112,
      "teo-jun-xiong": 10,
      "shanecsj": 4,
      "-": 212,
      "tzihiang": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalCart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalInventory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalCookbook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCookbook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                getTypicalCart(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalCookbook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                getTypicalCart(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 7,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INGREDIENT_QUANTITY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALID_INGREDIENT_NAME_ALMOND \u003d \"Almonds\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALID_INGREDIENT_NAME_BANANA \u003d \"Bananas\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALID_INGREDIENT_QUANTITY_ALMOND \u003d \"50 g\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String VALID_INGREDIENT_QUANTITY_BANANA \u003d \"3\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INGREDIENT_NAME_DESC_ALMOND \u003d \" \" + PREFIX_INGREDIENT_NAME"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + VALID_INGREDIENT_NAME_ALMOND;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INGREDIENT_NAME_DESC_BANANA \u003d \" \" + PREFIX_INGREDIENT_NAME"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + VALID_INGREDIENT_NAME_BANANA;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INGREDIENT_QUANTITY_DESC_ALMOND \u003d \" \" + PREFIX_INGREDIENT_QUANTITY"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INGREDIENT_QUANTITY_DESC_BANANA \u003d \" \" + PREFIX_INGREDIENT_QUANTITY"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INVALID_INGREDIENT_NAME_DESC \u003d \" \" + PREFIX_INGREDIENT_NAME"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"R!ce\"; // \u0027!\u0027 not allowed in names"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String INVALID_INGREDIENT_QUANTITY_DESC \u003d \" \" + PREFIX_INGREDIENT_QUANTITY"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            + \"*halal\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book, filtered person list and selected person in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 21,
      "-": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalCart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalInventory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalCookbook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCookbook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            getTypicalCart(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCookbook(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                model.getInventory(), model.getCart(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCookbook(), model.getInventory(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                model.getCart(), new UserPrefs());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 9,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalCart;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalInventory;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalCookbook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCookbook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            getTypicalCart(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new Cookbook(model.getCookbook()), new Inventory(model.getInventory()), new Cart(model.getCart()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new Cookbook(model.getCookbook()), new Inventory(model.getInventory()), new Cart(model.getCart()),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new Cookbook(model.getCookbook()), new Inventory(model.getInventory()), new Cart(model.getCart()),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new Cookbook(model.getCookbook()), new Inventory(model.getInventory()), new Cart(model.getCart()),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 20,
      "teo-jun-xiong": 2,
      "-": 165
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalCart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalCookbook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCookbook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            getTypicalCart(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), getTypicalCookbook(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            getTypicalInventory(), getTypicalCart(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 7,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalCart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalInventory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalCookbook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), getTypicalCookbook(), getTypicalInventory(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                getTypicalCart(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getCookbook(), model.getInventory(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                model.getCart(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 7,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB , expectedMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB, expectedMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 3,
      "teo-jun-xiong": 10,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CookingPapaParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.commands.cookbook.CookbookAddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.RecipeBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CookingPapaParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private final CookingPapaParser parser \u003d new CookingPapaParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseCommand_cookbookAdd() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Recipe recipe \u003d new RecipeBuilder().withRecipeName(\"Recipe\").withRecipeDescription(\"test\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        CookbookAddCommand command \u003d (CookbookAddCommand) parser.parseCommand(\"cookbook add n/Recipe d/test\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(new CookbookAddCommand(recipe), command);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_CATEGORY) instanceof ExitCommand);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_CATEGORY + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_CATEGORY) instanceof HelpCommand);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_CATEGORY + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 8,
      "-": 126
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/CookbookTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class CookbookTest {}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(new Cookbook(), new Cookbook(modelManager.getCookbook()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(new Inventory(), new Inventory(modelManager.getInventory()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(new Cart(), new Cart(modelManager.getCart()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCookbookFilePath(Paths.get(\"cookbook/file/path\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setInventoryFilePath(Paths.get(\"inventory/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCartFilePath(Paths.get(\"cart/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCookbookFilePath(Paths.get(\"new/cookbook/file/path\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setInventoryFilePath(Paths.get(\"new/inventory/file/path\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        userPrefs.setCartFilePath(Paths.get(\"new/cart/file/path\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCookbookFilePath(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbookFilePath_validPath_setsCookbookFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Path path \u003d Paths.get(\"cookbook/file/path\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager.setCookbookFilePath(path);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(path, modelManager.getCookbookFilePath());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setInventoryFilePath(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryFilePath_validPath_setsInventoryFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Path path \u003d Paths.get(\"inventory/file/path\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager.setInventoryFilePath(path);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(path, modelManager.getInventoryFilePath());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setCartFilePath(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartFilePath_validPath_setsCartFilePath() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Path path \u003d Paths.get(\"cart/file/path\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager.setCartFilePath(path);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(path, modelManager.getCartFilePath());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasCookbookRecipe_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasCookbookRecipe(null));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasCookbookRecipe_recipeNotInCookbook_returnsFalse() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(modelManager.hasCookbookRecipe(CARBONARA));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void hasCookbookRecipe_recipeInCookbook_returnsTrue() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager.addCookbookRecipe(CARBONARA);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(modelManager.hasCookbookRecipe(CARBONARA));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getFilteredCookbookRecipeList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredCookbookRecipeList().remove(0));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, new Cookbook(), new Inventory(), new Cart(), userPrefs);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, new Cookbook(), new Inventory(), new Cart(),"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                userPrefs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, new Cookbook(), new Inventory(),"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new Cart(), userPrefs)));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, new Cookbook(), new Inventory(), new Cart(),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                userPrefs)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, new Cookbook(), new Inventory(), new Cart(),"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                differentUserPrefs)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 63,
      "teo-jun-xiong": 13,
      "-": 127
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCookbookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCookbookFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setInventoryFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setInventoryFilePath(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setCartFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setCartFilePath(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 17,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientNameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientNameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new IngredientName(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor_invalidIngredientName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String invalidIngredientName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new IngredientName(invalidIngredientName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isValidIngredientName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null ingredient name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e IngredientName.isValidIngredientName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // invalid ingredient name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientName.isValidIngredientName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid ingredient name"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"eggs\")); // lower case alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"EGGS\")); // lower case alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"100 calorie yogurt\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Full Cream Milk\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Full Cream Milk \")); // with trailing whitespace"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Hershey\u0027s Kisses\")); // with apostrophe"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Self-raising flour\")); // with dash"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"70% dark chocolate\")); // with numbers and percent sign"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientName.isValidIngredientName(\"Organic whole milk Greek yogurt\")); // long ingredient names"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toString_validIngredient_returnsStringRepresentation() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"eggs\", new IngredientName(\"eggs\").toString()); // lower case alphabets only"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"EGGS\", new IngredientName(\"EGGS\").toString()); // upper case alphabets only"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"12345\", new IngredientName(\"12345\").toString()); // numbers only"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"100 calorie yogurt\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new IngredientName(\"100 calorie yogurt\").toString()); // alphanumeric characters"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Full Cream Milk\", new IngredientName(\"Full Cream Milk\").toString()); // with capital letter"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Full Cream Milk\", new IngredientName(\"Full Cream Milk \").toString()); // with trailing whitespace"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Hershey\u0027s Kisses\", new IngredientName(\"Hershey\u0027s Kisses\").toString()); // with apostrophe"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Self-raising flour\", new IngredientName(\"Self-raising flour\").toString()); // with dash"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"70% dark chocolate\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new IngredientName(\"70% dark chocolate\").toString()); // with numbers and percent sign"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Organic whole milk Greek yogurt\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new IngredientName(\"Organic whole milk Greek yogurt\").toString()); // long ingredient names"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientName testIngredientName \u003d new IngredientName(\"Eggs\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientName.equals(new IngredientName(\"Eggs\")));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientName.equals(testIngredientName));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name with different case -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientName.equals(new IngredientName(\"eggs\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name with trailing whitespace -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientName.equals(new IngredientName(\"Eggs \")));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientName.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient name -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientName.equals(new IngredientName(\"Milk\")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientQuantityTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientQuantityTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new IngredientQuantity(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void constructor_invalidIngredientQuantity_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String invalidIngredientQuantity \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new IngredientQuantity(invalidIngredientQuantity));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isValidIngredientQuantity() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null ingredient quantity"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e IngredientQuantity.isValidIngredientQuantity(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // invalid ingredient quantity"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"dozen\")); // starts with alphabets"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"1.\")); // whole number with decimal point"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"1 / 2 cups\")); // spaces in fraction"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(IngredientQuantity.isValidIngredientQuantity(\"1 piece1\")); // number in unit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid ingredient quantity"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"12345\")); // whole number"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"0.5\")); // decimal number"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"1/2\")); // pure fraction"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"1 1/2\")); // mixed fraction"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"100 ml\")); // whole number and unit"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"100ml\")); // no space between value and unit"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"2.5 cups\")); // decimal number and unit"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\".5 cups\")); // starts with decimal point"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"1/2 cups\")); // pure fractions and unit"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"2 1/2 cups\")); // mixed fractions and unit"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"1 Tablespoon\")); // with capital letters"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(IngredientQuantity.isValidIngredientQuantity(\"1 rounded tsp\")); // unit with spaces"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isCompatibleWith() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity a \u003d new IngredientQuantity(\"1 cup\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity b \u003d new IngredientQuantity(\"0.25 cup\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity c \u003d new IngredientQuantity(\"1/2 cup\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity d \u003d new IngredientQuantity(\"100 ml\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(a.isCompatibleWith(a));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(a.isCompatibleWith(b));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(a.isCompatibleWith(c));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(b.isCompatibleWith(a));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(b.isCompatibleWith(b));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(b.isCompatibleWith(c));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(c.isCompatibleWith(a));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(c.isCompatibleWith(b));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(c.isCompatibleWith(c));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(d.isCompatibleWith(d));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(a.isCompatibleWith(d));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(b.isCompatibleWith(d));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(c.isCompatibleWith(d));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(d.isCompatibleWith(a));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(d.isCompatibleWith(b));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(d.isCompatibleWith(c));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity a \u003d new IngredientQuantity(\"1 cup\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity b \u003d new IngredientQuantity(\"0.25 cup\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity c \u003d new IngredientQuantity(\"1.2cup\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity d \u003d new IngredientQuantity(\"3/4 cup\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity e \u003d new IngredientQuantity(\"2 1/2 cup\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity f \u003d new IngredientQuantity(\"100 ml\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e a.add(f));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e b.add(f));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e c.add(f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e d.add(f));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e e.add(f));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.add(a));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.add(b));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.add(c));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.add(d));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.add(e));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.25 cup\", a.add(b).toString());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.2 cup\", a.add(c).toString());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 3/4 cup\", a.add(d).toString());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3 1/2 cup\", a.add(e).toString());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.25 cup\", b.add(a).toString());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.45 cup\", b.add(c).toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 cup\", b.add(d).toString());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 3/4 cup\", b.add(e).toString());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.2 cup\", c.add(a).toString());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.45 cup\", c.add(b).toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.95 cup\", c.add(d).toString());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3.7 cup\", c.add(e).toString());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 3/4 cup\", d.add(a).toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 cup\", d.add(b).toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.95 cup\", d.add(c).toString());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3 1/4 cup\", d.add(e).toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3 1/2 cup\", e.add(a).toString());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 3/4 cup\", e.add(b).toString());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3.7 cup\", e.add(c).toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"3 1/4 cup\", e.add(d).toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void subtract() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity a \u003d new IngredientQuantity(\"1 cup\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity b \u003d new IngredientQuantity(\"0.25 cup\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity c \u003d new IngredientQuantity(\"1.2cup\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity d \u003d new IngredientQuantity(\"3/4 cup\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity e \u003d new IngredientQuantity(\"2 1/2 cup\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity f \u003d new IngredientQuantity(\"100 ml\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e a.subtract(f));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e b.subtract(f));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e c.subtract(f));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e d.subtract(f));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e e.subtract(f));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.subtract(a));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.subtract(b));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.subtract(c));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.subtract(d));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e f.subtract(e));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.75 cup\", a.subtract(b).toString());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        //assertEquals(\"0 cup\", a.subtract(c).toString());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/4 cup\", a.subtract(d).toString());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        //assertEquals(\"0 cup\", a.subtract(e).toString());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0 cup\", b.subtract(a).toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0 cup\", b.subtract(c).toString());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0 cup\", b.subtract(d).toString());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0 cup\", b.subtract(e).toString());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.2 cup\", c.subtract(a).toString());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.95 cup\", c.subtract(b).toString());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.45 cup\", c.subtract(d).toString());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        //assertEquals(\"0 cup\", c.subtract(e).toString());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        //assertEquals(\"0 cup\", d.subtract(a).toString());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/2 cup\", d.subtract(b).toString());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        //assertEquals(\"0 cup\", d.subtract(c).toString());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        //assertEquals(\"0 cup\", d.subtract(e).toString());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 1/2 cup\", e.subtract(a).toString());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2 1/4 cup\", e.subtract(b).toString());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1.3 cup\", e.subtract(c).toString());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 3/4 cup\", e.subtract(d).toString());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseValue() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid ingredient quantity"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"12345\", IngredientQuantity.parseValue(\"12345\").toString()); // whole number"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.5\", IngredientQuantity.parseValue(\"0.5\").toString()); // decimal number"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/2\", IngredientQuantity.parseValue(\"1/2\").toString()); // pure fraction"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 1/2\", IngredientQuantity.parseValue(\"1 1/2\").toString()); // mixed fraction"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"100\", IngredientQuantity.parseValue(\"100 ml\").toString()); // whole number and unit"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"100\", IngredientQuantity.parseValue(\"100ml\").toString()); // no space between value and unit"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.5\", IngredientQuantity.parseValue(\"2.5 cups\").toString()); // decimal number and unit"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.5\", IngredientQuantity.parseValue(\".5 cups\").toString()); // starts with decimal point"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/2\", IngredientQuantity.parseValue(\"1/2 cups\").toString()); // pure fractions and unit"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.3\", IngredientQuantity.parseValue(\"2 3/10 cups\").toString()); // denominator larger than 6"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1\", IngredientQuantity.parseValue(\"1 Tablespoon\").toString()); // with capital letters"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1\", IngredientQuantity.parseValue(\"1 rounded tsp\").toString()); // unit with spaces;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void parseUnit() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid ingredient quantity"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"\", IngredientQuantity.parseUnit(\"12345\")); // whole number"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"\", IngredientQuantity.parseUnit(\"0.5\")); // decimal number"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"\", IngredientQuantity.parseUnit(\"1/2\")); // pure fraction"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"\", IngredientQuantity.parseUnit(\"1 1/2\")); // mixed fraction"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"ml\", IngredientQuantity.parseUnit(\"100 ml\")); // whole number and unit"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"ml\", IngredientQuantity.parseUnit(\"100ml\")); // no space between value and unit"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"cups\", IngredientQuantity.parseUnit(\"2.5 cups\")); // decimal number and unit"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"cups\", IngredientQuantity.parseUnit(\".5 cups\")); // starts with decimal point"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"cups\", IngredientQuantity.parseUnit(\"1/2 cups\")); // pure fractions and unit"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"cups\", IngredientQuantity.parseUnit(\"2 3/5 cups\")); // mixed fractions and unit"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"Tablespoon\", IngredientQuantity.parseUnit(\"1 Tablespoon\")); // with capital letters"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"rounded tsp\", IngredientQuantity.parseUnit(\"1 rounded tsp \")); // unit with spaces;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toString_validIngredientQuantity_returnsStringRepresentation() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // valid ingredient quantity"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"12345\", new IngredientQuantity(\"12345\").toString()); // whole number"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.5\", new IngredientQuantity(\"0.5\").toString()); // decimal number"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/2\", new IngredientQuantity(\"1/2\").toString()); // pure fraction"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 1/2\", new IngredientQuantity(\"1 1/2\").toString()); // mixed fraction"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"100 ml\", new IngredientQuantity(\"100 ml\").toString()); // whole number and unit"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"100 ml\", new IngredientQuantity(\"100ml\").toString()); // no space between value and unit"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.5 cups\", new IngredientQuantity(\"2.5 cups\").toString()); // decimal number and unit"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"0.5 cups\", new IngredientQuantity(\".5 cups\").toString()); // starts with decimal point"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1/2 cups\", new IngredientQuantity(\"1/2 cups\").toString()); // pure fractions and unit"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"2.3 cups\", new IngredientQuantity(\"2 3/10 cups\").toString()); // mixed fractions and unit"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 Tablespoon\", new IngredientQuantity(\"1 Tablespoon\").toString()); // with capital letters"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(\"1 rounded tsp\", new IngredientQuantity(\"1 rounded tsp \").toString()); // unit with spaces;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        IngredientQuantity testIngredientQuantity \u003d new IngredientQuantity(\"100 ml\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same quantity -\u003e returns true"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientQuantity.equals(new IngredientQuantity(\"100 ml\")));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientQuantity.equals(testIngredientQuantity));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same quantity with no whitespace between value and unit -\u003e returns true"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientQuantity.equals(new IngredientQuantity(\"100ml\")));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same quantity with trailing whitespace -\u003e returns true"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(testIngredientQuantity.equals(new IngredientQuantity(\"100 ml \")));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientQuantity.equals(null));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient quantity -\u003e returns false"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientQuantity.equals(new IngredientQuantity(\"200 g\")));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient quantity value -\u003e returns false"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientQuantity.equals(new IngredientQuantity(\"200 ml\")));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient quantity unit -\u003e returns false"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientQuantity.equals(new IngredientQuantity(\"100 g\")));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient quantity unit -\u003e returns false"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(testIngredientQuantity.equals(new IngredientQuantity(\"100\")));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 244,
      "teo-jun-xiong": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/IngredientTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_BANANA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void isSameIngredient() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.isSameIngredient(APPLE));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.isSameIngredient(null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withName(VALID_INGREDIENT_NAME_BANANA).build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.isSameIngredient(editedApple));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same name, different quantity -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.isSameIngredient(editedApple));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient appleCopy \u003d new IngredientBuilder(APPLE).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.equals(appleCopy));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(APPLE.equals(APPLE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.equals(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.equals(5));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different ingredient -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.equals(BANANA));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withName(VALID_INGREDIENT_NAME_BANANA).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // different quantity -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        // assertFalse(APPLE.equals(editedApple));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 57,
      "teo-jun-xiong": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ingredient/UniqueIngredientListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "package seedu.address.model.ingredient;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BANANA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.DuplicateIngredientException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.exceptions.IngredientNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.IngredientBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "public class UniqueIngredientListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    private final UniqueIngredientList uniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(uniqueIngredientList.contains(APPLE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(uniqueIngredientList.contains(APPLE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void contains_ingredientWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertTrue(uniqueIngredientList.contains(editedApple));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "tzihiang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void add_duplicateIngredient_throwsDuplicateIngredientException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DuplicateIngredientException.class, () -\u003e uniqueIngredientList.add(APPLE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_nullTargetIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredient(null, APPLE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_nullEditedIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredient(APPLE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_targetIngredientNotInList_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IngredientNotFoundException.class, () -\u003e uniqueIngredientList.setIngredient(APPLE, APPLE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientIsSameIngredient_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredient(APPLE, APPLE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Ingredient editedApple \u003d new IngredientBuilder(APPLE).withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredient(APPLE, editedApple);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(editedApple);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredient(APPLE, BANANA);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_editedIngredientHasNonUniqueIdentity_throwsDuplicateIngredientException() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DuplicateIngredientException.class, () -\u003e uniqueIngredientList.setIngredient(APPLE, BANANA));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_nullIngredient_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.remove(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_ingredientDoesNotExist_throwsIngredientNotFoundException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IngredientNotFoundException.class, () -\u003e uniqueIngredientList.remove(APPLE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void remove_existingIngredient_removesIngredient() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.remove(APPLE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredient_nullUniqueIngredientList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                uniqueIngredientList.setIngredients((UniqueIngredientList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_uniqueIngredientList_replacesOwnListWithProvidedUniqueIngredientList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredients(expectedUniqueIngredientList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueIngredientList.setIngredients((List\u003cIngredient\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.add(APPLE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cIngredient\u003e ingredientList \u003d Collections.singletonList(BANANA);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        uniqueIngredientList.setIngredients(ingredientList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        UniqueIngredientList expectedUniqueIngredientList \u003d new UniqueIngredientList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        expectedUniqueIngredientList.add(BANANA);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(expectedUniqueIngredientList, uniqueIngredientList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void setIngredients_listWithDuplicateIngredients_throwsDuplicateIngredientException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        List\u003cIngredient\u003e listWithDuplicateIngredients \u003d Arrays.asList(APPLE, APPLE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DuplicateIngredientException.class, () -\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                uniqueIngredientList.setIngredients(listWithDuplicateIngredients));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            -\u003e uniqueIngredientList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "tzihiang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 150,
      "teo-jun-xiong": 2,
      "tzihiang": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "-": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 2,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 2,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeDescriptionTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeDescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeDescription(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void constructor_invalidDescription_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String invalidRecipeDescription \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new RecipeDescription(invalidRecipeDescription));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void isValidRecipeDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e RecipeDescription.isValidRecipeDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(RecipeDescription.isValidRecipeDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(RecipeDescription.isValidRecipeDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // valid description"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"eggs scrambled with pepper\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"11223344\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"1st in the world\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"Succulent Pork Belly\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"A-grade\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeDescription.isValidRecipeDescription(\"Roasted cod with crushed potatoes, artichoke, \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "                + \"salted capers, red wine and lemon sauce\")); // long descriptions"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeNameContainsKeywordsPredicateTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeNameContainsKeywordsPredicateTest {}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeNameTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeNameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new RecipeName(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        String invalidRecipeName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new RecipeName(invalidRecipeName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    public void isValidRecipeName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e RecipeName.isValidRecipeName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(RecipeName.isValidRecipeName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertFalse(RecipeName.isValidRecipeName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"bacon carbonara\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"0123210\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"number 1 cake\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"Beef Wellington\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"Shepherd\u0027s Pie\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "        assertTrue(RecipeName.isValidRecipeName(\"Slow-roasted Cumbrian saddleback pork belly\")); // long names"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/RecipeTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "shanecsj"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "shanecsj"
        },
        "content": "public class RecipeTest {}"
      }
    ],
    "authorContributionMap": {
      "shanecsj": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/recipe/UniqueRecipeListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.model.recipe;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.CARBONARA;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.exceptions.DuplicateRecipeException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.exceptions.RecipeNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class UniqueRecipeListTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private final UniqueRecipeList uniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void containsNullRecipeThrowsNullPointerException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.contains(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void contains_recipeNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertFalse(uniqueRecipeList.contains(CARBONARA));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void contains_recipeInList_returnsTrue() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        uniqueRecipeList.add(CARBONARA);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertTrue(uniqueRecipeList.contains(CARBONARA));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void add_nullRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.add(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void add_duplicateRecipe_throwsDuplicateRecipeException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        uniqueRecipeList.add(CARBONARA);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(DuplicateRecipeException.class, () -\u003e uniqueRecipeList.add(CARBONARA));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipe_nullTargetRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipe(null, CARBONARA));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipe_nullEditedRecipe_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueRecipeList.setRecipe(CARBONARA, null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setRecipe_targetRecipeNotInList_throwsRecipeNotFoundException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(RecipeNotFoundException.class, () -\u003e uniqueRecipeList.setRecipe(CARBONARA, CARBONARA));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void setPerson_editedRecipeIsSameRecipe_success() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        uniqueRecipeList.add(CARBONARA);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        uniqueRecipeList.setRecipe(CARBONARA, CARBONARA);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        UniqueRecipeList expectedUniqueRecipeList \u003d new UniqueRecipeList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        expectedUniqueRecipeList.add(CARBONARA);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(expectedUniqueRecipeList, uniqueRecipeList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/model/step/StepTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class StepTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Step(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void constructor_invalidStep_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "        String invalidStep \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Step(invalidStep));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void isValidStep() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "        // null step"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Step.isValidStep(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "        // invalid step"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertFalse(Step.isValidStep(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertFalse(Step.isValidStep(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        // valid step"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(Step.isValidStep(\"hahahaha\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(Step.isValidStep(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(Step.isValidStep(\"throw 2 eggs in the water\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(Step.isValidStep(\"Sear the meat\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(Step.isValidStep(\"Peel the egg. Then throw the egg in the soup.\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "hans555": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/step/UniqueStepListTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hans555"
        },
        "content": "package seedu.address.model.step;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hans555"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hans555"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hans555"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.exceptions.DuplicateStepException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hans555"
        },
        "content": "import seedu.address.model.step.exceptions.StepNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hans555"
        },
        "content": "public class UniqueStepListTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Step TESTSTEP \u003d new Step(\"Cook 1 egg.\"); // for the time being only"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private static final Step TESTSTEP2 \u003d new Step(\"Boil 2 egg.\"); // for the time being only"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hans555"
        },
        "content": "    private final UniqueStepList uniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void contains_nullStep_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.contains(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void contains_stepNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertFalse(uniqueStepList.contains(TESTSTEP));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void contains_stepInList_returnsTrue() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertTrue(uniqueStepList.contains(TESTSTEP));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void add_nullStep_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.add(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void add_duplicateStep_throwsDuplicateStepException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(DuplicateStepException.class, () -\u003e uniqueStepList.add(TESTSTEP));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep_nullTargetStep_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.setStep(null, TESTSTEP));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep_nullEditedStep_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.setStep(TESTSTEP, null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep_targetStepNotInList_throwsStepNotFoundException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(StepNotFoundException.class, () -\u003e uniqueStepList.setStep(TESTSTEP, TESTSTEP));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep_editedStepIsSameStep_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.setStep(TESTSTEP, TESTSTEP);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList expectedUniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hans555"
        },
        "content": "        expectedUniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(expectedUniqueStepList, uniqueStepList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setPerson_editedStepHasDifferentDescription_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.setStep(TESTSTEP, TESTSTEP2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList expectedUniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hans555"
        },
        "content": "        expectedUniqueStepList.add(TESTSTEP2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(expectedUniqueStepList, uniqueStepList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setStep_editedStepHasNonUniqueDescription_throwsDuplicateStepException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP2);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(DuplicateStepException.class, () -\u003e uniqueStepList.setStep(TESTSTEP, TESTSTEP2));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void remove_nullStep_throwsNullPointerException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.remove((Step) null));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void remove_stepDoesNotExist_throwsStepNotFoundException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(StepNotFoundException.class, () -\u003e uniqueStepList.remove(TESTSTEP));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void remove_existingStep_removesStep() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.remove(TESTSTEP);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList expectedUniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(expectedUniqueStepList, uniqueStepList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps_nullUniqueStepList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.setSteps((UniqueStepList) null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps_uniqueStepList_replacesOwnListWithProvidedUniqueStepList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList expectedUniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hans555"
        },
        "content": "        expectedUniqueStepList.add(TESTSTEP2);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.setSteps(expectedUniqueStepList);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(expectedUniqueStepList, uniqueStepList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueStepList.setSteps((List\u003cStep\u003e) null));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.add(TESTSTEP);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hans555"
        },
        "content": "        List\u003cStep\u003e stepList \u003d Collections.singletonList(TESTSTEP2);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hans555"
        },
        "content": "        uniqueStepList.setSteps(stepList);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "hans555"
        },
        "content": "        UniqueStepList expectedUniqueStepList \u003d new UniqueStepList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hans555"
        },
        "content": "        expectedUniqueStepList.add(TESTSTEP2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertEquals(expectedUniqueStepList, uniqueStepList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void setSteps_listWithDuplicateSteps_throwsDuplicateStepException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "hans555"
        },
        "content": "        List\u003cStep\u003e listWithDuplicateSteps \u003d Arrays.asList(TESTSTEP, TESTSTEP);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(DuplicateStepException.class, () -\u003e uniqueStepList.setSteps(listWithDuplicateSteps));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hans555"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hans555"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hans555"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hans555"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hans555"
        },
        "content": "            -\u003e uniqueStepList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hans555"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "hans555"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hans555": 149
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedIngredientTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.storage.JsonAdaptedIngredient.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.BUTTER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonAdaptedIngredientTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String INVALID_INGREDIENT_NAME \u003d \"R!ce\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String INVALID_INGREDIENT_QUANTITY \u003d \"one\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String VALID_INGREDIENT_NAME \u003d BUTTER.getName().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final String VALID_INGREDIENT_QUANTITY \u003d BUTTER.getQuantity().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_validIngredientDetails_returnsIngredient() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(BUTTER);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(BUTTER, ingredient.toModelType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_invalidIngredientName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonAdaptedIngredient(INVALID_INGREDIENT_NAME, VALID_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String expectedMessage \u003d IngredientName.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_nullIngredientName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(null, VALID_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, IngredientName.class.getSimpleName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_invalidIngredientQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                new JsonAdaptedIngredient(VALID_INGREDIENT_NAME, INVALID_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String expectedMessage \u003d IngredientQuantity.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_nullIngredientQuantity_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonAdaptedIngredient ingredient \u003d new JsonAdaptedIngredient(VALID_INGREDIENT_NAME, null);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, IngredientQuantity.class.getSimpleName());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, ingredient::toModelType);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_TAGS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_TAGS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, invalidTags);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 3,
      "-": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedStepTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.storage.JsonAdaptedStep.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import static seedu.address.testutil.TypicalSteps.CARBONARA_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class JsonAdaptedStepTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String INVALID_STEP_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private static final String VALID_STEP_DESCRIPTION \u003d CARBONARA_ONE.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void toModelType_validStepDescription_returnsStep() throws Exception {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        JsonAdaptedStep step \u003d new JsonAdaptedStep(VALID_STEP_DESCRIPTION);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertEquals(CARBONARA_ONE, step.toModelType());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void toModelType_invalidStepDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        JsonAdaptedStep step \u003d new JsonAdaptedStep(INVALID_STEP_DESCRIPTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        String expectedMessage \u003d Step.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, step::toModelType);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public void toModelType_nullStepDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        JsonAdaptedStep step \u003d new JsonAdaptedStep((String) null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, \"step description\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, step::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonCartStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.HAZELNUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ICECREAM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalCart;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonCartStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonIngredientListStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readCart_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readCart(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyCart\u003e readCart(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new JsonCartStorage(Paths.get(filePath)).readCart(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(readCart(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCart(\"notJsonFormatIngredientList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readCart_invalidIngredientCart_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCart(\"invalidIngredientList.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readCart_invalidAndValidIngredientCart_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readCart(\"invalidAndValidIngredientList.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readAndSaveCart_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempCart.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart original \u003d getTypicalCart();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCartStorage jsonCartStorage \u003d new JsonCartStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonCartStorage.saveCart(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyCart readBack \u003d jsonCartStorage.readCart(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Cart(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.addIngredient(HAZELNUT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.removeIngredient(APPLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonCartStorage.saveCart(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        readBack \u003d jsonCartStorage.readCart(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Cart(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.addIngredient(ICECREAM);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonCartStorage.saveCart(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        readBack \u003d jsonCartStorage.readCart().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Cart(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart_nullCart_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCart(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Saves {@code cart} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void saveCart(ReadOnlyCart cart, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            new JsonCartStorage(Paths.get(filePath)).saveCart(cart, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveCart_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveCart(new Cart(), null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonInventoryStorageTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.APPLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.HAZELNUT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.ICECREAM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalInventory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonInventoryStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonIngredientListStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readInventory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readInventory(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private java.util.Optional\u003cReadOnlyInventory\u003e readInventory(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new JsonInventoryStorage(Paths.get(filePath)).readInventory(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertFalse(readInventory(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventory(\"notJsonFormatIngredientList.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readInventory_invalidIngredientInventory_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventory(\"invalidIngredientList.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readInventory_invalidAndValidIngredientInventory_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readInventory(\"invalidAndValidIngredientList.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void readAndSaveInventory_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempInventory.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory original \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonInventoryStorage jsonInventoryStorage \u003d new JsonInventoryStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonInventoryStorage.saveInventory(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyInventory readBack \u003d jsonInventoryStorage.readInventory(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.addIngredient(HAZELNUT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.removeIngredient(APPLE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonInventoryStorage.saveInventory(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        readBack \u003d jsonInventoryStorage.readInventory(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        original.addIngredient(ICECREAM);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        jsonInventoryStorage.saveInventory(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        readBack \u003d jsonInventoryStorage.readInventory().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Inventory(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory_nullInventory_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveInventory(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Saves {@code inventory} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private void saveInventory(ReadOnlyInventory inventory, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            new JsonInventoryStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                    .saveInventory(inventory, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void saveInventory_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveInventory(new Inventory(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableCartTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.TypicalIngredients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonSerializableCartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonSerializableIngredientListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TYPICAL_INGREDIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalIngredients.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path INVALID_INGREDIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidIngredient.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path DUPLICATE_INGREDIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateIngredients.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_typicalIngredientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableCart dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_INGREDIENTS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableCart.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart cartFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart typicalIngredientsCart \u003d TypicalIngredients.getTypicalCart();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(cartFromFile, typicalIngredientsCart);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_invalidIngredientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableCart dataFromFile \u003d JsonUtil.readJsonFile(INVALID_INGREDIENT_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableCart.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_duplicateIngredients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableCart dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_INGREDIENTS_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableCart.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableCart.MESSAGE_DUPLICATE_INGREDIENT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableInventoryTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.testutil.TypicalIngredients;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class JsonSerializableInventoryTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .get(\"src\", \"test\", \"data\", \"JsonSerializableIngredientListTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path TYPICAL_INGREDIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalIngredients.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path INVALID_INGREDIENT_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidIngredient.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private static final Path DUPLICATE_INGREDIENTS_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateIngredients.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_typicalIngredientsFile_success() throws Exception {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_INGREDIENTS_FILE,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory inventoryFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory typicalIngredientsInventory \u003d TypicalIngredients.getTypicalInventory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(inventoryFromFile, typicalIngredientsInventory);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_invalidIngredientFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(INVALID_INGREDIENT_FILE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void toModelType_duplicateIngredients_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonSerializableInventory dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_INGREDIENTS_FILE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                JsonSerializableInventory.class).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableInventory.MESSAGE_DUPLICATE_INGREDIENT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalCart;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalIngredients.getTypicalInventory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.testutil.TypicalRecipes.getTypicalCookbook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCart;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyCookbook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ReadOnlyInventory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCookbookStorage cookbookStorage \u003d new JsonCookbookStorage(getTempFilePath(\"cookbook\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonInventoryStorage inventoryStorage \u003d new JsonInventoryStorage(getTempFilePath(\"inventory\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        JsonCartStorage cartStorage \u003d new JsonCartStorage(getTempFilePath(\"cart\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storageManager \u003d new StorageManager(cookbookStorage, inventoryStorage, cartStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void cookbookReadSave() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * {@link JsonCookbookStorage} class."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonCookbookStorageTest} class."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cookbook original \u003d getTypicalCookbook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storageManager.saveCookbook(original);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyCookbook retrieved \u003d original; //storageManager.readCookbook().get();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Cookbook(retrieved));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void inventoryReadSave() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * {@link JsonInventoryStorage} class."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonInventoryStorageTest} class."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory original \u003d getTypicalInventory();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storageManager.saveInventory(original);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyInventory retrieved \u003d original; //storageManager.readInventory().get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Inventory(retrieved));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void cartReadSave() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * {@link JsonCartStorage} class."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonCartStorageTest} class."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "gohkh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart original \u003d getTypicalCart();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        storageManager.saveCart(original);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ReadOnlyCart retrieved \u003d original; //storageManager.readCart().get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertEquals(original, new Cart(retrieved));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getCookbookFilePath() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertNotNull(storageManager.getCookbookFilePath());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getInventoryFilePath() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertNotNull(storageManager.getInventoryFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public void getCartFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        assertNotNull(storageManager.getCartFilePath());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 58,
      "-": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/IngredientBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientName;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.IngredientQuantity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A utility class to help with building {@code Ingredient} objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class IngredientBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String DEFAULT_INGREDIENT_NAME \u003d \"Apples\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String DEFAULT_INGREDIENT_QUANTITY \u003d \"10\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private IngredientName ingredientName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private IngredientQuantity ingredientQuantity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredientName \u003d new IngredientName(DEFAULT_INGREDIENT_NAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredientQuantity \u003d new IngredientQuantity(DEFAULT_INGREDIENT_QUANTITY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Initializes the IngredientBuilder with the data of {@code ingredientToCopy}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientBuilder(Ingredient ingredientToCopy) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredientName \u003d ingredientToCopy.getName();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        ingredientQuantity \u003d ingredientToCopy.getQuantity();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sets the {@code IngredientName} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientBuilder withName(String ingredientName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientName \u003d new IngredientName(ingredientName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Sets the {@code IngredientQuantity} of the {@code Ingredient} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public IngredientBuilder withQuantity(String ingredientQuantity) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        this.ingredientQuantity \u003d new IngredientQuantity(ingredientQuantity);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public Ingredient build() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new Ingredient(ingredientName, ingredientQuantity);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new Person(name, tags);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 1,
      "-": 53
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/RecipeBuilder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeDescription;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.RecipeName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * A utility class to help with building Recipe objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class RecipeBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String DEFAULT_RECIPE_NAME \u003d \"CARBONARA\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final String DEFAULT_RECIPE_DESCRIPTION \u003d \"The best dish sold in NUS.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private RecipeName recipeName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private RecipeDescription recipeDescription;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeName \u003d new RecipeName(DEFAULT_RECIPE_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        recipeDescription \u003d new RecipeDescription(DEFAULT_RECIPE_DESCRIPTION);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Initializes the RecipeBuilder with the data of {@code recipeToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeBuilder(Recipe recipeToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipeName \u003d recipeToCopy.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipeDescription \u003d recipeToCopy.getDescription();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e(recipeToCopy.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Sets the {@code recipeName} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @param recipeName"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeBuilder withRecipeName(String recipeName) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipeName \u003d new RecipeName(recipeName.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Sets the {@code recipeDescription} of the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * @param recipeDescription"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeBuilder withRecipeDescription(String recipeDescription) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.recipeDescription \u003d new RecipeDescription(recipeDescription.toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Recipe} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public RecipeBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public Recipe build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new Recipe(recipeName, recipeDescription);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIngredients.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "gohkh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_ALMOND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_NAME_BANANA;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_ALMOND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INGREDIENT_QUANTITY_BANANA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cart;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Inventory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.ingredient.Ingredient;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "gohkh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "gohkh"
        },
        "content": " * A utility class containing a list of {@code Ingredient} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "gohkh"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "gohkh"
        },
        "content": "public class TypicalIngredients {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient APPLE \u003d new IngredientBuilder().withName(\"Apples\").withQuantity(\"5\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient BUTTER \u003d new IngredientBuilder().withName(\"Butter\").withQuantity(\"200 g\").build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient CHICKEN \u003d new IngredientBuilder().withName(\"Chicken\").withQuantity(\"600 g\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient DUCK \u003d new IngredientBuilder().withName(\"Duck\").withQuantity(\"800 g\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient EGG \u003d new IngredientBuilder().withName(\"Eggs\").withQuantity(\"12\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient FLOUR \u003d new IngredientBuilder().withName(\"Flour\").withQuantity(\"500 g\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient GARLIC \u003d new IngredientBuilder().withName(\"Garlic\").withQuantity(\"3 cloves\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient HAZELNUT \u003d new IngredientBuilder().withName(\"Hazelnuts\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient ICECREAM \u003d new IngredientBuilder().withName(\"Ice cream\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    // Manually added - Ingredient\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient ALMOND \u003d new IngredientBuilder().withName(VALID_INGREDIENT_NAME_ALMOND)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .withQuantity(VALID_INGREDIENT_QUANTITY_ALMOND).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final Ingredient BANANA \u003d new IngredientBuilder().withName(VALID_INGREDIENT_NAME_BANANA)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            .withQuantity(VALID_INGREDIENT_QUANTITY_BANANA).build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static final String KEYWORD_MATCHING_APPLE \u003d \"Apple\"; // A keyword that matches APPLE"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    private TypicalIngredients() {} // prevents instantiation"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns an {@code Inventory} with all the typical ingredients."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static Inventory getTypicalInventory() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Inventory inventory \u003d new Inventory();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (Ingredient ingredient : getTypicalIngredients()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            inventory.addIngredient(ingredient);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return inventory;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns a {@code Cart} with all the typical Ingredients."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static Cart getTypicalCart() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cart cart \u003d new Cart();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        for (Ingredient ingredient : getTypicalIngredients()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            cart.addIngredient(ingredient);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cart;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "gohkh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static List\u003cIngredient\u003e getTypicalIngredients() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(APPLE, BUTTER, CHICKEN, DUCK, EGG, FLOUR, GARLIC));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "gohkh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 11,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalRecipes.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "gohkh"
        },
        "content": "import seedu.address.model.Cookbook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.recipe.Recipe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * A utility class containing a list of {@code Recipe} objects to be used in tests."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class TypicalRecipes {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Recipe CARBONARA \u003d new RecipeBuilder().withRecipeName(\"Carbonara\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .withRecipeDescription(\"The best dish sold in NUS.\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .withTags(\"Pasta\", \"Italian\", \"Simple\", \"Creamy\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Recipe SCRAMBLED_EGG \u003d new RecipeBuilder().withRecipeName(\"Scrambled Egg\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .withRecipeDescription(\"Gordan Ramsay\u0027s famous creamy and fluffly srambled eggs\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .withTags(\"Simple\", \"Celebrity\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Recipe AGLIO_OLIO \u003d new RecipeBuilder().withRecipeName(\"Aglio Olio\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .withRecipeDescription(\"A traditional Italian pasta dish made with garlic in olive oil,\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "                    + \" and dried red chili flakes.\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Recipe SPAGHETTI_BOLOGNESE \u003d new RecipeBuilder().withRecipeName(\"Spaghetti bolognese\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            .withRecipeDescription(\"Jaime Oliver\u0027s great version of the classic Italian Bolognese.\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private TypicalRecipes() {} // prevents instantiation"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "gohkh"
        },
        "content": "     * Returns a {@code Cookbook} with all the typical recipes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "gohkh"
        },
        "content": "    public static Cookbook getTypicalCookbook() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        Cookbook cookbook \u003d new Cookbook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        for (Recipe recipe : getTypicalRecipes()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "gohkh"
        },
        "content": "            cookbook.addRecipe(recipe);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "gohkh"
        },
        "content": "        return cookbook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static List\u003cRecipe\u003e getTypicalRecipes() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CARBONARA, SCRAMBLED_EGG, AGLIO_OLIO, SPAGHETTI_BOLOGNESE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "gohkh": 6,
      "teo-jun-xiong": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalSteps.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "import seedu.address.model.step.Step;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " * A utility class containing a list of {@code Step} objects to be used in tests."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "public class TypicalSteps {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Step CARBONARA_ONE \u003d new Step(\"Boil the pasta\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Step CARBONARA_TWO \u003d new Step(\"Fry pancetta in oil in a frying pan for a few mins \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"until golden and crisp. Add garlic, fry for 1 min, \");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Step CARBONARA_THREE \u003d new Step(\"Turn off the heat.\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static final Step CARBONARA_FOUR \u003d new Step(\"Briefly whisk egg and yolks with most of the Parmesan \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "            + \"and some seasoning.\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    private TypicalSteps() {} // prevents instantiation"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    public static List\u003cStep\u003e getTypicalSteps() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(CARBONARA_ONE, CARBONARA_TWO, CARBONARA_THREE, CARBONARA_FOUR));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "teo-jun-xiong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "teo-jun-xiong": 26
    }
  }
]
